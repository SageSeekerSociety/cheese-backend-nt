openapi: 3.0.0
info:
  title: Cheese Community API
  version: "1.0"
servers:
  - url: "http://localhost:8080"
paths:
  /spaces/{spaceId}:
    delete:
      parameters:
        - description: Space ID
          in: path
          name: spaceId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                required:
                  - code
                  - message
                type: object
          description: OK
      tags: [ ]
      operationId: delete-space
      summary: Delete Space
    get:
      parameters:
        - description: Space ID
          in: path
          name: spaceId
          required: true
          schema:
            type: integer
            format: int64
        - description: Query your rank in this space
          in: query
          name: queryMyRank
          schema:
            type: boolean
            default: false
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      space:
                        $ref: "#/components/schemas/Space"
                    required:
                      - space
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      tags: [ ]
      operationId: get-space
      summary: Query Space
    patch:
      parameters:
        - description: Space ID
          in: path
          name: spaceId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      space:
                        $ref: "#/components/schemas/Space"
                    required:
                      - space
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      tags: [ ]
      operationId: patch-space
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                intro:
                  type: string
                description:
                  type: string
                name:
                  type: string
                avatarId:
                  type: integer
                  format: int64
                enableRank:
                  type: boolean
                announcements:
                  type: string
                taskTemplates:
                  type: string
                classificationTopics:
                  type: array
                  items:
                    type: integer
                    format: int64
      summary: Update Space
  /spaces:
    get:
      summary: Enumerate Spaces
      tags: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    properties:
                      spaces:
                        type: array
                        items:
                          $ref: "#/components/schemas/Space"
                      page:
                        $ref: "#/components/schemas/Page"
                  message:
                    type: string
      operationId: get-spaces
      parameters:
        - description: Query your rank in this space
          in: query
          name: queryMyRank
          schema:
            type: boolean
            default: false
        - schema:
            type: integer
          in: query
          name: page_size
          description: Page Size
        - schema:
            type: integer
            format: int64
          in: query
          name: page_start
          description: ID of First Element
        - schema:
            type: string
            default: createdAt
          in: query
          name: sort_by
          description: '"createdAt" or "updatedAt"'
        - schema:
            type: string
            default: desc
          in: query
          name: sort_order
          description: '"asc" or "desc"'
    post:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      space:
                        $ref: "#/components/schemas/Space"
                    required:
                      - space
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      tags: [ ]
      operationId: post-space
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - intro
                - description
                - name
                - avatarId
                - announcements
                - taskTemplates
              properties:
                intro:
                  type: string
                description:
                  type: string
                name:
                  type: string
                avatarId:
                  type: integer
                  format: int64
                  example: 1
                enableRank:
                  type: boolean
                  default: false
                announcements:
                  type: string
                  default: "[]"
                  example: "[]"
                taskTemplates:
                  type: string
                  default: "[]"
                  example: "[]"
                classificationTopics:
                  type: array
                  items:
                    type: integer
                    format: int64
                  default: [ ]
                  example: [ ]
      summary: Create Space
  /spaces/{spaceId}/managers/{userId}:
    delete:
      summary: Disqualify Space Admin
      tags: [ ]
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                required:
                  - code
                  - message
                type: object
          description: OK
      operationId: delete-space-admin
      parameters:
        - schema:
            type: integer
            format: int64
          in: path
          name: spaceId
          description: Space ID
          required: true
        - schema:
            type: integer
            format: int64
          in: path
          name: userId
          description: Admin User ID
          required: true
    patch:
      summary: Update Space Admin Info
      tags: [ ]
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      space:
                        $ref: "#/components/schemas/Space"
                    required:
                      - space
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      operationId: patch-space-admin
      parameters:
        - schema:
            type: integer
            format: int64
          in: path
          name: spaceId
          description: Space ID
          required: true
        - schema:
            type: integer
            format: int64
          in: path
          name: userId
          description: Admin User ID
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  $ref: "#/components/schemas/SpaceAdminRoleType"
  /spaces/{spaceId}/managers:
    post:
      summary: Add Space Admin
      tags: [ ]
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      space:
                        $ref: "#/components/schemas/Space"
                    required:
                      - space
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      operationId: post-space-admin
      parameters:
        - schema:
            type: integer
            format: int64
          in: path
          name: spaceId
          description: Space ID
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - role
                - userId
              properties:
                role:
                  $ref: "#/components/schemas/SpaceAdminRoleType"
                userId:
                  type: integer
                  format: int64
  /tasks/{taskId}:
    delete:
      parameters:
        - description: Task ID
          in: path
          name: taskId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
          description: OK
      tags: [ ]
      operationId: delete-task
      summary: Delete Task
    get:
      parameters:
        - description: Task ID
          in: path
          name: taskId
          required: true
          schema:
            type: integer
            format: int64
        - schema:
            type: boolean
            default: false
          in: query
          name: querySpace
          description: Query the space that the task belongs to
        - schema:
            type: boolean
            default: false
          in: query
          name: queryTeam
          description: Query the team that the task belongs to
        - schema:
            type: boolean
            default: false
          in: query
          name: queryJoinability
          description: Check whether current user can join this task or using one of his/her team
        - schema:
            type: boolean
            default: false
          in: query
          name: querySubmittability
          description: Check whether current user can submit this task or using one of his/her team
        - schema:
            type: boolean
            default: false
          in: query
          name: queryJoined
          description: Check whether current user has joined this task
        - schema:
            type: boolean
            default: false
          in: query
          name: queryJoinedApproved
          description: Check whether current user has joined this task and has been approved
        - schema:
            type: boolean
            default: false
          in: query
          name: queryJoinedDisapproved
          description: Check whether current user has joined this task and has been disapproved
        - schema:
            type: boolean
            default: false
          in: query
          name: queryJoinedNotApprovedOrDisapproved
          description: Check whether current user has joined this task and has not been approved or disapproved
        - schema:
            type: boolean
            default: false
          in: query
          name: queryTopics
          description: Query task's topics
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      task:
                        $ref: "#/components/schemas/Task"
                    required:
                      - task
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      tags: [ ]
      operationId: get-task
      summary: Query Task
    patch:
      parameters:
        - description: Task ID
          in: path
          name: taskId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      task:
                        $ref: "#/components/schemas/Task"
                    required:
                      - task
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      tags: [ ]
      operationId: patch-task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                hasDeadline:
                  type: boolean
                deadline:
                  type: integer
                  format: int64
                hasParticipantLimit:
                  type: boolean
                participantLimit:
                  type: integer
                defaultDeadline:
                  type: integer
                  format: int64
                resubmittable:
                  type: boolean
                editable:
                  type: boolean
                intro:
                  type: string
                description:
                  type: string
                submissionSchema:
                  type: array
                  items:
                    $ref: "#/components/schemas/TaskSubmissionSchemaEntry"
                hasRank:
                  type: boolean
                rank:
                  type: integer
                approved:
                  $ref: "#/components/schemas/ApproveType"
                rejectReason:
                  type: string
                topics:
                  type: array
                  items:
                    type: integer
                    format: int64
      summary: Update Task
  /tasks/{taskId}/ai-advice/conversations:
    post:
      summary: Create AI Advice Conversation
      operationId: create-task-ai-advice-conversation
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTaskAIAdviceConversationRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/TaskAIAdviceConversationResponse"
  /tasks/{taskId}/ai-advice/conversations/grouped:
    get:
      summary: 获取按会话ID分组的对话历史
      operationId: get-task-ai-advice-conversations-grouped
      description: 获取指定任务的所有对话，按会话ID分组
      tags:
        - Task AI Advice
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    properties:
                      conversations:
                        type: array
                        items:
                          $ref: "#/components/schemas/ConversationGroupSummary"
                  message:
                    type: string
  /tasks/{taskId}/ai-advice/conversations/{conversationId}:
    get:
      summary: 获取指定会话ID的所有对话
      operationId: get-task-ai-advice-conversation
      description: 获取特定会话ID下的所有对话记录
      tags:
        - Task AI Advice
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    properties:
                      conversations:
                        type: array
                        items:
                          $ref: "#/components/schemas/TaskAIAdviceConversation"
                  message:
                    type: string
    delete:
      summary: Delete AI Advice Conversation
      tags: [ ]
      operationId: delete-task-ai-advice-conversation
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
  /tasks/{taskId}/ai-advice:
    get:
      summary: Get AI Advice
      tags: [ ]
      operationId: get-task-ai-advice
      parameters:
        - description: Task ID
          in: path
          name: taskId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    $ref: "#/components/schemas/TaskAIAdvice"
                  message:
                    type: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                    example: "Task AI advice is not ready yet. Current status: PROCESSING"
    post:
      summary: Request AI Advice Generation
      tags: [ ]
      operationId: request-task-ai-advice
      parameters:
        - description: Task ID
          in: path
          name: taskId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    properties:
                      status:
                        $ref: "#/components/schemas/TaskAIAdviceGenerationStatus"
                      quota:
                        $ref: "#/components/schemas/QuotaInfo"
                  message:
                    type: string
  /tasks/{taskId}/ai-advice/status:
    get:
      summary: Get AI Advice Generation Status
      tags: [ ]
      operationId: get-task-ai-advice-status
      parameters:
        - description: Task ID
          in: path
          name: taskId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    properties:
                      status:
                        $ref: "#/components/schemas/TaskAIAdviceGenerationStatus"
                  message:
                    type: string

  /ai/quota:
    get:
      summary: Get Current User's AI Quota
      tags: [ ]
      operationId: get-user-ai-quota
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    $ref: "#/components/schemas/QuotaInfo"
                  message:
                    type: string
  /tasks:
    get:
      summary: Enumerate Tasks
      tags: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    properties:
                      tasks:
                        type: array
                        items:
                          $ref: "#/components/schemas/Task"
                      page:
                        $ref: "#/components/schemas/Page"
                  message:
                    type: string
      operationId: get-tasks
      parameters:
        - schema:
            type: integer
            format: int64
          in: query
          name: space
          description: Space ID
        - schema:
            type: integer
            format: int64
          in: query
          name: team
          description: Team ID
        - schema:
            $ref: "#/components/schemas/ApproveType"
          in: query
          name: approved
          description: Distinguish task status
        - schema:
            type: integer
            format: int64
          in: query
          name: owner
          description: Owner's User ID
        - schema:
            type: boolean
          in: query
          name: joined
          description: Require joined or not
        - schema:
            type: array
            items:
              type: integer
              format: int64
          in: query
          name: topics
          description: Only show tasks with at least one of these topics
        - schema:
            type: integer
            default: 9
          in: query
          name: page_size
          description: Page Size
        - schema:
            type: integer
            format: int64
          in: query
          name: page_start
          description: ID of First Element
        - schema:
            type: string
            default: updatedAt
          in: query
          name: sort_by
          description: '"updatedAt", "deadline" or "createdAt"'
        - schema:
            type: string
            default: desc
          in: query
          name: sort_order
          description: '"asc" or "desc"'
        - schema:
            type: boolean
            default: false
          in: query
          name: querySpace
          description: Query the space that the task belongs to
        - schema:
            type: boolean
            default: false
          in: query
          name: queryTeam
          description: Query the team that the task belongs to
        - schema:
            type: boolean
            default: false
          in: query
          name: queryJoinability
          description: Check whether current user can join this task or using one of his/her team
        - schema:
            type: boolean
            default: false
          in: query
          name: querySubmittability
          description: Check whether current user can submit this task or using one of his/her team
        - schema:
            type: boolean
            default: false
          in: query
          name: queryJoined
          description: Check whether current user has joined this task
        - schema:
            type: boolean
            default: false
          in: query
          name: queryJoinedApproved
          description: Check whether current user has joined this task and has been approved
        - schema:
            type: boolean
            default: false
          in: query
          name: queryJoinedDisapproved
          description: Check whether current user has joined this task and has been disapproved
        - schema:
            type: boolean
            default: false
          in: query
          name: queryJoinedNotApprovedOrDisapproved
          description: Check whether current user has joined this task and has not been approved or disapproved
        - schema:
            type: boolean
            default: false
          in: query
          name: queryTopics
          description: Query task's topics
        - schema:
            type: string
          in: query
          name: keywords
          description: Use this to search
    post:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      task:
                        $ref: "#/components/schemas/Task"
                    required:
                      - task
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      tags: [ ]
      operationId: post-task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - submitterType
                - resubmittable
                - editable
                - intro
                - description
                - submissionSchema
              properties:
                name:
                  type: string
                submitterType:
                  $ref: "#/components/schemas/TaskSubmitterType"
                deadline:
                  type: integer
                  format: int64
                participantLimit:
                  type: integer
                defaultDeadline:
                  type: integer
                  format: int64
                  default: 30
                resubmittable:
                  type: boolean
                editable:
                  type: boolean
                intro:
                  type: string
                description:
                  type: string
                submissionSchema:
                  type: array
                  items:
                    $ref: "#/components/schemas/TaskSubmissionSchemaEntry"
                team:
                  type: integer
                  format: int64
                space:
                  type: integer
                  format: int64
                rank:
                  type: integer
                topics:
                  type: array
                  items:
                    type: integer
                    format: int64
                  default: []
      summary: Create Task
  /tasks/{taskId}/participants:
    get:
      summary: Get Participants
      tags: [ ]
      operationId: get-task-participants
      parameters:
        - description: Task ID
          in: path
          name: taskId
          required: true
          schema:
            type: integer
            format: int64
        - schema:
            $ref: "#/components/schemas/ApproveType"
          in: query
          name: approved
          description: approve status
        - schema:
            type: boolean
            default: false
          in: query
          name: queryRealNameInfo
          description: Query real name info
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - data
                  - message
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    required:
                      - participants
                    properties:
                      participants:
                        type: array
                        items:
                          $ref: "#/components/schemas/TaskMembership"
                  message:
                    type: string
          description: OK
    patch:
      summary: Update TaskMembership
      parameters:
        - description: Task ID
          in: path
          name: taskId
          required: true
          schema:
            type: integer
            format: int64
        - description: Member ID
          in: query
          name: member
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      participants:
                        type: array
                        items:
                          $ref: "#/components/schemas/TaskMembership"
                    required:
                      - participant
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      operationId: patch-task-membership
      tags: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deadline:
                  type: integer
                  format: int64
                approved:
                  $ref: "#/components/schemas/ApproveType"
                realNameInfo:
                  $ref: "#/components/schemas/TaskParticipantRealNameInfo"
    delete:
      parameters:
        - description: Task ID
          in: path
          name: taskId
          required: true
          schema:
            type: integer
            format: int64
        - description: Member ID
          in: query
          name: member
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      participants:
                        type: array
                        items:
                          $ref: "#/components/schemas/TaskMembership"
                    required:
                      - task
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      tags: []
      operationId: delete-task-participant
      summary: Leave Task
    post:
      parameters:
        - description: Task ID
          in: path
          name: taskId
          required: true
          schema:
            type: integer
            format: int64
        - description: Member ID
          in: query
          name: member
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      participants:
                        type: array
                        items:
                          $ref: "#/components/schemas/TaskMembership"
                    required:
                      - task
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deadline:
                  type: integer
                  format: int64
                realNameInfo:
                  $ref: "#/components/schemas/TaskParticipantRealNameInfo"
      tags: []
      operationId: post-task-participant
      summary: Apply for Task
  /tasks/{taskId}/submissions:
    get:
      summary: Enumerate Submissions
      tags: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - data
                  - message
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    required:
                      - submissions
                      - page
                    properties:
                      submissions:
                        type: array
                        items:
                          $ref: "#/components/schemas/TaskSubmission"
                      page:
                        $ref: "#/components/schemas/Page"
                  message:
                    type: string
      operationId: get-task-submissions
      parameters:
        - description: Task ID
          in: path
          name: taskId
          required: true
          schema:
            type: integer
            format: int64
        - schema:
            type: integer
            format: int64
          in: query
          name: member
          description: Submitter's User/Team ID
        - schema:
            type: boolean
            default: false
          in: query
          name: allVersions
          description: Include All Versions
        - schema:
            type: boolean
            default: false
          in: query
          name: queryReview
          description: Query task owner's review
        - schema:
            type: boolean
          in: query
          name: reviewed
          description: Only return reviewed or unreviewed submissions
        - schema:
            type: integer
            default: 9
          in: query
          name: page_size
          description: Page Size
        - schema:
            type: integer
            format: int64
          in: query
          name: page_start
          description: ID of First Element
        - schema:
            type: string
            default: updatedAt
          in: query
          name: sort_by
          description: '"updatedAt" or "createdAt"'
        - schema:
            type: string
            default: desc
          in: query
          name: sort_order
          description: '"asc" or "desc"'
    post:
      summary: Create Submission
      tags: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - data
                  - message
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    required:
                      - submission
                    properties:
                      submission:
                        $ref: "#/components/schemas/TaskSubmission"
                  message:
                    type: string
      operationId: post-task-submission
      parameters:
        - schema:
            type: integer
            format: int64
          in: path
          name: taskId
          description: Task ID
          required: true
        - schema:
            type: integer
            format: int64
          in: query
          name: member
          description: Member's User/Group ID
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  contentText:
                    type: string
                  contentAttachmentId:
                    type: integer
                    format: int64
  /tasks/{taskId}/submissions/{version}:
    patch:
      summary: Update Submission
      tags: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - data
                  - message
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    required:
                      - submission
                    properties:
                      submission:
                        $ref: "#/components/schemas/TaskSubmission"
                  message:
                    type: string
      operationId: patch-task-submission
      parameters:
        - schema:
            type: integer
            format: int64
          in: path
          name: taskId
          description: Task ID
          required: true
        - schema:
            type: integer
            format: int64
          in: query
          name: member
          description: Member's User/Group ID
          required: true
        - schema:
            type: integer
          in: path
          name: version
          description: Version Index
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  contentText:
                    type: string
                  contentAttachmentId:
                    type: integer
                    format: int64
  "/tasks/submissions/{submissionId}/review":
    post:
      summary: Review Submission
      tags: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - data
                  - message
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    required:
                      - submission
                      - hasUpgradedParticipantRank
                    properties:
                      submission:
                        $ref: "#/components/schemas/TaskSubmission"
                      hasUpgradedParticipantRank:
                        type: boolean
                  message:
                    type: string
      operationId: post-task-submission-review
      parameters:
        - schema:
            type: integer
            format: int64
          in: path
          name: submissionId
          description: Task Submission ID
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accepted
                - score
                - comment
              properties:
                accepted:
                  type: boolean
                score:
                  type: integer
                comment:
                  type: string
    patch:
      summary: Re-Review Submission
      tags: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - data
                  - message
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    required:
                      - submission
                      - hasUpgradedParticipantRank
                    properties:
                      submission:
                        $ref: "#/components/schemas/TaskSubmission"
                      hasUpgradedParticipantRank:
                        type: boolean
                  message:
                    type: string
      operationId: patch-task-submission-review
      parameters:
        - schema:
            type: integer
            format: int64
          in: path
          name: submissionId
          description: Task Submission ID
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accepted:
                  type: boolean
                score:
                  type: integer
                comment:
                  type: string
    delete:
      summary: Revert Review Submission
      tags: [ ]
      responses:
        "200":
          description: OK
      operationId: delete-task-submission-review
      parameters:
        - schema:
            type: integer
            format: int64
          in: path
          name: submissionId
          description: Task Submission ID
          required: true
  /teams/{teamId}:
    delete:
      parameters:
        - description: Team ID
          in: path
          name: teamId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
          description: OK
      tags: [ ]
      operationId: delete-team
      summary: Delete Team
    get:
      parameters:
        - description: Team ID
          in: path
          name: teamId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      team:
                        $ref: "#/components/schemas/Team"
                    required:
                      - team
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      tags: [ ]
      operationId: get-team
      summary: Query Team
    patch:
      parameters:
        - description: Team ID
          in: path
          name: teamId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      team:
                        $ref: "#/components/schemas/Team"
                    required:
                      - team
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      tags: [ ]
      operationId: patch-team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                intro:
                  type: string
                description:
                  type: string
                name:
                  type: string
                avatarId:
                  type: integer
                  format: int64
      summary: Update Team
  /teams/my-teams:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - data
                  - message
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    required:
                      - teams
                    properties:
                      teams:
                        type: array
                        items:
                          $ref: "#/components/schemas/Team"
                  message:
                    type: string
          description: OK
      tags: [ ]
      operationId: get-my-teams
      summary: Query My Teams
      parameters: [ ]
  /teams:
    post:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      team:
                        $ref: "#/components/schemas/Team"
                    required:
                      - team
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      tags: [ ]
      operationId: post-team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - intro
                - description
                - name
                - avatarId
              properties:
                intro:
                  type: string
                description:
                  type: string
                name:
                  type: string
                avatarId:
                  type: integer
                  format: int64
      summary: Create Team
    get:
      summary: Get Teams
      tags: [ ]
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - data
                  - message
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    required:
                      - teams
                    properties:
                      teams:
                        type: array
                        items:
                          $ref: "#/components/schemas/Team"
                      page:
                        $ref: "#/components/schemas/Page"
                  message:
                    type: string
          description: OK
      operationId: get-teams
      parameters:
        - schema:
            type: string
            default: ""
          in: query
          name: query
          description: ID or Search Term
          allowEmptyValue: true
        - schema:
            type: integer
            format: int64
          in: query
          name: page_start
        - schema:
            type: integer
            default: 20
          in: query
          name: page_size
  /teams/{teamId}/members:
    get:
      summary: Enumerate Team Members
      tags: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - data
                  - message
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    required:
                      - members
                    properties:
                      members:
                        type: array
                        items:
                          $ref: "#/components/schemas/TeamMember"
                  message:
                    type: string
      operationId: get-team-members
      parameters:
        - schema:
            type: integer
            format: int64
          in: path
          name: teamId
          description: Team ID
          required: true
    post:
      parameters:
        - description: Team ID
          in: path
          name: teamId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      team:
                        $ref: "#/components/schemas/Team"
                    required:
                      - team
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      tags: [ ]
      operationId: post-team-member
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                role:
                  $ref: "#/components/schemas/TeamMemberRoleType"
                user_id:
                  type: integer
                  format: int64
              required:
                - role
                - user_id
              type: object
      summary: Add Team Member
  /teams/{teamId}/members/{userId}:
    delete:
      parameters:
        - description: Team ID
          in: path
          name: teamId
          required: true
          schema:
            type: integer
            format: int64
        - description: Member User ID
          in: path
          name: userId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      team:
                        $ref: "#/components/schemas/Team"
                    required:
                      - team
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      tags: [ ]
      operationId: delete-team-member
      summary: Kick Out Team Member
    patch:
      parameters:
        - description: Team ID
          in: path
          name: teamId
          required: true
          schema:
            type: integer
            format: int64
        - description: Member User ID
          in: path
          name: userId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      team:
                        $ref: "#/components/schemas/Team"
                    required:
                      - team
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      tags: [ ]
      operationId: patch-team-member
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                role:
                  $ref: "#/components/schemas/TeamMemberRoleType"
              type: object
      summary: Update Team Membership Info
  /notifications/{notificationId}:
    delete:
      parameters:
        - description: Notification ID
          in: path
          name: notificationId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
          description: OK
      tags: [ ]
      operationId: delete-notification
      summary: Delete Notification
  /notifications:
    get:
      summary: List Notifications
      tags: [ ]
      parameters:
        - schema:
            type: string
            enum:
              - mention
              - reply
              - reaction
              - project_invite
              - deadline_remind
          in: query
          name: type
          description: Notification Type
          required: false
        - schema:
            type: boolean
          in: query
          name: read
          description: Whether to filter read or unread notifications
          required: false
        - schema:
            type: integer
            format: int64
          in: query
          name: page_start
          description: Page Start Index
          required: true
        - schema:
            type: integer
            format: int32
          in: query
          name: page_size
          description: Page Size
          required: true
      operationId: list-notifications
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 200
                  message:
                    type: string
                    default: "success"
                  data:
                    required:
                      - notifications
                      - page
                    properties:
                      notifications:
                        type: array
                        items:
                          $ref: "#/components/schemas/Notification"
                      page:
                        $ref: "#/components/schemas/Page"
  /notifications/read:
    post:
      summary: Mark Notifications as Read
      tags: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - notificationIds
              properties:
                notificationIds:
                  type: array
                  items:
                    type: integer
                    format: int64
      operationId: mark-notifications-as-read
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 200
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      notificationIds:
                        type: array
                        items:
                          type: integer
                          format: int64
  /notifications/unread/count:
    get:
      summary: Get Unread Notifications Count
      tags: [ ]
      parameters:
        - name: receiverId
          in: query
          required: true
          schema:
            type: integer
            format: int64
      operationId: get-unread-notifications-count
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 200
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      count:
                        type: integer
                        nullable: false
                        default: 0
  /projects:
    post:
      operationId: create-project
      summary: Create Project
      tags: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - description
                - colorCode
                - startDate
                - endDate
                - teamId
                - leaderId
              properties:
                name:
                  type: string
                description:
                  type: string
                colorCode:
                  type: string
                  pattern: "^#[0-9A-Fa-f]{6}$"
                startDate:
                  type: integer
                  format: int64
                  description: 项目开始时间戳(毫秒)
                endDate:
                  type: integer
                  format: int64
                  description: 项目结束时间戳(毫秒)
                teamId:
                  type: integer
                  format: int64
                parentId:
                  type: integer
                  format: int64
                  description: 父项目ID
                leaderId:
                  type: integer
                  format: int64
                externalTaskId:
                  type: integer
                  format: int64
                githubRepo:
                  type: string
                content:
                  type: string
                memberIds:
                  type: array
                  items:
                    type: integer
                    format: int64
                externalCollaboratorIds:
                  type: array
                  items:
                    type: integer
                    format: int64
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 201
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      project:
                        $ref: "#/components/schemas/Project"
    get:
      operationId: get-projects
      summary: List Projects
      tags: [ ]
      parameters:
        - name: team_id
          in: query
          description: 属于的小队 ID
          required: true
          schema:
            type: integer
            format: int64
        - name: parent_id
          in: query
          description: 父项目ID (可选)
          schema:
            type: integer
            format: int64
        - name: leader_id
          in: query
          description: 负责人ID (可选)
          schema:
            type: integer
            format: int64
        - name: member_id
          in: query
          description: 成员ID (可选)
          schema:
            type: integer
            format: int64
        - name: archived
          in: query
          description: 是否归档
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 200
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      projects:
                        type: array
                        items:
                          $ref: "#/components/schemas/Project"
  /projects/{projectId}:
    get:
      operationId: get-project
      summary: Query Project
      tags: [ ]
      parameters:
        - name: projectId
          in: path
          description: 项目ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 200
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      project:
                        $ref: "#/components/schemas/Project"
    patch:
      operationId: patch-project
      summary: Update Project
      tags: [ ]
      parameters:
        - name: projectId
          in: path
          description: 项目ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                colorCode:
                  type: string
                  pattern: "^#[0-9A-Fa-f]{6}$"
                startDate:
                  type: integer
                  format: int64
                  description: 项目开始时间戳(毫秒)
                endDate:
                  type: integer
                  format: int64
                  description: 项目结束时间戳(毫秒)
                githubRepo:
                  type: string
                archived:
                  type: boolean
                  description: 是否归档
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 200
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      project:
                        $ref: "#/components/schemas/Project"
    delete:
      operationId: delete-project
      summary: Delete Project
      tags: [ ]
      parameters:
        - name: projectId
          in: path
          description: 项目ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: No Content
  /projects/{projectId}/members:
    get:
      operationId: get-project-members
      summary: Enumerate Project Members
      tags: [ ]
      parameters:
        - name: projectId
          in: path
          description: 项目ID
          required: true
          schema:
            type: integer
            format: int64
        - name: page_start
          in: query
          description: 起始ID
          schema:
            type: integer
            format: int64
        - name: page_size
          in: query
          description: 每页数量 (默认20)
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 200
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      members:
                        type: array
                        items:
                          $ref: "#/components/schemas/ProjectMembership"
                      page:
                        $ref: "#/components/schemas/Page"
    post:
      operationId: post-project-member
      summary: Add Project Member
      tags: [ ]
      parameters:
        - name: projectId
          in: path
          description: 项目ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - role
              properties:
                userId:
                  type: integer
                  format: int64
                role:
                  $ref: "#/components/schemas/ProjectMemberRole"
                notes:
                  type: string
                  default: ""
                  example: ""
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 201
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      member:
                        $ref: "#/components/schemas/ProjectMembership"
  /projects/{projectId}/members/{userId}:
    delete:
      operationId: delete-project-member
      summary: Remove Project Member
      tags: [ ]
      parameters:
        - name: projectId
          in: path
          description: 项目ID
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          description: 用户ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: No Content
  /discussions:
    post:
      operationId: create-discussion
      summary: Create Discussion
      tags: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
                - modelType
                - modelId
              properties:
                content:
                  type: string
                parentId:
                  type: integer
                  format: int64
                  description: 回复某条讨论 (可选)
                mentionedUserIds:
                  type: array
                  items:
                    type: integer
                    format: int64
                  description: 提及的用户ID (可选)
                modelType:
                  $ref: "#/components/schemas/DiscussableModelType"
                  description: 模型类型
                modelId:
                  type: integer
                  format: int64
                  description: 模型ID
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 0
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      discussion:
                        $ref: "#/components/schemas/Discussion"
    get:
      operationId: list-discussions
      summary: List Discussions
      tags: [ ]
      x-handler-args:
        - arg: "userInfo: org.rucca.cheese.auth.model.AuthUserInfo?"
      parameters:
        - name: modelType
          in: query
          schema:
            $ref: "#/components/schemas/DiscussableModelType"
          description: 模型类型
        - name: modelId
          in: query
          schema:
            type: integer
            format: int64
          description: 模型ID
        - name: parent_id
          in: query
          description: 父讨论ID (可选)
          schema:
            type: integer
            format: int64
        - name: page_start
          in: query
          description: 起始ID
          schema:
            type: integer
            format: int64
        - name: page_size
          in: query
          description: 每页数量 (默认20)
          schema:
            type: integer
            default: 20
        - name: sort_by
          in: query
          description: '"createdAt" or "updatedAt"'
          schema:
            type: string
            default: createdAt
        - name: sort_order
          in: query
          description: '"asc" or "desc"'
          schema:
            type: string
            default: desc
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 0
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      discussions:
                        type: array
                        items:
                          $ref: "#/components/schemas/Discussion"
                      page:
                        $ref: "#/components/schemas/Page"
  /discussions/{discussionId}:
    get:
      operationId: get-discussion
      summary: Query Discussion
      tags: [ ]
      x-handler-args:
        - arg: "userInfo: org.rucca.cheese.auth.model.AuthUserInfo?"
      parameters:
        - name: discussionId
          in: path
          description: 讨论ID
          required: true
          schema:
            type: integer
            format: int64
        - name: page_start
          in: query
          description: 起始ID
          schema:
            type: integer
            format: int64
        - name: page_size
          in: query
          description: 每页数量 (默认20)
          schema:
            type: integer
            default: 20
        - name: sort_by
          in: query
          description: '"createdAt" or "updatedAt"'
          schema:
            type: string
            default: createdAt
        - name: sort_order
          in: query
          description: '"asc" or "desc"'
          schema:
            type: string
            default: desc
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 200
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    required:
                      - discussion
                      - subDiscussions
                    properties:
                      discussion:
                        $ref: "#/components/schemas/Discussion"
                      subDiscussions:
                        type: object
                        required:
                          - discussions
                          - page
                        properties:
                          discussions:
                            type: array
                            items:
                              $ref: "#/components/schemas/Discussion"
                          page:
                            $ref: "#/components/schemas/Page"
    patch:
      operationId: patch-discussion
      summary: Update Discussion
      tags: [ ]
      parameters:
        - name: discussionId
          in: path
          description: 讨论ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 200
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      discussion:
                        $ref: "#/components/schemas/Discussion"
    delete:
      operationId: delete-discussion
      summary: Delete Discussion
      tags: [ ]
      parameters:
        - name: discussionId
          in: path
          description: 讨论ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: No Content
  /discussions/{discussionId}/sub-discussions:
    get:
      operationId: list-sub-discussions
      summary: List Sub-Discussions
      tags: [ ]
      x-handler-args:
        - arg: "userInfo: org.rucca.cheese.auth.model.AuthUserInfo?"
      parameters:
        - name: discussionId
          in: path
          description: 讨论ID
          required: true
          schema:
            type: integer
            format: int64
        - name: page_start
          in: query
          description: 起始ID
          schema:
            type: integer
            format: int64
        - name: page_size
          in: query
          description: 每页数量 (默认20)
          schema:
            type: integer
            default: 20
        - name: sort_by
          in: query
          description: '"createdAt" or "updatedAt"'
          schema:
            type: string
            default: createdAt
        - name: sort_order
          in: query
          description: '"asc" or "desc"'
          schema:
            type: string
            default: desc
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 200
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      discussions:
                        type: array
                        items:
                          $ref: "#/components/schemas/Discussion"
                      page:
                        $ref: "#/components/schemas/Page"
  /discussions/reactions:
    get:
      summary: Get all reaction types
      operationId: getAllReactionTypes
      tags:
        - Reaction Types
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          reactionTypes:
                            type: array
                            items:
                              $ref: "#/components/schemas/ReactionType"
  /discussions/{discussionId}/reactions/{reactionTypeId}:
    post:
      operationId: react-to-discussion
      summary: React to Discussion
      tags: [ ]
      parameters:
        - name: discussionId
          in: path
          description: 讨论ID
          required: true
          schema:
            type: integer
            format: int64
        - name: reactionTypeId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 0
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      reaction:
                        $ref: "#/components/schemas/DiscussionReactionSummary"
  /knowledges:
    post:
      summary: Create Knowledge Item
      tags: [ ]
      operationId: knowledgePost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - type
                - content
                - teamId
              properties:
                name:
                  type: string
                description:
                  type: string
                type:
                  $ref: "#/components/schemas/KnowledgeType"
                content:
                  type: string
                teamId:
                  type: integer
                  format: int64
                  description: "知识条目所属的团队ID"
                projectId:
                  type: integer
                  format: int64
                  description: "相关的项目ID（可选）"
                materialId:
                  type: integer
                  format: int64
                  description: "来源 Material ID（可选）"
                discussionId:
                  type: integer
                  format: int64
                  description: "来源讨论ID（可选）"
                labels:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 0
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      knowledge:
                        $ref: "#/components/schemas/Knowledge"
    get:
      summary: List Knowledge Items
      tags: [ ]
      operationId: KnowledgeGet
      parameters:
        - name: teamId
          in: query
          required: true
          schema:
            type: integer
            format: int64
        - name: projectId
          in: query
          schema:
            type: integer
            format: int64
        - name: type
          in: query
          description: Type (optional)
          schema:
            type: string
        - name: labels
          in: query
          description: Label list (optional)
          schema:
            type: array
            items:
              type: string
        - name: query
          in: query
          description: Search keyword (optional)
          schema:
            type: string
        - name: page_start
          in: query
          description: Start ID (optional)
          schema:
            type: integer
            format: int64
        - name: page_size
          in: query
          description: Page size (default 20)
          schema:
            type: integer
            default: 20
        - name: sort_by
          in: query
          description: Sort by (optional)
          schema:
            type: string
            default: createdAt
        - name: sort_order
          in: query
          description: Sort order (optional)
          schema:
            type: string
            default: desc
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 0
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      knowledges:
                        type: array
                        items:
                          $ref: "#/components/schemas/Knowledge"
                      page:
                        $ref: "#/components/schemas/Page"
  /knowledges/{knowledgeId}:
    patch:
      summary: Update Knowledge Item
      tags: [ ]
      operationId: updateKnowledge
      parameters:
        - name: knowledgeId
          in: path
          description: Knowledge Item ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                type:
                  $ref: "#/components/schemas/KnowledgeType"
                content:
                  type: string
                teamId:
                  type: integer
                  format: int64
                  description: "知识条目所属的团队ID"
                projectId:
                  type: integer
                  format: int64
                  description: "相关的项目ID"
                labels:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 0
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    required:
                      - knowledge
                    properties:
                      knowledge:
                        $ref: "#/components/schemas/Knowledge"
    delete:
      summary: Delete Knowledge Item
      tags: [ ]
      operationId: knowledgeDelete
      parameters:
        - name: knowledgeId
          in: path
          description: Knowledge Item ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: integer
                    default: 200
                  message:
                    type: string
    get:
      summary: Get Single Knowledge Item
      tags: [ ]
      operationId: KnowledgeGetById
      parameters:
        - name: knowledgeId
          in: path
          description: Knowledge item ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful retrieval of a knowledge item
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 0
                  message:
                    type: string
                    default: "success"
                  data:
                    $ref: "#/components/schemas/Knowledge"
        "404":
          description: Knowledge item not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: "Knowledge item not found"
  /knowledges/{knowledgeId}/upvote:
    post:
      summary: Upvote Knowledge Item
      tags: [ ]
      operationId: upvoteKnowledge
      parameters:
        - name: knowledgeId
          in: path
          description: Knowledge Item ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 0
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    required:
                      - knowledge
                    properties:
                      knowledge:
                        $ref: "#/components/schemas/Knowledge"
    delete:
      summary: Remove Upvote from Knowledge Item
      tags: [ ]
      operationId: removeUpvoteKnowledge
      parameters:
        - name: knowledgeId
          in: path
          description: Knowledge Item ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 0
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    required:
                      - knowledge
                    properties:
                      knowledge:
                        $ref: "#/components/schemas/Knowledge"
components:
  schemas:
    KnowledgeType:
      type: string
      enum: [ MATERIAL, LINK, TEXT, CODE ]
    Space:
      title: Space
      type: object
      required:
        - id
        - intro
        - description
        - name
        - avatarId
        - admins
        - updatedAt
        - createdAt
        - enableRank
        - announcements
        - taskTemplates
        - classificationTopics
      properties:
        id:
          type: integer
          format: int64
        intro:
          type: string
        description:
          type: string
        name:
          type: string
        avatarId:
          type: integer
          format: int64
        admins:
          type: array
          items:
            $ref: "#/components/schemas/SpaceAdmin"
        updatedAt:
          type: integer
          format: int64
        createdAt:
          type: integer
          format: int64
        enableRank:
          type: boolean
        announcements:
          type: string
        taskTemplates:
          type: string
        myRank:
          type: integer
          description: "Only has value when: 'queryJoinablity' == true && 'enableRank' == true"
        classificationTopics:
          type: array
          items:
            $ref: "#/components/schemas/Topic"
    SpaceAdmin:
      title: SpaceAdmin
      type: object
      required:
        - role
        - user
        - updatedAt
        - createdAt
      properties:
        role:
          $ref: "#/components/schemas/SpaceAdminRoleType"
        user:
          $ref: "#/components/schemas/User"
        updatedAt:
          type: integer
          format: int64
        createdAt:
          type: integer
          format: int64
    SpaceAdminRoleType:
      title: SpaceAdminRoleType
      enum:
        - OWNER
        - ADMIN
    Task:
      title: Task
      type: object
      required:
        - id
        - name
        - submitterType
        - defaultDeadline
        - creator
        - resubmittable
        - editable
        - intro
        - description
        - submissionSchema
        - submitters
        - updatedAt
        - createdAt
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        submitterType:
          $ref: "#/components/schemas/TaskSubmitterType"
        defaultDeadline:
          type: integer
          format: int64
        creator:
          $ref: "#/components/schemas/User"
        deadline:
          type: integer
          format: int64
        participantLimit:
          type: integer
        resubmittable:
          type: boolean
        editable:
          type: boolean
        intro:
          type: string
        description:
          type: string
        space:
          $ref: "#/components/schemas/Space"
        team:
          $ref: "#/components/schemas/Team"
        submissionSchema:
          type: array
          items:
            $ref: "#/components/schemas/TaskSubmissionSchemaEntry"
        submitters:
          type: object
          required:
            - total
            - examples
          properties:
            total:
              type: integer
            examples:
              type: array
              items:
                type: object
                required:
                  - avatarId
                properties:
                  avatarId:
                    type: integer
                    format: int64
        updatedAt:
          type: integer
          format: int64
        createdAt:
          type: integer
          format: int64
        joinable:
          type: boolean
          description: "Only has value when: 'queryJoinablity' == true"
        joinableAsTeam:
          type: array
          items:
            $ref: "#/components/schemas/TeamSummary"
        submittable:
          type: boolean
          description: "Only has value when: 'querySubmitability' == true"
        submittableAsTeam:
          type: array
          items:
            $ref: "#/components/schemas/TeamSummary"
        rank:
          type: integer
        approved:
          $ref: "#/components/schemas/ApproveType"
        rejectReason:
          type: string
        joined:
          type: boolean
        joinedAsTeam:
          type: array
          items:
            $ref: "#/components/schemas/TeamSummary"
        joinedApproved:
          type: boolean
        joinedApprovedAsTeam:
          type: array
          items:
            $ref: "#/components/schemas/TeamSummary"
        joinedDisapproved:
          type: boolean
        joinedDisapprovedAsTeam:
          type: array
          items:
            $ref: "#/components/schemas/TeamSummary"
        joinedNotApprovedOrDisapproved:
          type: boolean
        joinedNotApprovedOrDisapprovedAsTeam:
          type: array
          items:
            $ref: "#/components/schemas/TeamSummary"
        topics:
          type: array
          items:
            $ref: "#/components/schemas/Topic"
    TaskSubmitterType:
      title: TaskSubmitterType
      enum:
        - USER
        - TEAM
    TaskSubmissionSchemaEntry:
      title: TaskSubmissionSchemaEntry
      type: object
      required:
        - prompt
        - type
      properties:
        prompt:
          type: string
        type:
          $ref: "#/components/schemas/TaskSubmissionType"
    TaskSubmissionType:
      title: TaskSubmissionType
      enum:
        - TEXT
        - FILE
    TaskSubmissionReview:
      title: TaskSubmissionReview
      type: object
      required:
        - reviewed
      properties:
        reviewed:
          type: boolean
        detail:
          type: object
          description: Has value only when 'reviewed' is true
          required:
            - accepted
            - score
            - comment
          properties:
            accepted:
              type: boolean
            score:
              type: integer
            comment:
              type: string
    TaskSubmission:
      title: TaskSubmission
      type: object
      required:
        - id
        - member
        - submitter
        - version
        - createdAt
        - updatedAt
        - content
      properties:
        id:
          type: integer
          format: int64
        member:
          $ref: "#/components/schemas/TaskParticipantSummary"
        submitter:
          $ref: "#/components/schemas/User"
        version:
          type: integer
        createdAt:
          type: integer
          format: int64
        updatedAt:
          type: integer
          format: int64
        content:
          type: array
          items:
            $ref: "#/components/schemas/TaskSubmissionContentEntry"
        review:
          $ref: "#/components/schemas/TaskSubmissionReview"
    TaskSubmissionContentEntry:
      title: TaskSubmissionContentEntry
      type: object
      required:
        - title
        - type
      properties:
        title:
          type: string
        type:
          $ref: "#/components/schemas/TaskSubmissionType"
        contentText:
          type: string
        contentAttachment:
          $ref: "#/components/schemas/Attachment"
    Team:
      title: Team
      type: object
      x-internal: false
      required:
        - id
        - intro
        - description
        - name
        - avatarId
        - owner
        - admins
        - members
        - updatedAt
        - createdAt
        - joined
      properties:
        id:
          type: integer
          format: int64
        intro:
          type: string
        description:
          type: string
        name:
          type: string
        avatarId:
          type: integer
          format: int64
        owner:
          $ref: "#/components/schemas/User"
        admins:
          type: object
          description: include owner
          required:
            - total
            - examples
          properties:
            total:
              type: integer
            examples:
              type: array
              items:
                $ref: "#/components/schemas/User"
        updatedAt:
          type: integer
          format: int64
        createdAt:
          type: integer
          format: int64
        members:
          type: object
          required:
            - total
            - examples
          properties:
            total:
              type: integer
            examples:
              type: array
              items:
                $ref: "#/components/schemas/User"
        joined:
          type: boolean
        role:
          $ref: "#/components/schemas/TeamMemberRoleType"
    TeamSummary:
      title: TeamSummary
      type: object
      required:
        - id
        - name
        - intro
        - avatarId
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        intro:
          type: string
        avatarId:
          type: integer
          format: int64
        updatedAt:
          type: integer
          format: int64
        createdAt:
          type: integer
          format: int64
    TaskMembership:
      title: TaskMembership
      type: object
      required:
        - id
        - member
        - createdAt
        - updatedAt
        - approved
      properties:
        id:
          type: integer
          format: int64
        member:
          $ref: "#/components/schemas/TaskParticipantSummary"
        createdAt:
          type: integer
          format: int64
        updatedAt:
          type: integer
          format: int64
        deadline:
          type: integer
          format: int64
        approved:
          $ref: "#/components/schemas/ApproveType"
        realNameInfo:
          $ref: "#/components/schemas/TaskParticipantRealNameInfo"
    TaskParticipantRealNameInfo:
      title: TaskParticipantRealNameInfo
      type: object
      required:
        - realName
        - studentId
        - grade
        - major
        - className
        - email
        - phone
        - applyReason
        - personalAdvantage
        - remark
      properties:
        realName:
          type: string
        studentId:
          type: string
        grade:
          type: string
        major:
          type: string
        className:
          type: string
        email:
          type: string
        phone:
          type: string
        applyReason:
          type: string
        personalAdvantage:
          type: string
        remark:
          type: string
    TaskParticipantSummary:
      title: TaskParticipantSummary
      type: object
      required:
        - id
        - intro
        - name
        - avatarId
      properties:
        id:
          type: integer
          format: int64
        intro:
          type: string
        name:
          type: string
        avatarId:
          type: integer
          format: int64
    TeamMember:
      properties:
        role:
          $ref: "#/components/schemas/TeamMemberRoleType"
        user:
          $ref: "#/components/schemas/User"
        updatedAt:
          type: integer
          format: int64
        createdAt:
          type: integer
          format: int64
      required:
        - role
        - user
        - updatedAt
        - createdAt
      title: TeamMember
      type: object
    ApproveType:
      description: approve status of task or taskmembership
      enum:
        - APPROVED
        - DISAPPROVED
        - NONE
    AIConversation:
      type: object
      description: AI对话
      properties:
        id:
          type: integer
          format: int64
        conversationId:
          type: string
          description: 对话ID
        title:
          type: string
          description: 对话标题
        moduleType:
          type: string
          description: 模块类型
        contextId:
          type: integer
          format: int64
          description: 上下文ID
        ownerId:
          type: integer
          format: int64
          description: 所有者ID
        messageCount:
          type: integer
          description: 消息数量
        createdAt:
          type: string
          format: date-time
          description: 创建时间
        updatedAt:
          type: string
          format: date-time
          description: 更新时间
      required:
        - id
        - conversationId
        - title
        - moduleType
        - contextId
        - ownerId
        - messageCount
        - createdAt
        - updatedAt
    AIMessage:
      type: object
      description: AI消息
      properties:
        id:
          type: integer
          format: int64
          description: 消息ID
        conversationId:
          type: string
          description: 对话ID
        role:
          type: string
          description: 角色
        modelType:
          type: string
          description: 模型类型
        content:
          type: string
          description: 消息内容
        parentId:
          type: integer
          format: int64
          description: 父消息ID
        reasoningContent:
          type: string
          description: 推理内容
        reasoningTimeMs:
          type: integer
          format: int64
          description: 推理时间（毫秒）
        metadata:
          $ref: "#/components/schemas/AIMessageMetadata"
        createdAt:
          type: string
          format: date-time
          description: 创建时间
        tokensUsed:
          type: integer
          description: 消耗的token数量
          example: 100
        seuConsumed:
          type: number
          format: double
          description: 消耗的SEU数量
          example: 0.10
      required:
        - id
        - conversationId
        - role
        - modelType
        - content
        - createdAt
        - tokensUsed
        - seuConsumed
    AIMessageMetadata:
      type: object
      description: AI消息元数据
      properties:
        followupQuestions:
          type: array
          items:
            type: string
        references:
          type: array
          items:
            $ref: "#/components/schemas/ConversationReference"
    TaskAIAdvice:
      type: object
      properties:
        topic_summary:
          type: object
          properties:
            title:
              type: string
            key_points:
              type: array
              items:
                type: string
        knowledge_fields:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              followup_questions:
                type: array
                items:
                  type: string
            required:
              - name
              - description
              - followup_questions
        learning_paths:
          type: array
          items:
            type: object
            properties:
              stage:
                type: string
              description:
                type: string
              resources:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    type:
                      type: string
                    url:
                      type: string
                  required:
                    - name
                    - type
              followup_questions:
                type: array
                items:
                  type: string
            required:
              - name
              - description
              - followup_questions
        methodology:
          type: array
          items:
            type: object
            properties:
              step:
                type: string
              description:
                type: string
              estimated_time:
                type: string
              followup_questions:
                type: array
                items:
                  type: string
            required:
              - step
              - description
              - followup_questions
        team_tips:
          type: array
          items:
            type: object
            properties:
              role:
                type: string
              description:
                type: string
              collaboration_tips:
                type: string
              followup_questions:
                type: array
                items:
                  type: string
            required:
              - role
              - description
              - collaboration_tips
              - followup_questions
    TaskAIAdviceConversationContext:
      type: object
      properties:
        section:
          type: string
          enum: [ knowledge_fields, learning_paths, methodology, team_tips ]
        index:
          type: integer
          description: "章节中的具体条目索引(从0开始)"
    CreateTaskAIAdviceConversationRequest:
      type: object
      properties:
        question:
          type: string
          description: 用户问题
        context:
          $ref: "#/components/schemas/TaskAIAdviceConversationContext"
        modelType:
          type: string
          description: 可选的模型类型（例如：standard、reasoning）
          default: standard
        conversationId:
          type: string
          description: 可选的会话ID（用于继续对话）
        parentId:
          type: integer
          format: int64
          description: 可选的父消息ID（用于继续特定消息的对话）
      required:
        - question
    TaskAIAdviceConversationResponse:
      type: object
      properties:
        conversation:
          $ref: "#/components/schemas/TaskAIAdviceConversation"
        quota:
          $ref: "#/components/schemas/QuotaInfo"
      required:
        - conversation
        - quota
    ConversationGroupSummary:
      type: object
      properties:
        conversationId:
          type: string
          description: 会话组ID
        title:
          type: string
          description: 会话组标题
          example: 机器学习模型选择
        createdAt:
          type: string
          format: date-time
          description: 会话创建时间
        updatedAt:
          type: string
          format: date-time
          description: 会话最后更新时间
        messageCount:
          type: integer
          description: 会话中的消息数量
        latestMessage:
          $ref: "#/components/schemas/TaskAIAdviceConversation"
      required:
        - conversationId
        - createdAt
        - updatedAt
        - messageCount
    ConversationReference:
      type: object
      properties:
        url:
          type: string
        logo_url:
          type: string
        title:
          type: string
        summary:
          type: string
        publish_time:
          type: string
        extra:
          $ref: "#/components/schemas/ConversationReferenceExtra"
      required:
        - url
        - logo_url
        - title
        - summary
        - publish_time
        - extra
    ConversationReferenceExtra:
      type: object
      properties:
        rel_info:
          type: string
        freshness_info:
          type: string
        auth_info:
          type: string
        final_ref:
          type: string
      required:
        - rel_info
        - freshness_info
        - auth_info
        - final_ref
    TaskAIAdviceGenerationStatus:
      type: string
      enum: [ NONE, PENDING, PROCESSING, COMPLETED, FAILED ]
    TaskAIAdviceConversation:
      type: object
      required:
        - id
        - question
        - response
        - modelType
        - followupQuestions
        - createdAt
        - tokensUsed
        - seuConsumed
      properties:
        id:
          type: integer
          format: int64
          description: 对话ID
        question:
          type: string
          description: 用户问题
        response:
          type: string
          description: 回答内容
        modelType:
          type: string
          description: 模型类型
        reasoningContent:
          type: string
          description: 推理内容
        reasoningTimeMs:
          type: integer
          format: int64
          description: 推理所用时间（毫秒）
          example: 1000
        followupQuestions:
          type: array
          description: 后续问题
          items:
            type: string
        references:
          type: array
          description: 参考文献
          items:
            $ref: "#/components/schemas/ConversationReference"
        conversationId:
          type: string
          description: 会话ID
        parentId:
          type: integer
          format: int64
          description: 父消息ID
        createdAt:
          type: string
          format: date-time
          description: 会话创建时间
        tokensUsed:
          type: integer
          description: 消耗的token数量
          example: 100
        seuConsumed:
          type: number
          format: double
          description: 消耗的SEU数量
          example: 0.10
    TeamMemberRoleType:
      description: 小组角色
      enum:
        - OWNER
        - ADMIN
        - MEMBER
      type: string
    User:
      type: object
      required:
        - avatarId
        - id
        - intro
        - nickname
        - username
      properties:
        avatarId:
          description: 头像 id
          type: integer
          format: int64
        id:
          description: 用户 ID
          format: int64
          minimum: 1
          type: integer
        intro:
          default: This user has not set an introduction yet.
          description: 个人简介
          type: string
        nickname:
          description: 昵称
          example: 芝士
          type: string
        username:
          description: 用户名
          example: cheese
          type: string
    Page:
      type: object
      description: 分页信息
      required:
        - page_start
        - page_size
        - has_prev
        - has_more
      properties:
        page_start:
          type: integer
          format: int64
          description: 该页第一个 item 的 ID
        page_size:
          type: integer
          description: 每页 item 数量
        has_prev:
          type: boolean
          description: 是否有上一页
        prev_start:
          type: integer
          format: int64
          description: 上一页第一个 item 的 ID
        has_more:
          type: boolean
          description: 是否有下一页
        next_start:
          type: integer
          format: int64
          description: 下一页第一个 item 的 ID
        total:
          type: integer
          description: 总 item 数量
    Attachment:
      type: object
      description: 附件
      properties:
        id:
          type: integer
          description: 附件 ID
          format: int64
        type:
          type: string
          description: 类型
          enum:
            - image
            - video
            - audio
            - file
        url:
          type: string
          description: 访问 URL
        meta:
          oneOf:
            - $ref: "#/components/schemas/ImageMeta"
            - $ref: "#/components/schemas/VideoMeta"
            - $ref: "#/components/schemas/AudioMeta"
            - $ref: "#/components/schemas/FileMeta"
    ImageMeta:
      allOf:
        - $ref: "#/components/schemas/FileMeta"
        - type: object
          description: 图片元数据
          properties:
            height:
              type: integer
              description: 高度
            width:
              type: integer
              description: 宽度
            thumbnail:
              type: string
              description: 缩略图 URL
    VideoMeta:
      allOf:
        - $ref: "#/components/schemas/FileMeta"
        - type: object
          description: 视频元数据
          properties:
            duration:
              type: integer
              description: 时长
            height:
              type: integer
              description: 高度
            width:
              type: integer
              description: 宽度
            thumbnail:
              type: string
              description: 缩略图 URL
    AudioMeta:
      allOf:
        - $ref: "#/components/schemas/FileMeta"
        - type: object
          description: 音频元数据
          properties:
            duration:
              type: integer
              description: 时长
              format: int64
    FileMeta:
      type: object
      description: 文件元数据
      properties:
        size:
          type: integer
          description: 文件大小
          format: int64
        name:
          type: string
          description: 文件名称
        mime:
          type: string
          description: MIME 类型
        hash:
          type: string
          description: 文件哈希
    Topic:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      required:
        - id
        - name
    Notification:
      type: object
      required:
        - id
        - type
        - receiverId
        - content
        - read
        - createdAt
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
          enum:
            - MENTION
            - REPLY
            - REACTION
            - PROJECT_INVITE
            - DEADLINE_REMIND
        receiverId:
          type: integer
          format: int64
          description: "The ID of the user who will receive the notification. This will be mapped to a User entity in the backend."
        content:
          type: object
          properties:
            text:
              type: string
            projectId:
              type: integer
              format: int64
              nullable: true
            discussionId:
              type: integer
              format: int64
              nullable: true
            knowledgeId:
              type: integer
              format: int64
              nullable: true
        read:
          type: boolean
          default: false
        createdAt:
          type: integer
          format: int64
    #    ProjectContent:
    #      type: object
    #      description: 项目富文本内容
    #      properties:
    #        raw:
    #          type: string
    #          description: 原始markdown内容
    #        html:
    #          type: string
    #          description: 渲染后的HTML
    #        attachments:
    #          type: array
    #          items:
    #            $ref: '#/components/schemas/Attachment'
    Project:
      type: object
      required:
        - id
        - name
        - description
        - startDate
        - endDate
        - team
        - leader
        - members
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        colorCode:
          type: string
          pattern: "^#[0-9A-Fa-f]{6}$"
        startDate:
          type: integer
          format: int64
          description: 项目开始时间戳(毫秒)
        endDate:
          type: integer
          format: int64
          description: 项目结束时间戳(毫秒)
        parentId:
          type: integer
          format: int64
          description: 父项目ID
        team:
          $ref: "#/components/schemas/Team"
        leader:
          $ref: "#/components/schemas/User"
        externalTaskId:
          type: integer
          format: int64
        githubRepo:
          type: string
        content:
          type: string
        createdAt:
          type: integer
          format: int64
        updatedAt:
          type: integer
          format: int64
        members:
          type: object
          properties:
            count:
              type: integer
            examples:
              type: array
              items:
                $ref: "#/components/schemas/ProjectMembership"
        archived:
          type: boolean
        children:
          type: array
          items:
            $ref: "#/components/schemas/Project"
    ProjectMemberRole:
      type: string
      description: 项目成员角色
      enum:
        - LEADER
        - MEMBER
        - EXTERNAL
    ProjectMembership:
      type: object
      required:
        - id
        - user
        - role
        - createdAt
        - updatedAt
      properties:
        user:
          $ref: "#/components/schemas/User"
        role:
          $ref: "#/components/schemas/ProjectMemberRole"
        notes:
          type: string
          description: 项目成员备注
          default: ""
        createdAt:
          type: integer
          format: int64
        updatedAt:
          type: integer
          format: int64
    DiscussableModelType:
      type: string
      description: 可被讨论的模型类型
      enum: [ PROJECT ]
    Discussion:
      type: object
      required:
        - id
        - content
        - senderId
        - modelType
        - modelId
      properties:
        id:
          type: integer
          format: int64
        modelType:
          $ref: "#/components/schemas/DiscussableModelType"
        modelId:
          type: integer
          format: int64
          description: 模型ID
        content:
          type: string
        parentId:
          type: integer
          format: int64
          description: 回复的讨论ID
        sender:
          $ref: "#/components/schemas/User"
        mentionedUsers:
          type: array
          items:
            $ref: "#/components/schemas/User"
        reactions:
          type: array
          items:
            $ref: "#/components/schemas/DiscussionReactionSummary"
        subDiscussions:
          type: object
          properties:
            count:
              type: integer
              format: int64
            examples:
              type: array
              items:
                $ref: "#/components/schemas/Discussion"
        createdAt:
          type: integer
          format: int64
    Material:
      type: object
      description: 用户上传的资料（图片、视频、音频、文件等）
      properties:
        id:
          type: integer
          description: 资料 ID
          format: int64
        type:
          type: string
          description: 资料类型
          enum:
            - image
            - video
            - audio
            - file
        uploader:
          $ref: "#/components/schemas/User"
        created_at:
          type: integer
          description: 创建时间
          format: int64
        expires:
          type: integer
          description: 过期时间，永不过期则为 undefined
          format: int64
          nullable: true
        download_count:
          type: integer
          description: 下载数
          format: int64
        url:
          type: string
          description: 资料下载 URL
        meta:
          oneOf:
            - $ref: "#/components/schemas/ImageMeta"
            - $ref: "#/components/schemas/VideoMeta"
            - $ref: "#/components/schemas/AudioMeta"
            - $ref: "#/components/schemas/FileMeta"
    Knowledge:
      type: object
      required:
        - id
        - name
        - type
        - content
        - createdById
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        type:
          $ref: "#/components/schemas/KnowledgeType"
        content:
          type: string
        material:
          $ref: "#/components/schemas/Material"
        teamId:
          type: integer
          format: int64
          description: "知识条目所属的团队ID"
        projectId:
          type: integer
          format: int64
          description: "相关的项目ID（可选）"
        sourceType:
          type: string
          description: "知识来源类型：MANUAL或FROM_DISCUSSION"
        discussionId:
          type: integer
          format: int64
          description: "来源讨论ID（如果从讨论中添加）"
        labels:
          type: array
          items:
            type: string
        creator:
          $ref: "#/components/schemas/User"
        createdAt:
          type: integer
          format: int64
        updatedAt:
          type: integer
          format: int64
    QuotaInfo:
      type: object
      description: "用户AI配额信息"
      required:
        - remaining
        - total
        - reset_time
      properties:
        remaining:
          type: number
          format: double
          description: "剩余可用SEU"
        total:
          type: number
          format: double
          description: "总可用SEU"
        reset_time:
          type: string
          format: date-time
          description: "配额重置时间"
    CommonResponse:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    ReactionType:
      type: object
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
        name:
          type: string
        description:
          type: string
          nullable: true
        displayOrder:
          type: integer
          format: int32
        isActive:
          type: boolean
      required:
        - id
        - code
        - name
        - displayOrder
        - isActive
    DiscussionReactionSummary:
      type: object
      properties:
        reactionType:
          $ref: "#/components/schemas/ReactionType"
        count:
          type: integer
          format: int64
        hasReacted:
          type: boolean
      required:
        - reactionType
        - count
        - hasReacted
    PatchTaskMembershipRequest:
      type: object
      properties:
        deadline:
          type: integer
          format: int64
        approved:
          $ref: "#/components/schemas/ApproveType"
        rejectReason:
          type: string
        email:
          type: string
        phone:
          type: string
        applyReason:
          type: string
        personalAdvantage:
          type: string
        remark:
          type: string
  securitySchemes:
    bearerAuth:
      description: The access token is used in this way.
      in: header
      name: Authorization
      type: apiKey
security:
  - bearerAuth: [ ]
x-components:
  parameters: { }
