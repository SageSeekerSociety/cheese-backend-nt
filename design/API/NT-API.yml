openapi: 3.0.0
info:
  title: Cheese Community API
  version: "1.0"
servers:
  - url: "http://localhost:8080"
tags:
  - name: Users
    description: Operations related to user profiles, settings, etc.
  - name: Teams
    description: Core operations for managing teams, team memberships, join requests, invitations, and recruitment openings. (涵盖了原先分散的团队相关功能)
  - name: Spaces
    description: Operations for managing spaces, space settings, and space administrators.
  - name: Tasks
    description: Operations related to tasks, including creation, management, participation, submissions, etc.
  - name: AI
    description: General AI-related operations, such as quota management.
  - name: Notifications
    description: Managing and retrieving user notifications.
  - name: Projects
    description: Operations for managing projects and project memberships.
  - name: Discussions
    description: Creating, retrieving, and managing discussions and their reactions on various models (like Projects).
  - name: Knowledge
    description: Operations for creating, managing, and interacting with knowledge items.
paths:
  /users/me/team-requests:
    get:
      x-handler-args:
        - arg: "userInfo: org.rucca.cheese.auth.model.AuthUserInfo?"
      summary: List my join requests
      description: Retrieves a list of join requests initiated by the authenticated user.
      operationId: listMyJoinRequests
      tags: [ Teams ]
      parameters:
        - name: status
          in: query
          required: false
          description: Filter requests by status.
          schema:
            $ref: '#/components/schemas/ApplicationStatus'
        - $ref: '#/components/parameters/PageStart'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: A list of the user's join requests.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    properties:
                      requests:
                        type: array
                        items:
                          $ref: '#/components/schemas/TeamMembershipApplication'
                      page:
                        $ref: '#/components/schemas/Page'
                    required:
                      - requests
                  message:
                    type: string
  /users/me/team-requests/{requestId}:
    delete:
      x-handler-args:
        - arg: "userInfo: org.rucca.cheese.auth.model.AuthUserInfo?"
      summary: Cancel my pending join request
      description: Allows the authenticated user to cancel a join request they initiated, provided it's still pending.
      operationId: cancelMyJoinRequest
      tags: [ Teams ]
      parameters:
        - $ref: '#/components/parameters/RequestId'
      responses:
        '204':
          description: Request cancelled successfully.
  /users/me/team-invitations:
    get:
      x-handler-args:
        - arg: "userInfo: org.rucca.cheese.auth.model.AuthUserInfo?"
      summary: List invitations received
      description: Retrieves a list of invitations received by the authenticated user.
      operationId: listMyInvitations
      tags: [ Teams ]
      parameters:
        - name: status
          in: query
          required: false
          description: Filter invitations by status (e.g., PENDING).
          schema:
            $ref: '#/components/schemas/ApplicationStatus'
        - $ref: '#/components/parameters/PageStart'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: A list of invitations received by the user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    properties:
                      invitations:
                        type: array
                        items:
                          $ref: '#/components/schemas/TeamMembershipApplication'
                      page:
                        $ref: '#/components/schemas/Page'
                    required:
                      - invitations
                      - page
                  message:
                    type: string
  /users/me/team-invitations/{invitationId}/accept:
    post:
      x-handler-args:
        - arg: "userInfo: org.rucca.cheese.auth.model.AuthUserInfo?"
      summary: Accept a team invitation
      description: Allows the authenticated user to accept a pending team invitation. Creates the team membership upon success.
      operationId: acceptTeamInvitation
      tags: [ Teams ]
      parameters:
        - $ref: '#/components/parameters/InvitationId'
      responses:
        '204':
          description: Invitation accepted successfully and membership created.
  /users/me/team-invitations/{invitationId}/decline:
    post:
      x-handler-args:
        - arg: "userInfo: org.rucca.cheese.auth.model.AuthUserInfo?"
      summary: Decline a team invitation
      description: Allows the authenticated user to decline a pending team invitation.
      operationId: declineTeamInvitation
      tags: [ Teams ]
      parameters:
        - $ref: '#/components/parameters/InvitationId'
      responses:
        '204':
          description: Invitation declined successfully.
  /users/me/teams/{teamId}:
    parameters:
      - $ref: '#/components/parameters/TeamId'
    delete:
      summary: Leave a team
      description: Allows the authenticated user (who is a member) to leave the specified team. Team owners typically cannot leave directly; they might need to transfer ownership or disband the team first.
      operationId: leaveTeam
      tags: [ Teams ]
      x-handler-args:
        - arg: "userInfo: org.rucca.cheese.auth.model.AuthUserInfo?"
      responses:
        '204':
          description: Successfully left the team.
        '403':
          description: Forbidden. The user might not be a member of the team, or is the owner and cannot leave directly.
        '404':
          description: Team not found. The specified teamId does not exist.
  /users/{userId}/identity:
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      tags: [ Users ]
      operationId: get-user-identity
      summary: Get User Real Name Identity Info
      x-handler-args:
        - arg: "userInfo: org.rucca.cheese.auth.model.AuthUserInfo?"
      parameters:
        - description: Whether to return the precise identity info
          in: query
          name: precise
          schema:
            type: boolean
            default: false
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      hasIdentity:
                        type: boolean
                      identity:
                        $ref: "#/components/schemas/UserIdentity"
                    required:
                      - hasIdentity
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
    put:
      tags: [ Users ]
      operationId: put-user-identity
      summary: Update User Real Name Identity Info
      x-handler-args:
        - arg: "userInfo: org.rucca.cheese.auth.model.AuthUserInfo?"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                realName:
                  type: string
                studentId:
                  type: string
                grade:
                  type: string
                major:
                  type: string
                className:
                  type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      identity:
                        $ref: "#/components/schemas/UserIdentity"
                    required:
                      - identity
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
    patch:
      tags: [ Users ]
      operationId: patch-user-identity
      summary: Update User Real Name Identity Info
      x-handler-args:
        - arg: "userInfo: org.rucca.cheese.auth.model.AuthUserInfo?"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                realName:
                  type: string
                studentId:
                  type: string
                grade:
                  type: string
                major:
                  type: string
                className:
                  type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      identity:
                        $ref: "#/components/schemas/UserIdentity"
                    required:
                      - identity
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
  /users/{userId}/identity/access-logs:
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      tags: [ Users ]
      operationId: get-user-identity-access-logs
      summary: Get User Real Name Identity Access Logs
      x-handler-args:
        - arg: "userInfo: org.rucca.cheese.auth.model.AuthUserInfo?"
      parameters:
        - $ref: "#/components/parameters/PageStart"
        - $ref: "#/components/parameters/PageSize"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    properties:
                      logs:
                        type: array
                        items:
                          $ref: "#/components/schemas/UserIdentityAccessLog"
                      page:
                        $ref: "#/components/schemas/Page"
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
  /spaces/{spaceId}:
    parameters:
      - $ref: '#/components/parameters/SpaceId'
    delete:
      summary: Delete Space
      operationId: delete-space
      tags: [ Spaces ]
      responses:
        "204":
          description: Deleted successfully.
    get:
      summary: Query Space
      operationId: get-space
      tags: [ Spaces ]
      parameters:
        - description: Query your rank in this space
          in: query
          name: queryMyRank
          schema:
            type: boolean
            default: false
        - name: queryCategories
          in: query
          required: false
          description: Set to true to include categories in the response.
          schema:
            type: boolean
            default: false
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      space:
                        $ref: "#/components/schemas/Space"
                      categories:
                        type: array
                        items:
                          $ref: "#/components/schemas/SpaceCategory"
                    required:
                      - space
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
    patch:
      summary: Update Space
      operationId: patch-space
      tags: [ Spaces ]
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      space:
                        $ref: "#/components/schemas/Space"
                    required:
                      - space
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                intro:
                  type: string
                description:
                  type: string
                name:
                  type: string
                avatarId:
                  type: integer
                  format: int64
                enableRank:
                  type: boolean
                announcements:
                  type: string
                taskTemplates:
                  type: string
                classificationTopics:
                  type: array
                  items:
                    type: integer
                    format: int64
                defaultCategoryId:
                  type: integer
                  format: int64
                  description: ID of the default category for tasks in this space.
                  example: 1
  /spaces/{spaceId}/categories:
    parameters:
      - $ref: '#/components/parameters/SpaceId'
    get:
      tags: [ Spaces ]
      summary: List categories in a space
      description: Retrieves a list of all categories belonging to the specified space, ordered by displayOrder and name.
      operationId: listSpaceCategories
      responses:
        '200':
          description: A list of categories.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    properties:
                      categories:
                        type: array
                        items:
                          $ref: '#/components/schemas/SpaceCategory'
                    required:
                      - categories
                  message:
                    type: string
      parameters:
        - name: includeArchived
          in: query
          required: false
          description: Set to true to include archived categories in the results. Defaults to false.
          schema:
            type: boolean
            default: false
    post:
      summary: Create a category in a space
      description: Creates a new category within the specified space. Requires admin privileges for the space.
      operationId: createSpaceCategory
      tags: [ Spaces ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name for the new category. Must be unique within the space.
                  minLength: 1
                  example: "Urgent"
                description:
                  type: string
                  nullable: true
                  description: Optional description for the category.
                  example: "High priority tasks."
                displayOrder:
                  type: integer
                  description: Optional display order. Defaults to 0 if not provided.
                  example: 5
              required:
                - name
      responses:
        '201':
          description: Category created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      category:
                        $ref: '#/components/schemas/SpaceCategory'
                    required:
                      - category
                  message:
                    type: string
  /spaces/{spaceId}/categories/{categoryId}:
    parameters:
      - $ref: '#/components/parameters/SpaceId'
      - name: categoryId
        in: path
        required: true
        description: ID of the category to retrieve, update, or delete.
        schema:
          type: integer
          format: int64
    get:
      summary: Get a specific category
      description: Retrieves details of a specific category within a space.
      operationId: getSpaceCategory
      tags: [ Spaces ]
      responses:
        '200':
          description: Category details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      category:
                        $ref: '#/components/schemas/SpaceCategory'
                    required:
                      - category
                  message:
                    type: string
    patch:
      summary: Update a category
      description: Updates specific fields of a category. Requires admin privileges for the space.
      operationId: updateSpaceCategory
      tags: [ Spaces ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: New name for the category. Must be unique within the space if changed.
                  minLength: 1
                  example: "High Priority"
                description:
                  type: string
                  nullable: true
                  description: New description for the category. Set to null to clear.
                  example: "Tasks requiring immediate attention."
                displayOrder:
                  type: integer
                  description: New display order for the category.
                  example: 2
      responses:
        '200':
          description: Category updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      category:
                        $ref: '#/components/schemas/SpaceCategory'
                    required:
                      - category
                  message:
                    type: string
    delete:
      summary: Delete a category
      description: Soft-deletes a category ONLY if it contains no tasks. For categories with tasks, use the archive endpoint. Cannot delete the default category.
      operationId: deleteSpaceCategory
      tags: [ Spaces ]
      responses:
        '204':
          description: Category deleted successfully.
  /spaces/{spaceId}/categories/{categoryId}/archive:
    parameters:
      - $ref: '#/components/parameters/SpaceId'
      - name: categoryId
        in: path
        required: true
        schema:
          type: integer
          format: int64
    post:
      summary: Archive a category
      description: Marks a category as archived. Tasks within it remain associated. Cannot archive the default category.
      operationId: archiveSpaceCategory
      tags: [ Spaces ]
      responses:
        '200':
          description: Category archived successfully. Returns updated category details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      category:
                        $ref: '#/components/schemas/SpaceCategory'
                    required:
                      - category
                  message:
                    type: string
    delete:
      summary: Unarchive a category
      description: Removes the archived status from a category, making it active again.
      operationId: unarchiveSpaceCategory
      tags: [ Spaces ]
      responses:
        '200':
          description: Category unarchived successfully. Returns updated category details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      category:
                        $ref: '#/components/schemas/SpaceCategory'
                    required:
                      - category
                  message:
                    type: string
  /spaces:
    get:
      summary: Enumerate Spaces
      operationId: get-spaces
      tags: [ Spaces ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    properties:
                      spaces:
                        type: array
                        items:
                          $ref: "#/components/schemas/Space"
                      page:
                        $ref: "#/components/schemas/Page"
                  message:
                    type: string
      parameters:
        - description: Query your rank in this space
          in: query
          name: queryMyRank
          schema:
            type: boolean
            default: false
        - $ref: '#/components/parameters/PageStart'
        - $ref: '#/components/parameters/PageSize'
        - schema:
            type: string
            default: createdAt
          in: query
          name: sort_by
          description: '"createdAt" or "updatedAt"'
        - schema:
            type: string
            default: desc
          in: query
          name: sort_order
          description: '"asc" or "desc"'
    post:
      summary: Create Space
      operationId: post-space
      tags: [ Spaces ]
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      space:
                        $ref: "#/components/schemas/Space"
                    required:
                      - space
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - intro
                - description
                - name
                - avatarId
                - announcements
                - taskTemplates
              properties:
                intro:
                  type: string
                description:
                  type: string
                name:
                  type: string
                avatarId:
                  type: integer
                  format: int64
                  example: 1
                enableRank:
                  type: boolean
                  default: false
                announcements:
                  type: string
                  default: "[]"
                  example: "[]"
                taskTemplates:
                  type: string
                  default: "[]"
                  example: "[]"
                classificationTopics:
                  type: array
                  items:
                    type: integer
                    format: int64
                  default: [ ]
                  example: [ ]
  /spaces/{spaceId}/managers/{userId}:
    parameters:
      - $ref: "#/components/parameters/SpaceId"
      - schema:
          type: integer
          format: int64
        in: path
        name: userId
        description: Admin User ID
        required: true
    delete:
      summary: Disqualify Space Admin
      operationId: delete-space-admin
      tags: [ Spaces ]
      responses:
        "204":
          description: Deleted successfully.
    patch:
      summary: Update Space Admin Info
      operationId: patch-space-admin
      tags: [ Spaces ]
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      space:
                        $ref: "#/components/schemas/Space"
                    required:
                      - space
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  $ref: "#/components/schemas/SpaceAdminRoleType"
  /spaces/{spaceId}/managers:
    parameters:
      - $ref: "#/components/parameters/SpaceId"
    post:
      summary: Add Space Admin
      operationId: post-space-admin
      tags: [ Spaces ]
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      space:
                        $ref: "#/components/schemas/Space"
                    required:
                      - space
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - role
                - userId
              properties:
                role:
                  $ref: "#/components/schemas/SpaceAdminRoleType"
                userId:
                  type: integer
                  format: int64
  /tasks/{taskId}:
    parameters:
      - $ref: '#/components/parameters/TaskId'
    delete:
      summary: Delete Task
      operationId: delete-task
      tags: [ Tasks ]
      responses:
        "204":
          description: Deleted successfully.
    get:
      summary: Query Task
      operationId: get-task
      tags: [ Tasks ]
      parameters:
        - schema:
            type: boolean
            default: false
          in: query
          name: querySpace
          description: Query the space that the task belongs to
        - schema:
            type: boolean
            default: false
          in: query
          name: queryTeam
          description: Query the team that the task belongs to
        - schema:
            type: boolean
            default: false
          in: query
          name: queryJoinability
          description: Check whether current user can join this task or using one of his/her team
        - schema:
            type: boolean
            default: false
          in: query
          name: querySubmittability
          description: Check whether current user can submit this task or using one of his/her team
        - schema:
            type: boolean
            default: false
          in: query
          name: queryJoined
          description: Check whether current user has joined this task
        - schema:
            type: boolean
            default: false
          in: query
          name: queryUserDeadline
          description: Check whether current user has a specific deadline for this task
        - schema:
            type: boolean
            default: false
          in: query
          name: queryTopics
          description: Query task's topics
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      task:
                        $ref: "#/components/schemas/Task"
                      participation:
                        $ref: "#/components/schemas/TaskParticipationInfo"
                    required:
                      - task
                      - participation
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
    patch:
      summary: Update Task
      operationId: patch-task
      tags: [ Tasks ]
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      task:
                        $ref: "#/components/schemas/Task"
                    required:
                      - task
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                hasDeadline:
                  type: boolean
                deadline:
                  type: integer
                  format: int64
                hasParticipantLimit:
                  type: boolean
                participantLimit:
                  type: integer
                defaultDeadline:
                  type: integer
                  format: int64
                resubmittable:
                  type: boolean
                editable:
                  type: boolean
                intro:
                  type: string
                description:
                  type: string
                submissionSchema:
                  type: array
                  items:
                    $ref: "#/components/schemas/TaskSubmissionSchemaEntry"
                hasRank:
                  type: boolean
                rank:
                  type: integer
                approved:
                  $ref: "#/components/schemas/ApproveType"
                rejectReason:
                  type: string
                topics:
                  type: array
                  items:
                    type: integer
                    format: int64
                requireRealName:
                  type: boolean
                categoryId:
                  type: integer
                  format: int64
                  description: ID of the category to which the task belongs.
                  example: 1
  /tasks/{taskId}/teams:
    parameters:
      - $ref: '#/components/parameters/TaskId'
    get:
      summary: Get teams associated with a task
      description: |
        Retrieves a list of teams associated with a specific task. 
        The teams can be filtered based on eligibility criteria.
      operationId: getTaskTeams
      tags: [ Tasks ]
      parameters:
        - in: query
          name: filter
          schema:
            type: string
            enum: [ eligible, all ]
            default: eligible
          description: |
            Filter teams based on eligibility. 
            "eligible" returns teams that meet the task's requirements (e.g., real name info).
            "all" returns all teams.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    description: Response code
                    example: 200
                  data:
                    type: object
                    properties:
                      teams:
                        type: array
                        items:
                          $ref: "#/components/schemas/TeamSummary"
                    description: List of teams
                  message:
                    type: string
                    description: Response message
                    example: OK
  /tasks/{taskId}/ai-advice/conversations:
    parameters:
      - $ref: '#/components/parameters/TaskId'
    post:
      summary: Create AI Advice Conversation
      operationId: create-task-ai-advice-conversation
      tags: [ Tasks ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTaskAIAdviceConversationRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/TaskAIAdviceConversationResponse"
  /tasks/{taskId}/ai-advice/conversations/grouped:
    parameters:
      - $ref: '#/components/parameters/TaskId'
    get:
      summary: Get AI Advice Conversations Grouped by Conversation ID
      operationId: get-task-ai-advice-conversations-grouped
      description: Retrieves AI advice conversations grouped by conversation ID for a specific task.
      tags: [ Tasks ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    properties:
                      conversations:
                        type: array
                        items:
                          $ref: "#/components/schemas/ConversationGroupSummary"
                  message:
                    type: string
  /tasks/{taskId}/ai-advice/conversations/{conversationId}:
    parameters:
      - $ref: '#/components/parameters/TaskId'
    get:
      summary: Get AI Advice Conversation
      operationId: get-task-ai-advice-conversation
      description: Get AI Advice Conversation
      tags: [ Tasks ]
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    properties:
                      conversations:
                        type: array
                        items:
                          $ref: "#/components/schemas/TaskAIAdviceConversation"
                  message:
                    type: string
    delete:
      summary: Delete AI Advice Conversation
      operationId: delete-task-ai-advice-conversation
      tags: [ Tasks ]
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
  /tasks/{taskId}/ai-advice:
    parameters:
      - $ref: '#/components/parameters/TaskId'
    get:
      summary: Get AI Advice
      operationId: get-task-ai-advice
      tags: [ Tasks ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    $ref: "#/components/schemas/TaskAIAdvice"
                  message:
                    type: string
    post:
      summary: Request AI Advice Generation
      operationId: request-task-ai-advice
      tags: [ Tasks ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    properties:
                      status:
                        $ref: "#/components/schemas/TaskAIAdviceGenerationStatus"
                      quota:
                        $ref: "#/components/schemas/QuotaInfo"
                  message:
                    type: string
  /tasks/{taskId}/ai-advice/status:
    parameters:
      - $ref: '#/components/parameters/TaskId'
    get:
      summary: Get AI Advice Generation Status
      operationId: get-task-ai-advice-status
      tags: [ Tasks ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    properties:
                      status:
                        $ref: "#/components/schemas/TaskAIAdviceGenerationStatus"
                  message:
                    type: string

  /ai/quota:
    get:
      summary: Get Current User's AI Quota
      operationId: get-user-ai-quota
      tags: [ AI ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    $ref: "#/components/schemas/QuotaInfo"
                  message:
                    type: string
  /tasks:
    get:
      summary: Enumerate Tasks
      operationId: get-tasks
      tags: [ Tasks ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    properties:
                      tasks:
                        type: array
                        items:
                          $ref: "#/components/schemas/Task"
                      page:
                        $ref: "#/components/schemas/Page"
                  message:
                    type: string
      parameters:
        - schema:
            type: integer
            format: int64
          in: query
          name: space
          description: Space ID
          required: true
        - name: categoryId
          in: query
          required: false
          description: Filter tasks by the ID of the category they belong to.
          schema:
            type: integer
            format: int64
        - schema:
            $ref: "#/components/schemas/ApproveType"
          in: query
          name: approved
          description: Distinguish task status
        - schema:
            type: integer
            format: int64
          in: query
          name: owner
          description: Owner's User ID
        - schema:
            type: boolean
          in: query
          name: joined
          description: Require joined or not
        - schema:
            type: array
            items:
              type: integer
              format: int64
          in: query
          name: topics
          description: Only show tasks with at least one of these topics
        - $ref: "#/components/parameters/PageStart"
        - $ref: "#/components/parameters/PageSize"
        - schema:
            type: string
            default: updatedAt
          in: query
          name: sort_by
          description: '"updatedAt", "deadline" or "createdAt"'
        - schema:
            type: string
            default: desc
          in: query
          name: sort_order
          description: '"asc" or "desc"'
        - schema:
            type: boolean
            default: false
          in: query
          name: querySpace
          description: Query the space that the task belongs to
        - schema:
            type: boolean
            default: false
          in: query
          name: queryTeam
          description: Query the team that the task belongs to
        - schema:
            type: boolean
            default: false
          in: query
          name: queryJoinability
          description: Check whether current user can join this task or using one of his/her team
        - schema:
            type: boolean
            default: false
          in: query
          name: querySubmittability
          description: Check whether current user can submit this task or using one of his/her team
        - schema:
            type: boolean
            default: false
          in: query
          name: queryJoined
          description: Check whether current user has joined this task
        - schema:
            type: boolean
            default: false
          in: query
          name: queryUserDeadline
          description: Check whether current user has a specific deadline for this task
        - schema:
            type: boolean
            default: false
          in: query
          name: queryTopics
          description: Query task's topics
        - schema:
            type: string
          in: query
          name: keywords
          description: Use this to search
    post:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      task:
                        $ref: "#/components/schemas/Task"
                    required:
                      - task
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      tags: [ Tasks ]
      operationId: post-task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - space
                - submitterType
                - resubmittable
                - editable
                - intro
                - description
                - submissionSchema
              properties:
                name:
                  type: string
                submitterType:
                  $ref: "#/components/schemas/TaskSubmitterType"
                deadline:
                  type: integer
                  format: int64
                defaultDeadline:
                  type: integer
                  format: int64
                  default: 30
                resubmittable:
                  type: boolean
                editable:
                  type: boolean
                intro:
                  type: string
                description:
                  type: string
                submissionSchema:
                  type: array
                  items:
                    $ref: "#/components/schemas/TaskSubmissionSchemaEntry"
                space:
                  type: integer
                  format: int64
                categoryId:
                  type: integer
                  format: int64
                  description: The ID of the category to assign this task to. Requires spaceId to be set.
                  example: 123
                rank:
                  type: integer
                topics:
                  type: array
                  items:
                    type: integer
                    format: int64
                  default: [ ]
                requireRealName:
                  type: boolean
                  description: Whether the task requires real name information
                  default: false
                minTeamSize:
                  type: integer
                  format: int64
                  description: Minimum team size required to submit the task, only valid if submitterType is TEAM. `undefined` if not specified.
                maxTeamSize:
                  type: integer
                  format: int64
                  description: Maximum team size allowed to submit the task, only valid if submitterType is TEAM. `undefined` if not specified.
                participantLimit:
                  type: integer
                  description: Maximum number of participants allowed in the task. `undefined` if not specified.
      summary: Create Task
  /tasks/{taskId}/participants:
    parameters:
      - $ref: "#/components/parameters/TaskId"
    get:
      summary: Get Participants
      tags: [ Tasks ]
      operationId: get-task-participants
      parameters:
        - schema:
            $ref: "#/components/schemas/ApproveType"
          in: query
          name: approved
          description: approve status
        - schema:
            type: boolean
            default: false
          in: query
          name: queryRealNameInfo
          description: Query real name info
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - data
                  - message
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    required:
                      - participants
                    properties:
                      participants:
                        type: array
                        items:
                          $ref: "#/components/schemas/TaskMembership"
                  message:
                    type: string
          description: OK
    patch:
      summary: Update TaskMembership By Member ID
      parameters:
        - description: Member ID
          in: query
          name: member
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      participants:
                        type: array
                        items:
                          $ref: "#/components/schemas/TaskMembership"
                    required:
                      - participant
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      tags: [ Tasks ]
      operationId: patch-task-membership-by-member
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchTaskMembershipRequest"
    delete:
      parameters:
        - description: Member ID
          in: query
          name: member
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: No Content
      tags: [ Tasks ]
      operationId: delete-task-participant-by-member
      summary: Leave Task By Member ID
    post:
      parameters:
        - description: Member ID
          in: query
          name: member
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      participant:
                        $ref: "#/components/schemas/TaskMembership"
                    required:
                      - task
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deadline:
                  type: integer
                  format: int64
                email:
                  type: string
                phone:
                  type: string
                applyReason:
                  type: string
                personalAdvantage:
                  type: string
                remark:
                  type: string
      tags: [ Tasks ]
      operationId: post-task-participant
      summary: Apply for Task
  /tasks/{taskId}/participants/{participantId}:
    parameters:
      - $ref: "#/components/parameters/TaskId"
    get:
      summary: Get TaskMembership
      tags: [ Tasks ]
      operationId: get-task-participant
      parameters:
        - description: Participant ID
          in: path
          name: participantId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      taskMembership:
                        $ref: "#/components/schemas/TaskMembership"
                    required:
                      - taskMembership
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
    patch:
      summary: Update TaskMembership
      tags: [ Tasks ]
      operationId: patch-task-participant
      parameters:
        - description: Participant ID
          in: path
          name: participantId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchTaskMembershipRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      taskMembership:
                        $ref: "#/components/schemas/TaskMembership"
                    required:
                      - taskMembership
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
    delete:
      summary: Delete TaskMembership
      tags: [ Tasks ]
      operationId: delete-task-participant
      parameters:
        - description: Participant ID
          in: path
          name: participantId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: No Content
  /tasks/{taskId}/participants/{participantId}/submissions:
    parameters:
      - $ref: "#/components/parameters/TaskId"
    get:
      summary: Enumerate Submissions
      tags: [ Tasks ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - data
                  - message
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    required:
                      - submissions
                      - page
                    properties:
                      submissions:
                        type: array
                        items:
                          $ref: "#/components/schemas/TaskSubmission"
                      page:
                        $ref: "#/components/schemas/Page"
                  message:
                    type: string
      operationId: get-task-submissions
      parameters:
        - schema:
            type: integer
            format: int64
          in: path
          name: participantId
          description: Submitters' TaskMembership ID
          required: true
        - schema:
            type: boolean
            default: false
          in: query
          name: allVersions
          description: Include All Versions
        - schema:
            type: boolean
            default: false
          in: query
          name: queryReview
          description: Query task owner's review
        - schema:
            type: boolean
          in: query
          name: reviewed
          description: Only return reviewed or unreviewed submissions
        - $ref: "#/components/parameters/PageStart"
        - $ref: "#/components/parameters/PageSize"
        - schema:
            type: string
            default: updatedAt
          in: query
          name: sort_by
          description: '"updatedAt" or "createdAt"'
        - schema:
            type: string
            default: desc
          in: query
          name: sort_order
          description: '"asc" or "desc"'
    post:
      summary: Create Submission
      tags: [ Tasks ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - data
                  - message
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    required:
                      - submission
                    properties:
                      submission:
                        $ref: "#/components/schemas/TaskSubmission"
                  message:
                    type: string
      operationId: post-task-submission
      parameters:
        - schema:
            type: integer
            format: int64
          in: path
          name: participantId
          description: Submitters' TaskMembership ID
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/TaskSubmissionContent"
  /tasks/{taskId}/participants/{participantId}/submissions/{version}:
    parameters:
      - $ref: "#/components/parameters/TaskId"
    patch:
      summary: Update Submission
      tags: [ Tasks ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - data
                  - message
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    required:
                      - submission
                    properties:
                      submission:
                        $ref: "#/components/schemas/TaskSubmission"
                  message:
                    type: string
      operationId: patch-task-submission
      parameters:
        - schema:
            type: integer
            format: int64
          in: path
          name: participantId
          description: Submitters' TaskMembership ID
          required: true
        - schema:
            type: integer
          in: path
          name: version
          description: Version Index
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/TaskSubmissionContent"
  /tasks/{taskId}/participants/{participantId}/submissions/{submissionId}/review:
    parameters:
      - $ref: "#/components/parameters/TaskId"
    post:
      summary: Review Submission
      tags: [ Tasks ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - data
                  - message
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    required:
                      - submission
                      - hasUpgradedParticipantRank
                    properties:
                      submission:
                        $ref: "#/components/schemas/TaskSubmission"
                      hasUpgradedParticipantRank:
                        type: boolean
                  message:
                    type: string
      operationId: post-task-submission-review
      parameters:
        - schema:
            type: integer
            format: int64
          in: path
          name: participantId
          description: Submitters' TaskMembership ID
          required: true
        - schema:
            type: integer
            format: int64
          in: path
          name: submissionId
          description: Task Submission ID
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accepted
                - score
                - comment
              properties:
                accepted:
                  type: boolean
                score:
                  type: integer
                comment:
                  type: string
    patch:
      summary: Re-Review Submission
      tags: [ Tasks ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - data
                  - message
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    required:
                      - submission
                      - hasUpgradedParticipantRank
                    properties:
                      submission:
                        $ref: "#/components/schemas/TaskSubmission"
                      hasUpgradedParticipantRank:
                        type: boolean
                  message:
                    type: string
      operationId: patch-task-submission-review
      parameters:
        - schema:
            type: integer
            format: int64
          in: path
          name: participantId
          description: Submitters' TaskMembership ID
          required: true
        - schema:
            type: integer
            format: int64
          in: path
          name: submissionId
          description: Task Submission ID
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accepted:
                  type: boolean
                score:
                  type: integer
                comment:
                  type: string
    delete:
      summary: Revert Review Submission
      tags: [ Tasks ]
      responses:
        "200":
          description: OK
      operationId: delete-task-submission-review
      parameters:
        - schema:
            type: integer
            format: int64
          in: path
          name: participantId
          description: Submitters' TaskMembership ID
          required: true
        - schema:
            type: integer
            format: int64
          in: path
          name: submissionId
          description: Task Submission ID
          required: true
  /teams/{teamId}:
    parameters:
      - $ref: "#/components/parameters/TeamId"
    delete:
      summary: Delete Team
      description: Deletes the specified team. This action typically requires **Team Owner** privileges and is irreversible. All memberships will be removed, and associated data might be deleted or archived depending on system policy.
      operationId: delete-team
      responses:
        "204":
          description: Team deleted successfully.
      tags: [ Teams ]
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      team:
                        $ref: "#/components/schemas/Team"
                    required:
                      - team
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      tags: [ Teams ]
      operationId: get-team
      summary: Query Team
    patch:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      team:
                        $ref: "#/components/schemas/Team"
                    required:
                      - team
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      tags: [ Teams ]
      operationId: patch-team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                intro:
                  type: string
                description:
                  type: string
                name:
                  type: string
                avatarId:
                  type: integer
                  format: int64
      summary: Update Team
  /teams/{teamId}/requests:
    parameters:
      - $ref: "#/components/parameters/TeamId"
    post:
      summary: Request to join a team
      description: Allows the authenticated user to submit a request to join the specified team.
      operationId: createTeamJoinRequest
      tags: [ Teams ]
      x-handler-args:
        - arg: "userInfo: org.rucca.cheese.auth.model.AuthUserInfo?"
      requestBody:
        description: Optional message for the join request.
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamJoinRequestCreate'
      responses:
        '201':
          description: Join request submitted successfully. Returns the created application details.
          headers:
            Location:
              description: URL of the newly created request resource (e.g., /users/me/requests/{requestId})
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    properties:
                      application:
                        $ref: '#/components/schemas/TeamMembershipApplication'
                  message:
                    type: string
    get:
      summary: List join requests for a team
      description: Retrieves a list of join requests directed to the specified team. Requires team admin/owner privileges.
      operationId: listTeamJoinRequests
      tags: [ Teams ]
      parameters:
        - name: status
          in: query
          required: false
          description: Filter requests by status (e.g., PENDING).
          schema:
            $ref: '#/components/schemas/ApplicationStatus'
        - $ref: '#/components/parameters/PageStart'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: A list of join requests.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      applications:
                        type: array
                        items:
                          $ref: '#/components/schemas/TeamMembershipApplication'
                      page:
                        $ref: '#/components/schemas/Page'
                  message:
                    type: string
  /teams/{teamId}/requests/{requestId}/approve:
    parameters:
      - $ref: '#/components/parameters/TeamId'
      - $ref: '#/components/parameters/RequestId'
    post:
      summary: Approve a join request
      description: Approves a pending join request for the team. Requires team admin/owner privileges. Creates the team membership upon success.
      operationId: approveTeamJoinRequest
      tags: [ Teams ]
      responses:
        '204':
          description: Request approved successfully and membership created.
  /teams/{teamId}/requests/{requestId}/reject:
    parameters:
      - $ref: '#/components/parameters/TeamId'
      - $ref: '#/components/parameters/RequestId'
    post:
      tags: [ Teams ]
      summary: Reject a join request
      description: Rejects a pending join request for the team. Requires team admin/owner privileges.
      operationId: rejectTeamJoinRequest
      responses:
        '204':
          description: Request rejected successfully.
  /teams/{teamId}/invitations:
    parameters:
      - $ref: '#/components/parameters/TeamId'
    post:
      summary: Invite a user to the team
      description: Allows a team admin/owner to invite a user to join the specified team.
      operationId: createTeamInvitation
      tags: [ Teams ]
      requestBody:
        description: Details of the user to invite and optional role/message.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamInvitationCreate'
      responses:
        '201':
          description: Invitation sent successfully. Returns the created application details.
          headers:
            Location:
              description: URL of the newly created invitation resource (e.g., /users/me/invitations/{invitationId})
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    properties:
                      invitation:
                        $ref: '#/components/schemas/TeamMembershipApplication'
                    required: [ invitation ]
                  message:
                    type: string
                required: [ code, data, message ]
    get:
      summary: List invitations sent by a team
      description: Retrieves a list of invitations sent by the specified team. Requires team admin/owner privileges.
      operationId: listTeamInvitations
      tags: [ Teams ]
      parameters:
        - name: status
          in: query
          required: false
          description: Filter invitations by status (e.g., PENDING).
          schema:
            $ref: '#/components/schemas/ApplicationStatus'
        - $ref: '#/components/parameters/PageStart'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: A list of invitations.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      invitations:
                        type: array
                        items:
                          $ref: '#/components/schemas/TeamMembershipApplication'
                      page:
                        $ref: '#/components/schemas/Page'
                    required: [ invitations, page ]
                  message:
                    type: string
                required: [ code, data, message ]
  /teams/{teamId}/invitations/{invitationId}:
    parameters:
      - $ref: '#/components/parameters/TeamId'
      - $ref: '#/components/parameters/InvitationId'
    delete:
      tags: [ Teams ]
      summary: Cancel a pending invitation
      description: Allows the initiator (team admin/owner) to cancel a pending invitation they sent.
      operationId: cancelTeamInvitation
      responses:
        '204':
          description: Invitation cancelled successfully.
  /teams/my-teams:
    get:
      tags: [ Teams ]
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - data
                  - message
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    required:
                      - teams
                    properties:
                      teams:
                        type: array
                        items:
                          $ref: "#/components/schemas/Team"
                  message:
                    type: string
          description: OK
      operationId: get-my-teams
      summary: Query My Teams
  /teams:
    post:
      tags: [ Teams ]
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      team:
                        $ref: "#/components/schemas/Team"
                    required:
                      - team
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      operationId: post-team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - intro
                - description
                - name
                - avatarId
              properties:
                intro:
                  type: string
                description:
                  type: string
                name:
                  type: string
                avatarId:
                  type: integer
                  format: int64
      summary: Create Team
    get:
      summary: Get Teams
      tags: [ Teams ]
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - data
                  - message
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    required:
                      - teams
                    properties:
                      teams:
                        type: array
                        items:
                          $ref: "#/components/schemas/Team"
                      page:
                        $ref: "#/components/schemas/Page"
                  message:
                    type: string
          description: OK
      operationId: get-teams
      parameters:
        - schema:
            type: string
            default: ""
          in: query
          name: query
          description: ID or Search Term
          allowEmptyValue: true
        - $ref: "#/components/parameters/PageStart"
        - $ref: "#/components/parameters/PageSize"
  /teams/{teamId}/members:
    parameters:
      - $ref: "#/components/parameters/TeamId"
    get:
      summary: Enumerate Team Members
      tags: [ Teams ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - data
                  - message
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    required:
                      - members
                    properties:
                      members:
                        type: array
                        items:
                          $ref: "#/components/schemas/TeamMember"
                      allMembersVerified:
                        type: boolean
                  message:
                    type: string
      operationId: get-team-members
      parameters:
        - schema:
            type: boolean
            default: false
          in: query
          name: queryRealNameStatus
          description: Whether to query real name verification status of members
          required: false
    post:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      team:
                        $ref: "#/components/schemas/Team"
                    required:
                      - team
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      tags: [ Teams ]
      operationId: post-team-member
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                role:
                  $ref: "#/components/schemas/TeamMemberRoleType"
                user_id:
                  type: integer
                  format: int64
              required:
                - role
                - user_id
              type: object
      summary: Add Team Member
  /teams/{teamId}/members/{userId}:
    parameters:
      - $ref: "#/components/parameters/TeamId"
      - description: Member User ID
        in: path
        name: userId
        required: true
        schema:
          type: integer
          format: int64
    delete:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      team:
                        $ref: "#/components/schemas/Team"
                    required:
                      - team
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      tags: [ Teams ]
      operationId: delete-team-member
      summary: Kick Out Team Member
    patch:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: integer
                  data:
                    properties:
                      team:
                        $ref: "#/components/schemas/Team"
                    required:
                      - team
                    type: object
                  message:
                    type: string
                required:
                  - code
                  - data
                  - message
                type: object
          description: OK
      tags: [ Teams ]
      operationId: patch-team-member
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                role:
                  $ref: "#/components/schemas/TeamMemberRoleType"
              type: object
      summary: Update Team Membership Info
  /notifications:
    get:
      summary: List Notifications for Current User
      description: Retrieves a paginated list of notifications for the currently authenticated user, sorted by creation date descending. Uses cursor-based pagination.
      operationId: list-notifications
      tags: [ Notifications ]
      parameters:
        - $ref: '#/components/parameters/EncodedCursorPageStart'
        - $ref: '#/components/parameters/PageSize'
        - name: type
          in: query
          description: Filter by notification type.
          required: false
          schema: { $ref: '#/components/schemas/NotificationType' }
        - name: read
          in: query
          description: Filter by read status.
          required: false
          schema: { type: boolean, nullable: true }
      responses:
        '200':
          description: Paginated list of notifications.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      notifications:
                        type: array
                        items:
                          $ref: '#/components/schemas/Notification'
                      page:
                        $ref: '#/components/schemas/EncodedCursorPage'
                    required: [ notifications, cursor, hasMore ]
                  message:
                    type: string
                required: [ code, data, message ]
    patch:
      summary: Bulk Update Notification Status (e.g., Mark Multiple as Read)
      description: Updates the status (e.g., read state) of multiple notifications belonging to the current user in a single request.
      operationId: bulk-update-notifications
      tags: [ Notifications ]
      requestBody:
        description: An array of notification updates. Currently only supports updating the 'read' status.
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ updates ]
              properties:
                updates:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    required: [ id, read ]
                    properties:
                      id:
                        type: integer
                        format: int64
                        description: The ID of the notification to update.
                      read:
                        type: boolean
                        description: The desired read status.
                  example: [ { "id": 123, "read": true }, { "id": 456, "read": true } ]
      responses:
        '200':
          description: Bulk update successful. Returns the IDs that were successfully updated.
          content:
            application/json:
              schema:
                type: object
                required: [ code, message, data ]
                properties:
                  code: { type: integer, example: 200 }
                  message: { type: string, example: "Success" }
                  data:
                    type: object
                    properties:
                      updatedIds:
                        type: array
                        items: { type: integer, format: int64 }
                        description: List of notification IDs successfully updated.
  /notifications/{notificationId}:
    parameters:
      - $ref: '#/components/parameters/NotificationId'
    get:
      summary: Get a Single Notification
      description: Retrieves details of a specific notification belonging to the current user.
      operationId: get-notification-by-id
      tags: [ Notifications ]
      responses:
        '200':
          description: Notification details.
          content:
            application/json:
              schema:
                type: object
                required: [ code, message, data ]
                properties:
                  code: { type: integer, example: 200 }
                  message: { type: string, example: "Success" }
                  data:
                    type: object
                    properties:
                      notification:
                        $ref: '#/components/schemas/Notification'
                    required: [ notification ]
    patch:
      summary: Update Notification Status (e.g., Mark as Read/Unread)
      description: Updates the status (e.g., read state) of a specific notification belonging to the current user.
      operationId: update-notification-status
      tags: [ Notifications ]
      requestBody:
        description: The update to apply. Currently only supports changing the 'read' status.
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ read ]
              properties:
                read:
                  type: boolean
                  description: The desired read status.
              example: { "read": true }
      responses:
        '200':
          description: Notification updated successfully. Returns the updated notification.
          content:
            application/json:
              schema:
                type: object
                required: [ code, message, data ]
                properties:
                  code: { type: integer, example: 200 }
                  message: { type: string, example: "Success" }
                  data:
                    type: object
                    properties:
                      notification:
                        $ref: '#/components/schemas/Notification'
                    required: [ notification ]
    delete:
      summary: Delete a Notification
      description: Deletes a specific notification belonging to the currently authenticated user.
      operationId: delete-notification
      tags: [ Notifications ]
      responses:
        '204': { description: Notification successfully deleted. }
  /notifications/status:
    put:
      summary: Set Collective Notification Status (e.g., Mark All as Read)
      description: Sets a specific status for all applicable notifications of the current user. Currently only supports setting 'read' to true for all unread notifications.
      operationId: set-collective-notification-status
      tags: [ Notifications ]
      requestBody:
        description: The status to apply to the collection.
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ read ]
              properties:
                read:
                  type: boolean
                  description: Must be 'true' to mark all as read. Setting to 'false' is not supported via this endpoint.
                  enum: [ true ] # Enforce only true can be sent
              example: { "read": true }
      responses:
        '200':
          description: Collective status updated (all marked as read).
          content:
            application/json:
              schema:
                type: object
                required: [ code, message, data ]
                properties:
                  code: { type: integer, example: 200 }
                  message: { type: string, example: "Success" }
                  data:
                    type: object
                    properties:
                      count:
                        type: integer
                        format: int32
                        description: The number of notifications marked as read.
  /notifications/unread-count:
    get:
      summary: Get Unread Notification Count
      description: Retrieves the count of unread notifications for the currently authenticated user. (Pragmatic endpoint).
      operationId: get-unread-notifications-count
      tags: [ Notifications ]
      responses:
        '200':
          description: Unread count retrieved.
          content:
            application/json:
              schema:
                type: object
                required: [ code, message, data ]
                properties:
                  code: { type: integer, example: 200 }
                  message: { type: string, example: "Success" }
                  data:
                    type: object
                    required: [ count ]
                    properties:
                      count:
                        type: integer
                        format: int64
                        description: Total number of unread notifications.
  /projects:
    post:
      operationId: create-project
      summary: Create Project
      tags: [ Projects ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - description
                - colorCode
                - startDate
                - endDate
                - teamId
                - leaderId
              properties:
                name:
                  type: string
                description:
                  type: string
                colorCode:
                  type: string
                  pattern: "^#[0-9A-Fa-f]{6}$"
                startDate:
                  type: integer
                  format: int64
                  description: 项目开始时间戳(毫秒)
                endDate:
                  type: integer
                  format: int64
                  description: 项目结束时间戳(毫秒)
                teamId:
                  type: integer
                  format: int64
                parentId:
                  type: integer
                  format: int64
                  description: 父项目ID
                leaderId:
                  type: integer
                  format: int64
                externalTaskId:
                  type: integer
                  format: int64
                githubRepo:
                  type: string
                content:
                  type: string
                memberIds:
                  type: array
                  items:
                    type: integer
                    format: int64
                externalCollaboratorIds:
                  type: array
                  items:
                    type: integer
                    format: int64
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 201
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      project:
                        $ref: "#/components/schemas/Project"
    get:
      operationId: get-projects
      summary: List Projects
      tags: [ Projects ]
      parameters:
        - name: team_id
          in: query
          description: 属于的小队 ID
          required: true
          schema:
            type: integer
            format: int64
        - name: parent_id
          in: query
          description: 父项目ID (可选)
          schema:
            type: integer
            format: int64
        - name: leader_id
          in: query
          description: 负责人ID (可选)
          schema:
            type: integer
            format: int64
        - name: member_id
          in: query
          description: 成员ID (可选)
          schema:
            type: integer
            format: int64
        - name: archived
          in: query
          description: 是否归档
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 200
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      projects:
                        type: array
                        items:
                          $ref: "#/components/schemas/Project"
  /projects/{projectId}:
    parameters:
      - $ref: "#/components/parameters/ProjectId"
    get:
      operationId: get-project
      summary: Query Project
      tags: [ Projects ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 200
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      project:
                        $ref: "#/components/schemas/Project"
    patch:
      operationId: patch-project
      summary: Update Project
      tags: [ Projects ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                colorCode:
                  type: string
                  pattern: "^#[0-9A-Fa-f]{6}$"
                startDate:
                  type: integer
                  format: int64
                  description: 项目开始时间戳(毫秒)
                endDate:
                  type: integer
                  format: int64
                  description: 项目结束时间戳(毫秒)
                githubRepo:
                  type: string
                archived:
                  type: boolean
                  description: 是否归档
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 200
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      project:
                        $ref: "#/components/schemas/Project"
    delete:
      operationId: delete-project
      summary: Delete Project
      tags: [ Projects ]
      responses:
        "204":
          description: No Content
  /projects/{projectId}/members:
    parameters:
      - $ref: "#/components/parameters/ProjectId"
    get:
      operationId: get-project-members
      summary: Enumerate Project Members
      tags: [ Projects ]
      parameters:
        - $ref: "#/components/parameters/PageStart"
        - $ref: "#/components/parameters/PageSize"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 200
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      members:
                        type: array
                        items:
                          $ref: "#/components/schemas/ProjectMembership"
                      page:
                        $ref: "#/components/schemas/Page"
    post:
      operationId: post-project-member
      summary: Add Project Member
      tags: [ Projects ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - role
              properties:
                userId:
                  type: integer
                  format: int64
                role:
                  $ref: "#/components/schemas/ProjectMemberRole"
                notes:
                  type: string
                  default: ""
                  example: ""
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 201
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      member:
                        $ref: "#/components/schemas/ProjectMembership"
  /projects/{projectId}/members/{userId}:
    parameters:
      - $ref: "#/components/parameters/ProjectId"
      - name: userId
        in: path
        description: 用户ID
        required: true
        schema:
          type: integer
          format: int64
    delete:
      operationId: delete-project-member
      summary: Remove Project Member
      tags: [ Projects ]
      responses:
        "204":
          description: No Content
  /discussions:
    post:
      operationId: create-discussion
      summary: Create Discussion
      tags: [ Discussions ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
                - modelType
                - modelId
              properties:
                content:
                  type: string
                parentId:
                  type: integer
                  format: int64
                  description: 回复某条讨论 (可选)
                mentionedUserIds:
                  type: array
                  items:
                    type: integer
                    format: int64
                  description: 提及的用户ID (可选)
                modelType:
                  $ref: "#/components/schemas/DiscussableModelType"
                  description: 模型类型
                modelId:
                  type: integer
                  format: int64
                  description: 模型ID
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 0
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      discussion:
                        $ref: "#/components/schemas/Discussion"
    get:
      operationId: list-discussions
      summary: List Discussions
      tags: [ Discussions ]
      x-handler-args:
        - arg: "userInfo: org.rucca.cheese.auth.model.AuthUserInfo?"
      parameters:
        - name: modelType
          in: query
          schema:
            $ref: "#/components/schemas/DiscussableModelType"
          description: 模型类型
        - name: modelId
          in: query
          schema:
            type: integer
            format: int64
          description: 模型ID
        - name: parent_id
          in: query
          description: 父讨论ID (可选)
          schema:
            type: integer
            format: int64
        - $ref: "#/components/parameters/PageStart"
        - $ref: "#/components/parameters/PageSize"
        - name: sort_by
          in: query
          description: '"createdAt" or "updatedAt"'
          schema:
            type: string
            default: createdAt
        - name: sort_order
          in: query
          description: '"asc" or "desc"'
          schema:
            type: string
            default: desc
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 0
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      discussions:
                        type: array
                        items:
                          $ref: "#/components/schemas/Discussion"
                      page:
                        $ref: "#/components/schemas/Page"
  /discussions/{discussionId}:
    parameters:
      - $ref: "#/components/parameters/DiscussionId"
    get:
      operationId: get-discussion
      summary: Query Discussion
      tags: [ Discussions ]
      x-handler-args:
        - arg: "userInfo: org.rucca.cheese.auth.model.AuthUserInfo?"
      parameters:
        - $ref: "#/components/parameters/PageStart"
        - $ref: "#/components/parameters/PageSize"
        - name: sort_by
          in: query
          description: '"createdAt" or "updatedAt"'
          schema:
            type: string
            default: createdAt
        - name: sort_order
          in: query
          description: '"asc" or "desc"'
          schema:
            type: string
            default: desc
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 200
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    required:
                      - discussion
                      - subDiscussions
                    properties:
                      discussion:
                        $ref: "#/components/schemas/Discussion"
                      subDiscussions:
                        type: object
                        required:
                          - discussions
                          - page
                        properties:
                          discussions:
                            type: array
                            items:
                              $ref: "#/components/schemas/Discussion"
                          page:
                            $ref: "#/components/schemas/Page"
    patch:
      operationId: patch-discussion
      summary: Update Discussion
      tags: [ Discussions ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 200
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      discussion:
                        $ref: "#/components/schemas/Discussion"
    delete:
      operationId: delete-discussion
      summary: Delete Discussion
      tags: [ Discussions ]
      responses:
        "204":
          description: No Content
  /discussions/{discussionId}/sub-discussions:
    parameters:
      - $ref: "#/components/parameters/DiscussionId"
    get:
      operationId: list-sub-discussions
      summary: List Sub-Discussions
      tags: [ Discussions ]
      x-handler-args:
        - arg: "userInfo: org.rucca.cheese.auth.model.AuthUserInfo?"
      parameters:
        - $ref: "#/components/parameters/PageStart"
        - $ref: "#/components/parameters/PageSize"
        - name: sort_by
          in: query
          description: '"createdAt" or "updatedAt"'
          schema:
            type: string
            default: createdAt
        - name: sort_order
          in: query
          description: '"asc" or "desc"'
          schema:
            type: string
            default: desc
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 200
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      discussions:
                        type: array
                        items:
                          $ref: "#/components/schemas/Discussion"
                      page:
                        $ref: "#/components/schemas/Page"
  /discussions/reactions:
    get:
      summary: Get all reaction types
      operationId: getAllReactionTypes
      tags: [ Discussions ]
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          reactionTypes:
                            type: array
                            items:
                              $ref: "#/components/schemas/ReactionType"
  /discussions/{discussionId}/reactions/{reactionTypeId}:
    parameters:
      - $ref: "#/components/parameters/DiscussionId"
      - name: reactionTypeId
        in: path
        required: true
        schema:
          type: integer
          format: int64
    post:
      operationId: react-to-discussion
      summary: React to Discussion
      tags: [ Discussions ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 0
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      reaction:
                        $ref: "#/components/schemas/DiscussionReactionSummary"
  /knowledge:
    post:
      summary: Create Knowledge Item
      tags: [ Knowledge ]
      operationId: createKnowledge
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - type
                - content
                - teamId
              properties:
                name:
                  type: string
                description:
                  type: string
                type:
                  $ref: "#/components/schemas/KnowledgeType"
                content:
                  type: string
                teamId:
                  type: integer
                  format: int64
                  description: "知识条目所属的团队ID"
                projectId:
                  type: integer
                  format: int64
                  description: "相关的项目ID（可选）"
                materialId:
                  type: integer
                  format: int64
                  description: "来源 Material ID（可选）"
                discussionId:
                  type: integer
                  format: int64
                  description: "来源讨论ID（可选）"
                labels:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 0
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      knowledge:
                        $ref: "#/components/schemas/Knowledge"
    get:
      summary: List Knowledge Items
      tags: [ Knowledge ]
      operationId: listKnowledge
      parameters:
        - name: teamId
          in: query
          required: true
          schema:
            type: integer
            format: int64
        - name: projectId
          in: query
          schema:
            type: integer
            format: int64
        - name: type
          in: query
          description: Type (optional)
          schema:
            type: string
        - name: labels
          in: query
          description: Label list (optional)
          schema:
            type: array
            items:
              type: string
        - name: query
          in: query
          description: Search keyword (optional)
          schema:
            type: string
        - $ref: "#/components/parameters/PageStart"
        - $ref: "#/components/parameters/PageSize"
        - name: sort_by
          in: query
          description: Sort by (optional)
          schema:
            type: string
            default: createdAt
        - name: sort_order
          in: query
          description: Sort order (optional)
          schema:
            type: string
            default: desc
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 0
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    properties:
                      knowledges:
                        type: array
                        items:
                          $ref: "#/components/schemas/Knowledge"
                      page:
                        $ref: "#/components/schemas/Page"
  /knowledge/{knowledgeId}:
    parameters:
      - name: knowledgeId
        in: path
        description: Knowledge Item ID
        required: true
        schema:
          type: integer
          format: int64
    patch:
      summary: Update Knowledge Item
      tags: [ Knowledge ]
      operationId: updateKnowledge
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                type:
                  $ref: "#/components/schemas/KnowledgeType"
                content:
                  type: string
                teamId:
                  type: integer
                  format: int64
                  description: "知识条目所属的团队ID"
                projectId:
                  type: integer
                  format: int64
                  description: "相关的项目ID"
                labels:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 0
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    required:
                      - knowledge
                    properties:
                      knowledge:
                        $ref: "#/components/schemas/Knowledge"
    delete:
      summary: Delete Knowledge Item
      tags: [ Knowledge ]
      operationId: knowledgeDelete
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: integer
                    default: 200
                  message:
                    type: string
    get:
      summary: Get Single Knowledge Item
      tags: [ Knowledge ]
      operationId: KnowledgeGetById
      responses:
        "200":
          description: Successful retrieval of a knowledge item
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 0
                  message:
                    type: string
                    default: "success"
                  data:
                    $ref: "#/components/schemas/Knowledge"
  /knowledge/{knowledgeId}/upvote:
    parameters:
      - name: knowledgeId
        in: path
        description: Knowledge Item ID
        required: true
        schema:
          type: integer
          format: int64
    post:
      summary: Upvote Knowledge Item
      tags: [ Knowledge ]
      operationId: upvoteKnowledge
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 0
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    required:
                      - knowledge
                    properties:
                      knowledge:
                        $ref: "#/components/schemas/Knowledge"
    delete:
      summary: Remove Upvote from Knowledge Item
      tags: [ Knowledge ]
      operationId: removeUpvoteKnowledge
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - data
                properties:
                  code:
                    type: integer
                    default: 0
                  message:
                    type: string
                    default: "success"
                  data:
                    type: object
                    required:
                      - knowledge
                    properties:
                      knowledge:
                        $ref: "#/components/schemas/Knowledge"
components:
  schemas:
    SpaceCategory:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the category.
          readOnly: true
        name:
          type: string
          description: Name of the category. Must be unique within the space.
          example: "Backend Development"
        description:
          type: string
          nullable: true
          description: Optional description for the category.
          example: "Tasks related to server-side logic and databases."
        displayOrder:
          type: integer
          description: Order in which the category should be displayed. Lower numbers typically come first.
          default: 0
          example: 10
        createdAt:
          type: integer
          format: int64
          description: Category creation timestamp (epoch milliseconds).
          readOnly: true
        updatedAt:
          type: integer
          format: int64
          description: Category last update timestamp (epoch milliseconds).
          readOnly: true
        archivedAt:
          type: integer
          format: int64
          nullable: true
          description: Timestamp when the category was archived (epoch milliseconds). Null if not archived.
      required:
        - id
        - name
        - displayOrder
        - createdAt
        - updatedAt
    UserIdentity:
      title: UserIdentity
      type: object
      required:
        - realName
        - studentId
        - grade
        - major
        - className
      properties:
        realName:
          type: string
        studentId:
          type: string
        grade:
          type: string
        major:
          type: string
        className:
          type: string
    UserIdentityAccessModuleType:
      title: UserIdentityAccessModuleType
      type: string
      enum:
        - TASK
    UserIdentityAccessType:
      title: UserIdentityAccessType
      type: string
      enum:
        - VIEW
        - EXPORT
    UserIdentityAccessLog:
      title: UserIdentityAccessLog
      type: object
      required:
        - accessor
        - accessTime
        - accessType
        - ipAddress
      properties:
        accessor:
          $ref: "#/components/schemas/User"
        accessModuleType:
          $ref: "#/components/schemas/UserIdentityAccessModuleType"
        accessEntityId:
          type: integer
          format: int64
        accessEntityName:
          type: string
        accessTime:
          type: integer
          format: int64
        accessType:
          $ref: "#/components/schemas/UserIdentityAccessType"
        ipAddress:
          type: string
    KnowledgeType:
      type: string
      enum: [ MATERIAL, LINK, TEXT, CODE ]
    Space:
      title: Space
      type: object
      required:
        - id
        - intro
        - description
        - name
        - avatarId
        - admins
        - updatedAt
        - createdAt
        - enableRank
        - announcements
        - taskTemplates
        - classificationTopics
        - defaultCategoryId
      properties:
        id:
          type: integer
          format: int64
        intro:
          type: string
        description:
          type: string
        name:
          type: string
        avatarId:
          type: integer
          format: int64
        admins:
          type: array
          items:
            $ref: "#/components/schemas/SpaceAdmin"
        updatedAt:
          type: integer
          format: int64
        createdAt:
          type: integer
          format: int64
        enableRank:
          type: boolean
        announcements:
          type: string
        taskTemplates:
          type: string
        myRank:
          type: integer
          description: "Only has value when: 'queryJoinablity' == true && 'enableRank' == true"
        classificationTopics:
          type: array
          items:
            $ref: "#/components/schemas/Topic"
        defaultCategoryId:
          type: integer
          format: int64
          description: Default category ID for new content in this space.
    SpaceAdmin:
      title: SpaceAdmin
      type: object
      required:
        - role
        - user
        - updatedAt
        - createdAt
      properties:
        role:
          $ref: "#/components/schemas/SpaceAdminRoleType"
        user:
          $ref: "#/components/schemas/User"
        updatedAt:
          type: integer
          format: int64
        createdAt:
          type: integer
          format: int64
    SpaceAdminRoleType:
      title: SpaceAdminRoleType
      enum:
        - OWNER
        - ADMIN
    EligibilityRejectReasonCode:
      type: string
      enum:
        - ALREADY_PARTICIPATING
        - PARTICIPANT_LIMIT_REACHED
        - TASK_NOT_APPROVED
        - DEADLINE_PASSED
        - USER_NOT_FOUND
        - USER_ACCOUNT_ISSUE
        - USER_MISSING_REAL_NAME
        - USER_RANK_NOT_HIGH_ENOUGH
        - TEAM_NOT_FOUND
        - TEAM_SIZE_MIN_NOT_MET
        - TEAM_SIZE_MAX_EXCEEDED
        - TEAM_MISSING_REQUIRED_INFO
        - TEAM_MEMBER_MISSING_REAL_NAME
        - TEAM_MEMBERS_NOT_VERIFIED
        - TEAM_MEMBER_RANK_NOT_HIGH_ENOUGH
        - INDIVIDUAL_PARTICIPATION_NOT_ALLOWED
        - TEAM_PARTICIPATION_NOT_ALLOWED
        - UNKNOWN
    EligibilityRejectReasonInfo:
      type: object
      description: Describes a specific reason for ineligibility.
      required:
        - code
        - message
      properties:
        code:
          $ref: '#/components/schemas/EligibilityRejectReasonCode'
          description: Machine-readable code for the reason.
        message:
          type: string
          description: User-friendly explanation of the reason.
          example: "Team size must be at least 3 members."
        details:
          type: object
          nullable: true
          description: Optional additional details specific to the reason code (e.g., list of user IDs missing real name info).
          additionalProperties: true
          example:
            missingRealNameUserIds: [101, 105]
    EligibilityStatus:
      type: object
      description: Represents the eligibility status (e.g., for joining or submitting) for a user or a team regarding a specific task.
      required:
        - eligible
      properties:
        eligible:
          type: boolean
          description: Indicates whether the user/team is eligible.
        reasons:
          type: array
          description: A list of reasons why the user/team is *not* eligible. Empty if eligible is true.
          items:
            $ref: '#/components/schemas/EligibilityRejectReasonInfo'
    TeamTaskEligibility:
      type: object
      description: Provides eligibility details for a specific team in the context of a task.
      required:
        - team
        - eligibility
      properties:
        team:
          $ref: '#/components/schemas/TeamSummary'
          description: Summary of the team.
        eligibility:
          $ref: '#/components/schemas/EligibilityStatus'
          description: Eligibility status of this team for the task.
    ParticipationEligibility:
      type: object
      description: Provides eligibility details for a user and their teams in the context of a task.
      properties:
        user:
          $ref: '#/components/schemas/EligibilityStatus'
          description: Eligibility status of the user for the task.
        teams:
          type: array
          items:
            $ref: '#/components/schemas/TeamTaskEligibility'
          description: Eligibility status of the user's teams for the task.
    Task:
      title: Task
      type: object
      required:
        - id
        - name
        - submitterType
        - defaultDeadline
        - creator
        - resubmittable
        - editable
        - intro
        - description
        - submissionSchema
        - submitters
        - requireRealName
        - updatedAt
        - createdAt
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        submitterType:
          $ref: "#/components/schemas/TaskSubmitterType"
        defaultDeadline:
          type: integer
          format: int64
        creator:
          $ref: "#/components/schemas/User"
        deadline:
          type: integer
          format: int64
        participantLimit:
          type: integer
        resubmittable:
          type: boolean
        editable:
          type: boolean
        intro:
          type: string
        description:
          type: string
        space:
          $ref: "#/components/schemas/Space"
        category:
          $ref: "#/components/schemas/SpaceCategory"
        team:
          $ref: "#/components/schemas/Team"
        submissionSchema:
          type: array
          items:
            $ref: "#/components/schemas/TaskSubmissionSchemaEntry"
        submitters:
          type: object
          required:
            - total
            - examples
          properties:
            total:
              type: integer
            examples:
              type: array
              items:
                type: object
                required:
                  - avatarId
                properties:
                  avatarId:
                    type: integer
                    format: int64
        updatedAt:
          type: integer
          format: int64
        createdAt:
          type: integer
          format: int64
        participationEligibility:
          $ref: "#/components/schemas/ParticipationEligibility"
          nullable: true
          description: Detailed eligibility status for the current user and their teams regarding task participation (joining or submitting, based on query flags).
        submittable:
          type: boolean
          description: "Only has value when: 'querySubmitability' == true"
        submittableAsTeam:
          type: array
          items:
            $ref: "#/components/schemas/TeamSummary"
        rank:
          type: integer
        approved:
          $ref: "#/components/schemas/ApproveType"
        rejectReason:
          type: string
        joined:
          type: boolean
        joinedTeams:
          type: array
          items:
            $ref: "#/components/schemas/TeamSummary"
        userDeadline:
          type: integer
          format: int64
        topics:
          type: array
          items:
            $ref: "#/components/schemas/Topic"
        requireRealName:
          type: boolean
          description: Whether the task requires real name information
        minTeamSize:
          type: integer
          description: Minimum size of team that can join this task
        maxTeamSize:
          type: integer
          description: Maximum size of team that can join this task
    TaskSubmitterType:
      title: TaskSubmitterType
      enum:
        - USER
        - TEAM
    TaskSubmissionSchemaEntry:
      title: TaskSubmissionSchemaEntry
      type: object
      required:
        - prompt
        - type
      properties:
        prompt:
          type: string
        type:
          $ref: "#/components/schemas/TaskSubmissionType"
    TaskSubmissionType:
      title: TaskSubmissionType
      enum:
        - TEXT
        - FILE
    TaskSubmissionReview:
      title: TaskSubmissionReview
      type: object
      required:
        - reviewed
      properties:
        reviewed:
          type: boolean
        detail:
          type: object
          description: Has value only when 'reviewed' is true
          required:
            - accepted
            - score
            - comment
          properties:
            accepted:
              type: boolean
            score:
              type: integer
            comment:
              type: string
    TaskSubmissionContent:
      type: object
      properties:
        text:
          type: string
        attachmentId:
          type: integer
          format: int64
    TaskSubmission:
      title: TaskSubmission
      type: object
      required:
        - id
        - member
        - submitter
        - version
        - createdAt
        - updatedAt
        - content
      properties:
        id:
          type: integer
          format: int64
        member:
          $ref: "#/components/schemas/TaskParticipantSummary"
        submitter:
          $ref: "#/components/schemas/User"
        version:
          type: integer
        createdAt:
          type: integer
          format: int64
        updatedAt:
          type: integer
          format: int64
        content:
          type: array
          items:
            $ref: "#/components/schemas/TaskSubmissionContentEntry"
        review:
          $ref: "#/components/schemas/TaskSubmissionReview"
    TaskSubmissionContentEntry:
      title: TaskSubmissionContentEntry
      type: object
      required:
        - title
        - type
      properties:
        title:
          type: string
        type:
          $ref: "#/components/schemas/TaskSubmissionType"
        contentText:
          type: string
        contentAttachment:
          $ref: "#/components/schemas/Attachment"
    Team:
      title: Team
      type: object
      x-internal: false
      required:
        - id
        - intro
        - description
        - name
        - avatarId
        - owner
        - admins
        - members
        - updatedAt
        - createdAt
        - joined
      properties:
        id:
          type: integer
          format: int64
        intro:
          type: string
        description:
          type: string
        name:
          type: string
        avatarId:
          type: integer
          format: int64
        owner:
          $ref: "#/components/schemas/User"
        admins:
          type: object
          description: include owner
          required:
            - total
            - examples
          properties:
            total:
              type: integer
            examples:
              type: array
              items:
                $ref: "#/components/schemas/User"
        updatedAt:
          type: integer
          format: int64
        createdAt:
          type: integer
          format: int64
        members:
          type: object
          required:
            - total
            - examples
          properties:
            total:
              type: integer
            examples:
              type: array
              items:
                $ref: "#/components/schemas/User"
        joined:
          type: boolean
        role:
          $ref: "#/components/schemas/TeamMemberRoleType"
    TeamJoinRequestCreate:
      type: object
      properties:
        message:
          type: string
          description: Optional message accompanying the join request.
          example: "Hi, I'd like to join your team because..."
      additionalProperties: false
    TeamInvitationCreate:
      type: object
      required:
        - userId
      properties:
        userId:
          type: integer
          format: int64
          description: The ID of the user to invite.
          example: 12345
        role:
          $ref: '#/components/schemas/TeamMemberRoleType'
          description: The role to assign to the user upon joining (defaults to MEMBER if not provided).
        message:
          type: string
          description: Optional message accompanying the invitation.
          example: "We'd love for you to join our project team!"
      additionalProperties: false
    TeamMembershipApplication:
      title: TeamMembershipApplication
      type: object
      required:
        - id
        - user
        - team
        - initiator
        - type
        - status
        - role
        - message
        - createdAt
        - updatedAt
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the application/invitation.
          readOnly: true
        user:
          $ref: '#/components/schemas/User'
          description: The user who is the subject of the application (applicant or invitee).
        team:
          $ref: '#/components/schemas/TeamSummary'
          description: The team involved in the application.
        initiator:
          $ref: '#/components/schemas/User'
          description: The user who initiated the application (applicant or inviter).
        type:
          $ref: '#/components/schemas/ApplicationType'
        status:
          $ref: '#/components/schemas/ApplicationStatus'
        role:
          $ref: '#/components/schemas/TeamMemberRoleType'
          description: The role requested or offered.
        message:
          type: string
          nullable: true
          description: Message associated with the application.
        processedBy:
          $ref: '#/components/schemas/User'
          nullable: true
          description: The user who processed the application (approved, rejected, accepted, declined).
          readOnly: true
        processedAt:
          type: integer
          format: int64
          nullable: true
          description: Timestamp when the application was processed.
          readOnly: true
        createdAt:
          type: integer
          format: int64
          description: Timestamp when the application was created.
          readOnly: true
        updatedAt:
          type: integer
          format: int64
          description: Timestamp when the application was last updated.
          readOnly: true
    ApplicationType:
      type: string
      enum: [ REQUEST, INVITATION ]
      description: Type of the membership application. REQUEST = User asks to join. INVITATION = Team asks user to join.
    ApplicationStatus:
      type: string
      enum: [ PENDING, APPROVED, REJECTED, ACCEPTED, DECLINED, CANCELED ] # Removed EXPIRED for simplicity
      description: Current status of the application. PENDING=Waiting action, APPROVED=Request approved, REJECTED=Request rejected, ACCEPTED=Invitation accepted, DECLINED=Invitation declined, CANCELED=Canceled by initiator.
    TeamMemberRealNameStatus:
      title: TeamMemberRealNameStatus
      type: object
      required:
        - memberId
        - hasRealNameInfo
        - userName
      properties:
        memberId:
          type: integer
          format: int64
        hasRealNameInfo:
          type: boolean
        userName:
          type: string
    TeamSummary:
      title: TeamSummary
      type: object
      required:
        - id
        - name
        - intro
        - avatarId
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        intro:
          type: string
        avatarId:
          type: integer
          format: int64
        allMembersVerified:
          type: boolean
        memberRealNameStatus:
          type: array
          items:
            $ref: "#/components/schemas/TeamMemberRealNameStatus"
        updatedAt:
          type: integer
          format: int64
        createdAt:
          type: integer
          format: int64
    TaskTeamParticipantMemberSummary:
        title: TaskTeamParticipantMemberSummary
        type: object
        required:
          - name
          - avatarId
          - intro
          - isLeader
        properties:
          name:
            type: string
          avatarId:
            type: integer
            format: int64
          intro:
            type: string
          isLeader:
            type: boolean
          realNameInfo:
            $ref: "#/components/schemas/TaskParticipantRealNameInfo"
    TaskMembership:
      title: TaskMembership
      type: object
      required:
        - id
        - member
        - createdAt
        - updatedAt
        - approved
      properties:
        id:
          type: integer
          format: int64
        member:
          $ref: "#/components/schemas/TaskParticipantSummary"
        createdAt:
          type: integer
          format: int64
        updatedAt:
          type: integer
          format: int64
        deadline:
          type: integer
          format: int64
        approved:
          $ref: "#/components/schemas/ApproveType"
        realNameInfo:
          $ref: "#/components/schemas/TaskParticipantRealNameInfo"
        email:
          type: string
        phone:
          type: string
        applyReason:
          type: string
        personalAdvantage:
          type: string
        remark:
          type: string
        teamMembers:
          type: array
          items:
            $ref: "#/components/schemas/TaskTeamParticipantMemberSummary"
    TaskParticipationIdentity:
      title: TaskParticipationIdentity
      type: object
      required:
        - id
        - type
        - memberId
        - canSubmit
        - approved
      properties:
        id:
          type: integer
          format: int64
        type:
          $ref: "#/components/schemas/TaskSubmitterType"
        memberId:
          type: integer
          format: int64
        teamName:
          type: string
        canSubmit:
          type: boolean
        approved:
          $ref: "#/components/schemas/ApproveType"
    TaskParticipationInfo:
      title: TaskParticipationInfo
      type: object
      required:
        - hasParticipation
        - identities
      properties:
        hasParticipation:
          type: boolean
        identities:
          type: array
          items:
            $ref: "#/components/schemas/TaskParticipationIdentity"
    TaskParticipantRealNameInfo:
      title: TaskParticipantRealNameInfo
      type: object
      required:
        - realName
        - studentId
        - grade
        - major
        - className
      properties:
        realName:
          type: string
        studentId:
          type: string
        grade:
          type: string
        major:
          type: string
        className:
          type: string
    TaskParticipantSummary:
      title: TaskParticipantSummary
      type: object
      required:
        - id
        - intro
        - name
        - avatarId
      properties:
        id:
          type: integer
          format: int64
        intro:
          type: string
        name:
          type: string
        avatarId:
          type: integer
          format: int64
    TeamMember:
      properties:
        role:
          $ref: "#/components/schemas/TeamMemberRoleType"
        user:
          $ref: "#/components/schemas/User"
        hasRealNameInfo:
          type: boolean
        updatedAt:
          type: integer
          format: int64
        createdAt:
          type: integer
          format: int64
      required:
        - role
        - user
        - updatedAt
        - createdAt
      title: TeamMember
      type: object
    ApproveType:
      description: approve status of task or taskmembership
      enum:
        - APPROVED
        - DISAPPROVED
        - NONE
    AIConversation:
      type: object
      description: AI对话
      properties:
        id:
          type: integer
          format: int64
        conversationId:
          type: string
          description: 对话ID
        title:
          type: string
          description: 对话标题
        moduleType:
          type: string
          description: 模块类型
        contextId:
          type: integer
          format: int64
          description: 上下文ID
        ownerId:
          type: integer
          format: int64
          description: 所有者ID
        messageCount:
          type: integer
          description: 消息数量
        createdAt:
          type: string
          format: date-time
          description: 创建时间
        updatedAt:
          type: string
          format: date-time
          description: 更新时间
      required:
        - id
        - conversationId
        - title
        - moduleType
        - contextId
        - ownerId
        - messageCount
        - createdAt
        - updatedAt
    AIMessage:
      type: object
      description: AI消息
      properties:
        id:
          type: integer
          format: int64
          description: 消息ID
        conversationId:
          type: string
          description: 对话ID
        role:
          type: string
          description: 角色
        modelType:
          type: string
          description: 模型类型
        content:
          type: string
          description: 消息内容
        parentId:
          type: integer
          format: int64
          description: 父消息ID
        reasoningContent:
          type: string
          description: 推理内容
        reasoningTimeMs:
          type: integer
          format: int64
          description: 推理时间（毫秒）
        metadata:
          $ref: "#/components/schemas/AIMessageMetadata"
        createdAt:
          type: string
          format: date-time
          description: 创建时间
        tokensUsed:
          type: integer
          description: 消耗的token数量
          example: 100
        seuConsumed:
          type: number
          format: double
          description: 消耗的SEU数量
          example: 0.10
      required:
        - id
        - conversationId
        - role
        - modelType
        - content
        - createdAt
        - tokensUsed
        - seuConsumed
    AIMessageMetadata:
      type: object
      description: AI消息元数据
      properties:
        followupQuestions:
          type: array
          items:
            type: string
        references:
          type: array
          items:
            $ref: "#/components/schemas/ConversationReference"
    TaskAIAdvice:
      type: object
      properties:
        topic_summary:
          type: object
          properties:
            title:
              type: string
            key_points:
              type: array
              items:
                type: string
        knowledge_fields:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              followup_questions:
                type: array
                items:
                  type: string
            required:
              - name
              - description
              - followup_questions
        learning_paths:
          type: array
          items:
            type: object
            properties:
              stage:
                type: string
              description:
                type: string
              resources:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    type:
                      type: string
                    url:
                      type: string
                  required:
                    - name
                    - type
              followup_questions:
                type: array
                items:
                  type: string
            required:
              - name
              - description
              - followup_questions
        methodology:
          type: array
          items:
            type: object
            properties:
              step:
                type: string
              description:
                type: string
              estimated_time:
                type: string
              followup_questions:
                type: array
                items:
                  type: string
            required:
              - step
              - description
              - followup_questions
        team_tips:
          type: array
          items:
            type: object
            properties:
              role:
                type: string
              description:
                type: string
              collaboration_tips:
                type: string
              followup_questions:
                type: array
                items:
                  type: string
            required:
              - role
              - description
              - collaboration_tips
              - followup_questions
    TaskAIAdviceConversationContext:
      type: object
      properties:
        section:
          type: string
          enum: [ knowledge_fields, learning_paths, methodology, team_tips ]
        index:
          type: integer
          description: "章节中的具体条目索引(从0开始)"
    CreateTaskAIAdviceConversationRequest:
      type: object
      properties:
        question:
          type: string
          description: 用户问题
        context:
          $ref: "#/components/schemas/TaskAIAdviceConversationContext"
        modelType:
          type: string
          description: 可选的模型类型（例如：standard、reasoning）
          default: standard
        conversationId:
          type: string
          description: 可选的会话ID（用于继续对话）
        parentId:
          type: integer
          format: int64
          description: 可选的父消息ID（用于继续特定消息的对话）
      required:
        - question
    TaskAIAdviceConversationResponse:
      type: object
      properties:
        conversation:
          $ref: "#/components/schemas/TaskAIAdviceConversation"
        quota:
          $ref: "#/components/schemas/QuotaInfo"
      required:
        - conversation
        - quota
    ConversationGroupSummary:
      type: object
      properties:
        conversationId:
          type: string
          description: 会话组ID
        title:
          type: string
          description: 会话组标题
          example: 机器学习模型选择
        createdAt:
          type: string
          format: date-time
          description: 会话创建时间
        updatedAt:
          type: string
          format: date-time
          description: 会话最后更新时间
        messageCount:
          type: integer
          description: 会话中的消息数量
        latestMessage:
          $ref: "#/components/schemas/TaskAIAdviceConversation"
      required:
        - conversationId
        - createdAt
        - updatedAt
        - messageCount
    ConversationReference:
      type: object
      properties:
        url:
          type: string
        logo_url:
          type: string
        title:
          type: string
        summary:
          type: string
        publish_time:
          type: string
        extra:
          $ref: "#/components/schemas/ConversationReferenceExtra"
      required:
        - url
        - logo_url
        - title
        - summary
        - publish_time
        - extra
    ConversationReferenceExtra:
      type: object
      properties:
        rel_info:
          type: string
        freshness_info:
          type: string
        auth_info:
          type: string
        final_ref:
          type: string
      required:
        - rel_info
        - freshness_info
        - auth_info
        - final_ref
    TaskAIAdviceGenerationStatus:
      type: string
      enum: [ NONE, PENDING, PROCESSING, COMPLETED, FAILED ]
    TaskAIAdviceConversation:
      type: object
      required:
        - id
        - question
        - response
        - modelType
        - followupQuestions
        - createdAt
        - tokensUsed
        - seuConsumed
      properties:
        id:
          type: integer
          format: int64
          description: 对话ID
        question:
          type: string
          description: 用户问题
        response:
          type: string
          description: 回答内容
        modelType:
          type: string
          description: 模型类型
        reasoningContent:
          type: string
          description: 推理内容
        reasoningTimeMs:
          type: integer
          format: int64
          description: 推理所用时间（毫秒）
          example: 1000
        followupQuestions:
          type: array
          description: 后续问题
          items:
            type: string
        references:
          type: array
          description: 参考文献
          items:
            $ref: "#/components/schemas/ConversationReference"
        conversationId:
          type: string
          description: 会话ID
        parentId:
          type: integer
          format: int64
          description: 父消息ID
        createdAt:
          type: string
          format: date-time
          description: 会话创建时间
        tokensUsed:
          type: integer
          description: 消耗的token数量
          example: 100
        seuConsumed:
          type: number
          format: double
          description: 消耗的SEU数量
          example: 0.10
    TeamMemberRoleType:
      description: 小组角色
      enum:
        - OWNER
        - ADMIN
        - MEMBER
      type: string
    User:
      type: object
      required:
        - avatarId
        - id
        - intro
        - nickname
        - username
      properties:
        avatarId:
          description: 头像 id
          type: integer
          format: int64
        id:
          description: 用户 ID
          format: int64
          minimum: 1
          type: integer
        intro:
          default: This user has not set an introduction yet.
          description: 个人简介
          type: string
        nickname:
          description: 昵称
          example: 芝士
          type: string
        username:
          description: 用户名
          example: cheese
          type: string
    EncodedCursorPage:
      type: object
      description: 分页信息
      required:
        - pageStart
        - pageSize
        - hasMore
      properties:
        pageStart:
          type: string
          description: 该页第一个 item 的 cursor
        pageSize:
          type: integer
          description: 每页 item 数量
        hasMore:
          type: boolean
          description: 是否有下一页
        nextStart:
          type: string
          description: 下一页第一个 item 的 cursor
        total:
          type: integer
          description: 总 item 数量
    Page:
      type: object
      description: 分页信息
      required:
        - pageStart
        - pageSize
        - hasMore
      properties:
        pageStart:
          type: integer
          format: int64
          description: 该页第一个 item 的 ID
        pageSize:
          type: integer
          description: 每页 item 数量
        hasMore:
          type: boolean
          description: 是否有下一页
        nextStart:
          type: integer
          format: int64
          description: 下一页第一个 item 的 ID
        total:
          type: integer
          description: 总 item 数量
    Attachment:
      type: object
      description: 附件
      properties:
        id:
          type: integer
          description: 附件 ID
          format: int64
        type:
          type: string
          description: 类型
          enum:
            - image
            - video
            - audio
            - file
        url:
          type: string
          description: 访问 URL
        meta:
          oneOf:
            - $ref: "#/components/schemas/ImageMeta"
            - $ref: "#/components/schemas/VideoMeta"
            - $ref: "#/components/schemas/AudioMeta"
            - $ref: "#/components/schemas/FileMeta"
    ImageMeta:
      allOf:
        - $ref: "#/components/schemas/FileMeta"
        - type: object
          description: 图片元数据
          properties:
            height:
              type: integer
              description: 高度
            width:
              type: integer
              description: 宽度
            thumbnail:
              type: string
              description: 缩略图 URL
    VideoMeta:
      allOf:
        - $ref: "#/components/schemas/FileMeta"
        - type: object
          description: 视频元数据
          properties:
            duration:
              type: integer
              description: 时长
            height:
              type: integer
              description: 高度
            width:
              type: integer
              description: 宽度
            thumbnail:
              type: string
              description: 缩略图 URL
    AudioMeta:
      allOf:
        - $ref: "#/components/schemas/FileMeta"
        - type: object
          description: 音频元数据
          properties:
            duration:
              type: integer
              description: 时长
              format: int64
    FileMeta:
      type: object
      description: 文件元数据
      properties:
        size:
          type: integer
          description: 文件大小
          format: int64
        name:
          type: string
          description: 文件名称
        mime:
          type: string
          description: MIME 类型
        hash:
          type: string
          description: 文件哈希
    Topic:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      required:
        - id
        - name
    ResolvedEntityInfo:
      type: object
      description: Represents basic display information for a resolved entity (User, Team, Project, etc.).
      required:
        - id
        - type
        - name
      properties:
        id:
          type: string # Use string for ID for generality across different entity types
          description: Unique identifier of the resolved entity.
          example: "123"
        type:
          type: string
          description: The type of the entity (e.g., 'user', 'team', 'project'). Helps the client understand the context.
          example: "user"
        name:
          type: string
          description: The display name (e.g., nickname, team name, project title) of the entity.
          example: "Alice"
        url:
          type: string
          nullable: true
          description: A URL pointing to the entity's page or resource, if applicable.
          example: "/users/123"
        avatarUrl:
          type: string
          nullable: true
          description: A URL pointing to an avatar, logo, or icon for the entity, if applicable.
          example: "https://example.com/avatars/123.png"
        status:
          type: string
          nullable: true
          description: The status of the entity (e.g., 'online', 'offline', 'busy'), if applicable.
          example: "online"
    NotificationType:
      type: string
      enum:
        - MENTION
        - REPLY
        - REACTION
        - PROJECT_INVITE
        - DEADLINE_REMIND
        - TEAM_JOIN_REQUEST
        - TEAM_INVITATION
        - TEAM_REQUEST_APPROVED
        - TEAM_REQUEST_REJECTED
        - TEAM_INVITATION_ACCEPTED
        - TEAM_INVITATION_DECLINED
        - TEAM_INVITATION_CANCELED
        - TEAM_REQUEST_CANCELED
      description: The type category of the notification.
      example: TEAM_JOIN_REQUEST
    Notification:
      type: object
      description: Represents a notification with resolved entity information, ready for client-side rendering.
      required:
        - id
        - type
        - read
        - createdAt
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the notification.
          readOnly: true
          example: 101
        type:
          $ref: "#/components/schemas/NotificationType"
          example: TEAM_INVITATION
        read:
          type: boolean
          description: Indicates if the notification has been read by the recipient.
          example: false
        createdAt:
          type: integer
          format: int64
          description: Notification creation timestamp as epoch milliseconds (Unix timestamp * 1000).
          readOnly: true
          example: 1700000000000
        entities:
          type: object
          description: >
            Map containing information about entities related to this notification,
            resolved by the backend. Keys are logical roles (e.g., "actor", "team",
            "subjectUser", "targetItem"), and values are the resolved entity details.
            A value can be null if an entity reference in the metadata could not be resolved.
          nullable: true
          additionalProperties:
            $ref: "#/components/schemas/ResolvedEntityInfo"
            nullable: true
        contextMetadata:
          type: object
          nullable: true
          additionalProperties: { }
          description: >
            Map containing non-entity specific contextual data needed for rendering,
            extracted from the original notification metadata. Examples include the role offered
            in an invitation, the specific reaction emoji used, a custom message string, etc.
          example:
            role: "MEMBER"
            reactionEmoji: "👍"
            message: "Welcome aboard!"
            someOtherFlag: true
    Project:
      type: object
      required:
        - id
        - name
        - description
        - startDate
        - endDate
        - team
        - leader
        - members
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        colorCode:
          type: string
          pattern: "^#[0-9A-Fa-f]{6}$"
        startDate:
          type: integer
          format: int64
          description: 项目开始时间戳(毫秒)
        endDate:
          type: integer
          format: int64
          description: 项目结束时间戳(毫秒)
        parentId:
          type: integer
          format: int64
          description: 父项目ID
        team:
          $ref: "#/components/schemas/Team"
        leader:
          $ref: "#/components/schemas/User"
        externalTaskId:
          type: integer
          format: int64
        githubRepo:
          type: string
        content:
          type: string
        createdAt:
          type: integer
          format: int64
        updatedAt:
          type: integer
          format: int64
        members:
          type: object
          properties:
            count:
              type: integer
            examples:
              type: array
              items:
                $ref: "#/components/schemas/ProjectMembership"
        archived:
          type: boolean
        children:
          type: array
          items:
            $ref: "#/components/schemas/Project"
    ProjectMemberRole:
      type: string
      description: 项目成员角色
      enum:
        - LEADER
        - MEMBER
        - EXTERNAL
    ProjectMembership:
      type: object
      required:
        - id
        - user
        - role
        - createdAt
        - updatedAt
      properties:
        user:
          $ref: "#/components/schemas/User"
        role:
          $ref: "#/components/schemas/ProjectMemberRole"
        notes:
          type: string
          description: 项目成员备注
          default: ""
        createdAt:
          type: integer
          format: int64
        updatedAt:
          type: integer
          format: int64
    DiscussableModelType:
      type: string
      description: 可被讨论的模型类型
      enum: [ PROJECT ]
    Discussion:
      type: object
      required:
        - id
        - content
        - senderId
        - modelType
        - modelId
      properties:
        id:
          type: integer
          format: int64
        modelType:
          $ref: "#/components/schemas/DiscussableModelType"
        modelId:
          type: integer
          format: int64
          description: 模型ID
        content:
          type: string
        parentId:
          type: integer
          format: int64
          description: 回复的讨论ID
        sender:
          $ref: "#/components/schemas/User"
        mentionedUsers:
          type: array
          items:
            $ref: "#/components/schemas/User"
        reactions:
          type: array
          items:
            $ref: "#/components/schemas/DiscussionReactionSummary"
        subDiscussions:
          type: object
          properties:
            count:
              type: integer
              format: int64
            examples:
              type: array
              items:
                $ref: "#/components/schemas/Discussion"
        createdAt:
          type: integer
          format: int64
    Material:
      type: object
      description: 用户上传的资料（图片、视频、音频、文件等）
      properties:
        id:
          type: integer
          description: 资料 ID
          format: int64
        type:
          type: string
          description: 资料类型
          enum:
            - image
            - video
            - audio
            - file
        uploader:
          $ref: "#/components/schemas/User"
        created_at:
          type: integer
          description: 创建时间
          format: int64
        expires:
          type: integer
          description: 过期时间，永不过期则为 undefined
          format: int64
          nullable: true
        download_count:
          type: integer
          description: 下载数
          format: int64
        url:
          type: string
          description: 资料下载 URL
        meta:
          oneOf:
            - $ref: "#/components/schemas/ImageMeta"
            - $ref: "#/components/schemas/VideoMeta"
            - $ref: "#/components/schemas/AudioMeta"
            - $ref: "#/components/schemas/FileMeta"
    Knowledge:
      type: object
      required:
        - id
        - name
        - type
        - content
        - createdById
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        type:
          $ref: "#/components/schemas/KnowledgeType"
        content:
          type: string
        material:
          $ref: "#/components/schemas/Material"
        teamId:
          type: integer
          format: int64
          description: "知识条目所属的团队ID"
        projectId:
          type: integer
          format: int64
          description: "相关的项目ID（可选）"
        sourceType:
          type: string
          description: "知识来源类型：MANUAL或FROM_DISCUSSION"
        discussionId:
          type: integer
          format: int64
          description: "来源讨论ID（如果从讨论中添加）"
        labels:
          type: array
          items:
            type: string
        creator:
          $ref: "#/components/schemas/User"
        createdAt:
          type: integer
          format: int64
        updatedAt:
          type: integer
          format: int64
    QuotaInfo:
      type: object
      description: "用户AI配额信息"
      required:
        - remaining
        - total
        - reset_time
      properties:
        remaining:
          type: number
          format: double
          description: "剩余可用SEU"
        total:
          type: number
          format: double
          description: "总可用SEU"
        reset_time:
          type: string
          format: date-time
          description: "配额重置时间"
    CommonResponse:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    ReactionType:
      type: object
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
        name:
          type: string
        description:
          type: string
          nullable: true
        displayOrder:
          type: integer
          format: int32
        isActive:
          type: boolean
      required:
        - id
        - code
        - name
        - displayOrder
        - isActive
    DiscussionReactionSummary:
      type: object
      properties:
        reactionType:
          $ref: "#/components/schemas/ReactionType"
        count:
          type: integer
          format: int64
        hasReacted:
          type: boolean
      required:
        - reactionType
        - count
        - hasReacted
    PatchTaskMembershipRequest:
      type: object
      properties:
        deadline:
          type: integer
          format: int64
        approved:
          $ref: "#/components/schemas/ApproveType"
        rejectReason:
          type: string
        email:
          type: string
        phone:
          type: string
        applyReason:
          type: string
        personalAdvantage:
          type: string
        remark:
          type: string
  parameters:
    UserId:
      name: userId
      in: path
      required: true
      description: The unique identifier of the user.
      schema:
        type: integer
        format: int64
    TeamId:
      name: teamId
      in: path
      required: true
      description: The unique identifier of the team.
      schema:
        type: integer
        format: int64
    RequestId:
      name: requestId
      in: path
      required: true
      description: The unique identifier of the join request.
      schema:
        type: integer
        format: int64
    SpaceId:
      name: spaceId
      in: path
      required: true
      description: The unique identifier of the space.
      schema:
        type: integer
        format: int64
    TaskId:
      name: taskId
      in: path
      required: true
      description: The unique identifier of the task.
      schema:
        type: integer
        format: int64
    InvitationId:
      name: invitationId
      in: path
      required: true
      description: The unique identifier of the invitation.
      schema:
        type: integer
        format: int64
    NotificationId:
      name: notificationId
      in: path
      required: true
      description: The unique identifier of the notification.
      schema:
        type: integer
        format: int64
    ProjectId:
      name: projectId
      in: path
      required: true
      description: The unique identifier of the project.
      schema:
        type: integer
        format: int64
    DiscussionId:
      name: discussionId
      in: path
      required: true
      description: The unique identifier of the discussion.
      schema:
        type: integer
        format: int64
    EncodedCursorPageStart:
      name: pageStart
      in: query
      required: false
      description: The cursor of the first item in the page.
      schema:
        type: string
    PageStart:
      name: pageStart
      in: query
      required: false
      description: The ID of the first item in the page.
      schema:
        type: integer
        format: int64
    PageSize:
      name: pageSize
      in: query
      required: false
      description: The number of items per page.
      schema:
        type: integer
        default: 20
        minimum: 1
        maximum: 100
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT authentication token obtained through login.
security:
  - BearerAuth: [ ]
