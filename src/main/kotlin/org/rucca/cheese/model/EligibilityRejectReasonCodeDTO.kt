package org.rucca.cheese.model

import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonValue

/**
 * Values:
 * ALREADY_PARTICIPATING,PARTICIPANT_LIMIT_REACHED,TASK_NOT_APPROVED,DEADLINE_PASSED,USER_NOT_FOUND,USER_ACCOUNT_ISSUE,USER_MISSING_REAL_NAME,USER_RANK_NOT_HIGH_ENOUGH,TEAM_NOT_FOUND,TEAM_SIZE_MIN_NOT_MET,TEAM_SIZE_MAX_EXCEEDED,TEAM_MISSING_REQUIRED_INFO,TEAM_MEMBER_MISSING_REAL_NAME,TEAM_MEMBERS_NOT_VERIFIED,TEAM_MEMBER_RANK_NOT_HIGH_ENOUGH,INDIVIDUAL_PARTICIPATION_NOT_ALLOWED,TEAM_PARTICIPATION_NOT_ALLOWED,UNKNOWN
 */
enum class EligibilityRejectReasonCodeDTO(@get:JsonValue val value: kotlin.String) {

    ALREADY_PARTICIPATING("ALREADY_PARTICIPATING"),
    PARTICIPANT_LIMIT_REACHED("PARTICIPANT_LIMIT_REACHED"),
    TASK_NOT_APPROVED("TASK_NOT_APPROVED"),
    DEADLINE_PASSED("DEADLINE_PASSED"),
    USER_NOT_FOUND("USER_NOT_FOUND"),
    USER_ACCOUNT_ISSUE("USER_ACCOUNT_ISSUE"),
    USER_MISSING_REAL_NAME("USER_MISSING_REAL_NAME"),
    USER_RANK_NOT_HIGH_ENOUGH("USER_RANK_NOT_HIGH_ENOUGH"),
    TEAM_NOT_FOUND("TEAM_NOT_FOUND"),
    TEAM_SIZE_MIN_NOT_MET("TEAM_SIZE_MIN_NOT_MET"),
    TEAM_SIZE_MAX_EXCEEDED("TEAM_SIZE_MAX_EXCEEDED"),
    TEAM_MISSING_REQUIRED_INFO("TEAM_MISSING_REQUIRED_INFO"),
    TEAM_MEMBER_MISSING_REAL_NAME("TEAM_MEMBER_MISSING_REAL_NAME"),
    TEAM_MEMBERS_NOT_VERIFIED("TEAM_MEMBERS_NOT_VERIFIED"),
    TEAM_MEMBER_RANK_NOT_HIGH_ENOUGH("TEAM_MEMBER_RANK_NOT_HIGH_ENOUGH"),
    INDIVIDUAL_PARTICIPATION_NOT_ALLOWED("INDIVIDUAL_PARTICIPATION_NOT_ALLOWED"),
    TEAM_PARTICIPATION_NOT_ALLOWED("TEAM_PARTICIPATION_NOT_ALLOWED"),
    UNKNOWN("UNKNOWN");

    companion object {
        @JvmStatic
        @JsonCreator
        fun forValue(value: kotlin.String): EligibilityRejectReasonCodeDTO {
            return values().first { it -> it.value == value }
        }
    }
}
