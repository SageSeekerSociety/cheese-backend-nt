/*
 *  Description: This file is generated by IDEA in order to provide access
 *               to the materialbundles_relation table in the legacy service.
 *
 *  Author(s):
 *      Nictheboy Li    <nictheboy@outlook.com>
 *
 */

/*
 * DO NOT MODIFY THIS FILE
 *
 * Since cheese-backend is migrating from NestJS to Spring Boot,
 * some modules are still implemented in https://github.com/SageSeekerSociety/cheese-backend
 *
 * However, some tables are shared between the two implementations.
 * This file is one of them.
 *
 * The original project has an independent database schema, so if you modify this file,
 * the original project may not work properly.
 *
 */

/*
 * For the same reason, we recommend you take these tables as read-only,
 * that means, do not do any write operations (INSERT, UPDATE, DELETE) to these tables.
 *
 * We expect these tables to be maintained by the original project,
 * until we decide to fully migrate to Spring Boot.
 *
 */

package org.rucca.cheese.material

import jakarta.persistence.*
import java.io.Serializable
import java.util.*
import org.hibernate.Hibernate
import org.hibernate.annotations.OnDelete
import org.hibernate.annotations.OnDeleteAction
import org.springframework.data.jpa.repository.JpaRepository

@Embeddable
open class MaterialbundlesRelationId : Serializable {
    @Column(name = "material_id", nullable = false) open var materialId: Int? = null

    @Column(name = "bundle_id", nullable = false) open var bundleId: Int? = null

    override fun hashCode(): Int = Objects.hash(materialId, bundleId)

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other == null || Hibernate.getClass(this) != Hibernate.getClass(other)) return false

        other as MaterialbundlesRelationId

        return materialId == other.materialId && bundleId == other.bundleId
    }

    companion object {
        private const val serialVersionUID = -8881749827930881704L
    }
}

@Entity
@Table(name = "materialbundles_relation")
open class MaterialbundlesRelation {
    @EmbeddedId
    @SequenceGenerator(
        name = "materialbundles_relation_id_gen",
        sequenceName = "material_bundle_id_seq",
        allocationSize = 1,
    )
    open var id: MaterialbundlesRelationId? = null

    @MapsId("materialId")
    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @OnDelete(action = OnDeleteAction.RESTRICT)
    @JoinColumn(name = "material_id", nullable = false)
    open var material: Material? = null

    @MapsId("bundleId")
    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @OnDelete(action = OnDeleteAction.CASCADE)
    @JoinColumn(name = "bundle_id", nullable = false)
    open var bundle: MaterialBundle? = null
}

interface MaterialbundlesRelationRepository :
    JpaRepository<MaterialbundlesRelation, MaterialbundlesRelationId> {}
