/*
 *  Description: This file is generated by IDEA in order to provide access
 *               to the material table in the legacy service.
 *
 *  Author(s):
 *      Nictheboy Li    <nictheboy@outlook.com>
 *
 */

/*
 * DO NOT MODIFY THIS FILE
 *
 * Since cheese-backend is migrating from NestJS to Spring Boot,
 * some modules are still implemented in https://github.com/SageSeekerSociety/cheese-backend
 *
 * However, some tables are shared between the two implementations.
 * This file is one of them.
 *
 * The original project has an independent database schema, so if you modify this file,
 * the original project may not work properly.
 *
 */

/*
 * For the same reason, we recommend you take these tables as read-only,
 * that means, do not do any write operations (INSERT, UPDATE, DELETE) to these tables.
 *
 * We expect these tables to be maintained by the original project,
 * until we decide to fully migrate to Spring Boot.
 *
 */

package org.rucca.cheese.material

import jakarta.persistence.*
import java.time.OffsetDateTime
import org.hibernate.annotations.ColumnDefault
import org.hibernate.annotations.JdbcTypeCode
import org.hibernate.annotations.OnDelete
import org.hibernate.annotations.OnDeleteAction
import org.hibernate.type.SqlTypes
import org.rucca.cheese.common.persistent.IdType
import org.rucca.cheese.user.User
import org.springframework.data.jpa.repository.JpaRepository

enum class MaterialType {
    IMAGE,
    FILE,
    AUDIO,
    VIDEO;

    override fun toString(): String {
        return name.lowercase()
    }

    companion object {
        fun fromString(value: String): MaterialType {
            return entries.find { it.name.equals(value, ignoreCase = true) }
                ?: throw IllegalArgumentException("无效的 MaterialType: $value")
        }
    }
}

@Converter(autoApply = true)
class MaterialTypeConverter : AttributeConverter<MaterialType, String> {
    override fun convertToDatabaseColumn(attribute: MaterialType?): String? {
        return attribute?.toString()
    }

    override fun convertToEntityAttribute(dbData: String?): MaterialType? {
        return dbData?.let { MaterialType.fromString(it) }
    }
}

@Entity
@Table(name = "material")
open class Material {
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "material_id_gen")
    @SequenceGenerator(
        name = "material_id_gen",
        sequenceName = "material_id_seq",
        allocationSize = 1,
    )
    @Column(name = "id", nullable = false)
    open var id: Int? = null

    @Column(name = "url", nullable = false, length = Integer.MAX_VALUE) open var url: String? = null

    @Column(name = "name", nullable = false, length = Integer.MAX_VALUE)
    open var name: String? = null

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @OnDelete(action = OnDeleteAction.RESTRICT)
    @JoinColumn(name = "uploader_id", nullable = false)
    open var uploader: User? = null

    @ColumnDefault("CURRENT_TIMESTAMP")
    @Column(name = "created_at", nullable = false)
    open var createdAt: OffsetDateTime? = null

    @Column(name = "expires") open var expires: Int? = null

    @ColumnDefault("0")
    @Column(name = "download_count", nullable = false)
    open var downloadCount: Int? = null

    @JdbcTypeCode(SqlTypes.JSON)
    @Column(name = "meta", nullable = false)
    open var meta: Map<String, Any>? = null

    @Column(name = "type", nullable = false)
    @Convert(converter = MaterialTypeConverter::class)
    open var type: MaterialType? = null
}

interface MaterialRepository : JpaRepository<Material, IdType> {}
