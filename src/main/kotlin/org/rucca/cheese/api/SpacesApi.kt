/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package org.rucca.cheese.api

import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import javax.validation.Valid
import org.rucca.cheese.model.DeleteSpace200ResponseDTO
import org.rucca.cheese.model.GetSpace200ResponseDTO
import org.rucca.cheese.model.GetSpaces200ResponseDTO
import org.rucca.cheese.model.PatchSpaceAdminRequestDTO
import org.rucca.cheese.model.PatchSpaceRequestDTO
import org.rucca.cheese.model.PostSpaceAdminRequestDTO
import org.rucca.cheese.model.PostSpaceRequestDTO
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.validation.annotation.Validated
import org.springframework.web.bind.annotation.*

@RestController
@Validated
interface SpacesApi {

    @Operation(
        tags =
            [
                "default",
            ],
        summary = "Delete Space",
        operationId = "deleteSpace",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema = Schema(implementation = DeleteSpace200ResponseDTO::class)
                            )
                        ]
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")]
    )
    @RequestMapping(
        method = [RequestMethod.DELETE],
        value = ["/spaces/{spaceId}"],
        produces = ["application/json"]
    )
    fun deleteSpace(
        @Parameter(description = "Space ID", required = true)
        @PathVariable("spaceId")
        spaceId: kotlin.Long
    ): ResponseEntity<DeleteSpace200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags =
            [
                "default",
            ],
        summary = "Disqualify Space Admin",
        operationId = "deleteSpaceAdmin",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema = Schema(implementation = DeleteSpace200ResponseDTO::class)
                            )
                        ]
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")]
    )
    @RequestMapping(
        method = [RequestMethod.DELETE],
        value = ["/spaces/{spaceId}/managers/{userId}"],
        produces = ["application/json"]
    )
    fun deleteSpaceAdmin(
        @Parameter(description = "Space ID", required = true)
        @PathVariable("spaceId")
        spaceId: kotlin.Long,
        @Parameter(description = "Admin User ID", required = true)
        @PathVariable("userId")
        userId: kotlin.Long
    ): ResponseEntity<DeleteSpace200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags =
            [
                "default",
            ],
        summary = "Query Space",
        operationId = "getSpace",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [Content(schema = Schema(implementation = GetSpace200ResponseDTO::class))]
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")]
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/spaces/{spaceId}"],
        produces = ["application/json"]
    )
    fun getSpace(
        @Parameter(description = "Space ID", required = true)
        @PathVariable("spaceId")
        spaceId: kotlin.Long,
        @Parameter(
            description = "Query your rank in this space",
            schema = Schema(defaultValue = "false")
        )
        @Valid
        @RequestParam(value = "queryMyRank", required = false, defaultValue = "false")
        queryMyRank: kotlin.Boolean
    ): ResponseEntity<GetSpace200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags =
            [
                "default",
            ],
        summary = "Enumerate Spaces",
        operationId = "getSpaces",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [Content(schema = Schema(implementation = GetSpaces200ResponseDTO::class))]
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")]
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/spaces"],
        produces = ["application/json"]
    )
    fun getSpaces(
        @Parameter(
            description = "Query your rank in this space",
            schema = Schema(defaultValue = "false")
        )
        @Valid
        @RequestParam(value = "queryMyRank", required = false, defaultValue = "false")
        queryMyRank: kotlin.Boolean,
        @Parameter(description = "Page Size")
        @Valid
        @RequestParam(value = "page_size", required = false)
        pageSize: kotlin.Int?,
        @Parameter(description = "ID of First Element")
        @Valid
        @RequestParam(value = "page_start", required = false)
        pageStart: kotlin.Long?,
        @Parameter(
            description = "\"createdAt\" or \"updatedAt\"",
            schema = Schema(defaultValue = "createdAt")
        )
        @Valid
        @RequestParam(value = "sort_by", required = false, defaultValue = "createdAt")
        sortBy: kotlin.String,
        @Parameter(description = "\"asc\" or \"desc\"", schema = Schema(defaultValue = "desc"))
        @Valid
        @RequestParam(value = "sort_order", required = false, defaultValue = "desc")
        sortOrder: kotlin.String
    ): ResponseEntity<GetSpaces200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags =
            [
                "default",
            ],
        summary = "Update Space",
        operationId = "patchSpace",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [Content(schema = Schema(implementation = GetSpace200ResponseDTO::class))]
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")]
    )
    @RequestMapping(
        method = [RequestMethod.PATCH],
        value = ["/spaces/{spaceId}"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun patchSpace(
        @Parameter(description = "Space ID", required = true)
        @PathVariable("spaceId")
        spaceId: kotlin.Long,
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        patchSpaceRequestDTO: PatchSpaceRequestDTO
    ): ResponseEntity<GetSpace200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags =
            [
                "default",
            ],
        summary = "Update Space Admin Info",
        operationId = "patchSpaceAdmin",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [Content(schema = Schema(implementation = GetSpace200ResponseDTO::class))]
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")]
    )
    @RequestMapping(
        method = [RequestMethod.PATCH],
        value = ["/spaces/{spaceId}/managers/{userId}"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun patchSpaceAdmin(
        @Parameter(description = "Space ID", required = true)
        @PathVariable("spaceId")
        spaceId: kotlin.Long,
        @Parameter(description = "Admin User ID", required = true)
        @PathVariable("userId")
        userId: kotlin.Long,
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        patchSpaceAdminRequestDTO: PatchSpaceAdminRequestDTO
    ): ResponseEntity<GetSpace200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags =
            [
                "default",
            ],
        summary = "Create Space",
        operationId = "postSpace",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [Content(schema = Schema(implementation = GetSpace200ResponseDTO::class))]
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/spaces"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun postSpace(
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        postSpaceRequestDTO: PostSpaceRequestDTO
    ): ResponseEntity<GetSpace200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags =
            [
                "default",
            ],
        summary = "Add Space Admin",
        operationId = "postSpaceAdmin",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [Content(schema = Schema(implementation = GetSpace200ResponseDTO::class))]
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/spaces/{spaceId}/managers"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun postSpaceAdmin(
        @Parameter(description = "Space ID", required = true)
        @PathVariable("spaceId")
        spaceId: kotlin.Long,
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        postSpaceAdminRequestDTO: PostSpaceAdminRequestDTO
    ): ResponseEntity<GetSpace200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
