/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)
 * (7.10.0). https://openapi-generator.tech Do not edit the class manually.
 */
package org.rucca.cheese.api

import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import javax.validation.Valid
import org.rucca.cheese.model.CreateSpaceCategory201ResponseDTO
import org.rucca.cheese.model.CreateSpaceCategoryRequestDTO
import org.rucca.cheese.model.DeleteSpace200ResponseDTO
import org.rucca.cheese.model.GetSpace200ResponseDTO
import org.rucca.cheese.model.GetSpaces200ResponseDTO
import org.rucca.cheese.model.ListSpaceCategories200ResponseDTO
import org.rucca.cheese.model.PatchSpaceAdminRequestDTO
import org.rucca.cheese.model.PatchSpaceRequestDTO
import org.rucca.cheese.model.PostSpaceAdminRequestDTO
import org.rucca.cheese.model.PostSpaceRequestDTO
import org.rucca.cheese.model.UpdateSpaceCategoryRequestDTO
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.validation.annotation.Validated
import org.springframework.web.bind.annotation.*

@RestController
@Validated
interface SpacesApi {

    @Operation(
        tags = ["Space Categories"],
        summary = "Archive a category",
        operationId = "archiveSpaceCategory",
        description =
            """Marks a category as archived. Tasks within it remain associated. Cannot archive the default category.""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description =
                        "Category archived successfully. Returns updated category details.",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(
                                        implementation = CreateSpaceCategory201ResponseDTO::class
                                    )
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/spaces/{spaceId}/categories/{categoryId}/archive"],
        produces = ["application/json"],
    )
    fun archiveSpaceCategory(
        @Parameter(description = "", required = true) @PathVariable("spaceId") spaceId: kotlin.Long,
        @Parameter(description = "", required = true)
        @PathVariable("categoryId")
        categoryId: kotlin.Long,
    ): ResponseEntity<CreateSpaceCategory201ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["Space Categories"],
        summary = "Create a category in a space",
        operationId = "createSpaceCategory",
        description =
            """Creates a new category within the specified space. Requires admin privileges for the space.""",
        responses =
            [
                ApiResponse(
                    responseCode = "201",
                    description = "Category created successfully.",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(
                                        implementation = CreateSpaceCategory201ResponseDTO::class
                                    )
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/spaces/{spaceId}/categories"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    fun createSpaceCategory(
        @Parameter(description = "ID of the space to manage categories for.", required = true)
        @PathVariable("spaceId")
        spaceId: kotlin.Long,
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        createSpaceCategoryRequestDTO: CreateSpaceCategoryRequestDTO,
    ): ResponseEntity<CreateSpaceCategory201ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Delete Space",
        operationId = "deleteSpace",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema = Schema(implementation = DeleteSpace200ResponseDTO::class)
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.DELETE],
        value = ["/spaces/{spaceId}"],
        produces = ["application/json"],
    )
    fun deleteSpace(
        @Parameter(description = "Space ID", required = true)
        @PathVariable("spaceId")
        spaceId: kotlin.Long
    ): ResponseEntity<DeleteSpace200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Disqualify Space Admin",
        operationId = "deleteSpaceAdmin",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema = Schema(implementation = DeleteSpace200ResponseDTO::class)
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.DELETE],
        value = ["/spaces/{spaceId}/managers/{userId}"],
        produces = ["application/json"],
    )
    fun deleteSpaceAdmin(
        @Parameter(description = "Space ID", required = true)
        @PathVariable("spaceId")
        spaceId: kotlin.Long,
        @Parameter(description = "Admin User ID", required = true)
        @PathVariable("userId")
        userId: kotlin.Long,
    ): ResponseEntity<DeleteSpace200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["Space Categories"],
        summary = "Delete a category",
        operationId = "deleteSpaceCategory",
        description =
            """Soft-deletes a category ONLY if it contains no tasks. For categories with tasks, use the archive endpoint. Cannot delete the default category.""",
        responses =
            [ApiResponse(responseCode = "204", description = "Category deleted successfully.")],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.DELETE],
        value = ["/spaces/{spaceId}/categories/{categoryId}"],
    )
    fun deleteSpaceCategory(
        @Parameter(description = "ID of the space the category belongs to.", required = true)
        @PathVariable("spaceId")
        spaceId: kotlin.Long,
        @Parameter(
            description = "ID of the category to retrieve, update, or delete.",
            required = true,
        )
        @PathVariable("categoryId")
        categoryId: kotlin.Long,
    ): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Query Space",
        operationId = "getSpace",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [Content(schema = Schema(implementation = GetSpace200ResponseDTO::class))],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/spaces/{spaceId}"],
        produces = ["application/json"],
    )
    fun getSpace(
        @Parameter(description = "Space ID", required = true)
        @PathVariable("spaceId")
        spaceId: kotlin.Long,
        @Parameter(
            description = "Query your rank in this space",
            schema = Schema(defaultValue = "false"),
        )
        @Valid
        @RequestParam(value = "queryMyRank", required = false, defaultValue = "false")
        queryMyRank: kotlin.Boolean,
    ): ResponseEntity<GetSpace200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["Space Categories"],
        summary = "Get a specific category",
        operationId = "getSpaceCategory",
        description = """Retrieves details of a specific category within a space.""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "Category details.",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(
                                        implementation = CreateSpaceCategory201ResponseDTO::class
                                    )
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/spaces/{spaceId}/categories/{categoryId}"],
        produces = ["application/json"],
    )
    fun getSpaceCategory(
        @Parameter(description = "ID of the space the category belongs to.", required = true)
        @PathVariable("spaceId")
        spaceId: kotlin.Long,
        @Parameter(
            description = "ID of the category to retrieve, update, or delete.",
            required = true,
        )
        @PathVariable("categoryId")
        categoryId: kotlin.Long,
    ): ResponseEntity<CreateSpaceCategory201ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Enumerate Spaces",
        operationId = "getSpaces",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [Content(schema = Schema(implementation = GetSpaces200ResponseDTO::class))],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/spaces"],
        produces = ["application/json"],
    )
    fun getSpaces(
        @Parameter(
            description = "Query your rank in this space",
            schema = Schema(defaultValue = "false"),
        )
        @Valid
        @RequestParam(value = "queryMyRank", required = false, defaultValue = "false")
        queryMyRank: kotlin.Boolean,
        @Parameter(description = "Page Size")
        @Valid
        @RequestParam(value = "page_size", required = false)
        pageSize: kotlin.Int?,
        @Parameter(description = "ID of First Element")
        @Valid
        @RequestParam(value = "page_start", required = false)
        pageStart: kotlin.Long?,
        @Parameter(
            description = "\"createdAt\" or \"updatedAt\"",
            schema = Schema(defaultValue = "createdAt"),
        )
        @Valid
        @RequestParam(value = "sort_by", required = false, defaultValue = "createdAt")
        sortBy: kotlin.String,
        @Parameter(description = "\"asc\" or \"desc\"", schema = Schema(defaultValue = "desc"))
        @Valid
        @RequestParam(value = "sort_order", required = false, defaultValue = "desc")
        sortOrder: kotlin.String,
    ): ResponseEntity<GetSpaces200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["Space Categories"],
        summary = "List categories in a space",
        operationId = "listSpaceCategories",
        description =
            """Retrieves a list of all categories belonging to the specified space, ordered by displayOrder and name.""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "A list of categories.",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(
                                        implementation = ListSpaceCategories200ResponseDTO::class
                                    )
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/spaces/{spaceId}/categories"],
        produces = ["application/json"],
    )
    fun listSpaceCategories(
        @Parameter(description = "ID of the space to manage categories for.", required = true)
        @PathVariable("spaceId")
        spaceId: kotlin.Long,
        @Parameter(
            description =
                "Set to true to include archived categories in the results. Defaults to false.",
            schema = Schema(defaultValue = "false"),
        )
        @Valid
        @RequestParam(value = "includeArchived", required = false, defaultValue = "false")
        includeArchived: kotlin.Boolean,
    ): ResponseEntity<ListSpaceCategories200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Update Space",
        operationId = "patchSpace",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [Content(schema = Schema(implementation = GetSpace200ResponseDTO::class))],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.PATCH],
        value = ["/spaces/{spaceId}"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    fun patchSpace(
        @Parameter(description = "Space ID", required = true)
        @PathVariable("spaceId")
        spaceId: kotlin.Long,
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        patchSpaceRequestDTO: PatchSpaceRequestDTO,
    ): ResponseEntity<GetSpace200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Update Space Admin Info",
        operationId = "patchSpaceAdmin",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [Content(schema = Schema(implementation = GetSpace200ResponseDTO::class))],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.PATCH],
        value = ["/spaces/{spaceId}/managers/{userId}"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    fun patchSpaceAdmin(
        @Parameter(description = "Space ID", required = true)
        @PathVariable("spaceId")
        spaceId: kotlin.Long,
        @Parameter(description = "Admin User ID", required = true)
        @PathVariable("userId")
        userId: kotlin.Long,
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        patchSpaceAdminRequestDTO: PatchSpaceAdminRequestDTO,
    ): ResponseEntity<GetSpace200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Create Space",
        operationId = "postSpace",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [Content(schema = Schema(implementation = GetSpace200ResponseDTO::class))],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/spaces"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    fun postSpace(
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        postSpaceRequestDTO: PostSpaceRequestDTO
    ): ResponseEntity<GetSpace200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Add Space Admin",
        operationId = "postSpaceAdmin",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [Content(schema = Schema(implementation = GetSpace200ResponseDTO::class))],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/spaces/{spaceId}/managers"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    fun postSpaceAdmin(
        @Parameter(description = "Space ID", required = true)
        @PathVariable("spaceId")
        spaceId: kotlin.Long,
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        postSpaceAdminRequestDTO: PostSpaceAdminRequestDTO,
    ): ResponseEntity<GetSpace200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["Space Categories"],
        summary = "Unarchive a category",
        operationId = "unarchiveSpaceCategory",
        description = """Removes the archived status from a category, making it active again.""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description =
                        "Category unarchived successfully. Returns updated category details.",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(
                                        implementation = CreateSpaceCategory201ResponseDTO::class
                                    )
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.DELETE],
        value = ["/spaces/{spaceId}/categories/{categoryId}/archive"],
        produces = ["application/json"],
    )
    fun unarchiveSpaceCategory(
        @Parameter(description = "", required = true) @PathVariable("spaceId") spaceId: kotlin.Long,
        @Parameter(description = "", required = true)
        @PathVariable("categoryId")
        categoryId: kotlin.Long,
    ): ResponseEntity<CreateSpaceCategory201ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["Space Categories"],
        summary = "Update a category",
        operationId = "updateSpaceCategory",
        description =
            """Updates specific fields of a category. Requires admin privileges for the space.""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "Category updated successfully.",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(
                                        implementation = CreateSpaceCategory201ResponseDTO::class
                                    )
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.PATCH],
        value = ["/spaces/{spaceId}/categories/{categoryId}"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    fun updateSpaceCategory(
        @Parameter(description = "ID of the space the category belongs to.", required = true)
        @PathVariable("spaceId")
        spaceId: kotlin.Long,
        @Parameter(
            description = "ID of the category to retrieve, update, or delete.",
            required = true,
        )
        @PathVariable("categoryId")
        categoryId: kotlin.Long,
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        updateSpaceCategoryRequestDTO: UpdateSpaceCategoryRequestDTO,
    ): ResponseEntity<CreateSpaceCategory201ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
