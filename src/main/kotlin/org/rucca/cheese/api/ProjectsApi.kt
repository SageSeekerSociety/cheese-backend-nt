/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)
 * (7.10.0). https://openapi-generator.tech Do not edit the class manually.
 */
package org.rucca.cheese.api

import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import javax.validation.Valid
import javax.validation.constraints.NotNull
import org.rucca.cheese.model.CreateProject201ResponseDTO
import org.rucca.cheese.model.CreateProjectRequestDTO
import org.rucca.cheese.model.GetProject200ResponseDTO
import org.rucca.cheese.model.GetProjectMembers200ResponseDTO
import org.rucca.cheese.model.GetProjects200ResponseDTO
import org.rucca.cheese.model.PatchProjectRequestDTO
import org.rucca.cheese.model.PostProjectMember201ResponseDTO
import org.rucca.cheese.model.PostProjectMemberRequestDTO
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.validation.annotation.Validated
import org.springframework.web.bind.annotation.*

@RestController
@Validated
interface ProjectsApi {

    @Operation(
        tags = ["default"],
        summary = "Create Project",
        operationId = "createProject",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "201",
                    description = "Created",
                    content =
                        [
                            Content(
                                schema = Schema(implementation = CreateProject201ResponseDTO::class)
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/projects"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    fun createProject(
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        createProjectRequestDTO: CreateProjectRequestDTO
    ): ResponseEntity<CreateProject201ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Delete Project",
        operationId = "deleteProject",
        description = """""",
        responses = [ApiResponse(responseCode = "204", description = "No Content")],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(method = [RequestMethod.DELETE], value = ["/projects/{projectId}"])
    fun deleteProject(
        @Parameter(description = "项目ID", required = true)
        @PathVariable("projectId")
        projectId: kotlin.Long
    ): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Remove Project Member",
        operationId = "deleteProjectMember",
        description = """""",
        responses = [ApiResponse(responseCode = "204", description = "No Content")],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.DELETE],
        value = ["/projects/{projectId}/members/{userId}"],
    )
    fun deleteProjectMember(
        @Parameter(description = "项目ID", required = true)
        @PathVariable("projectId")
        projectId: kotlin.Long,
        @Parameter(description = "用户ID", required = true)
        @PathVariable("userId")
        userId: kotlin.Long,
    ): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Query Project",
        operationId = "getProject",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [Content(schema = Schema(implementation = GetProject200ResponseDTO::class))],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/projects/{projectId}"],
        produces = ["application/json"],
    )
    fun getProject(
        @Parameter(description = "项目ID", required = true)
        @PathVariable("projectId")
        projectId: kotlin.Long
    ): ResponseEntity<GetProject200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Enumerate Project Members",
        operationId = "getProjectMembers",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(implementation = GetProjectMembers200ResponseDTO::class)
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/projects/{projectId}/members"],
        produces = ["application/json"],
    )
    fun getProjectMembers(
        @Parameter(description = "项目ID", required = true)
        @PathVariable("projectId")
        projectId: kotlin.Long,
        @Parameter(description = "起始ID")
        @Valid
        @RequestParam(value = "page_start", required = false)
        pageStart: kotlin.Long?,
        @Parameter(description = "每页数量 (默认20)", schema = Schema(defaultValue = "20"))
        @Valid
        @RequestParam(value = "page_size", required = false, defaultValue = "20")
        pageSize: kotlin.Int,
    ): ResponseEntity<GetProjectMembers200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "List Projects",
        operationId = "getProjects",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema = Schema(implementation = GetProjects200ResponseDTO::class)
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/projects"],
        produces = ["application/json"],
    )
    fun getProjects(
        @NotNull
        @Parameter(description = "属于的小队 ID", required = true)
        @Valid
        @RequestParam(value = "team_id", required = true)
        teamId: kotlin.Long,
        @Parameter(description = "父项目ID (可选)")
        @Valid
        @RequestParam(value = "parent_id", required = false)
        parentId: kotlin.Long?,
        @Parameter(description = "负责人ID (可选)")
        @Valid
        @RequestParam(value = "leader_id", required = false)
        leaderId: kotlin.Long?,
        @Parameter(description = "成员ID (可选)")
        @Valid
        @RequestParam(value = "member_id", required = false)
        memberId: kotlin.Long?,
        @Parameter(description = "是否归档")
        @Valid
        @RequestParam(value = "archived", required = false)
        archived: kotlin.Boolean?,
    ): ResponseEntity<GetProjects200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Update Project",
        operationId = "patchProject",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [Content(schema = Schema(implementation = GetProject200ResponseDTO::class))],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.PATCH],
        value = ["/projects/{projectId}"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    fun patchProject(
        @Parameter(description = "项目ID", required = true)
        @PathVariable("projectId")
        projectId: kotlin.Long,
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        patchProjectRequestDTO: PatchProjectRequestDTO,
    ): ResponseEntity<GetProject200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Add Project Member",
        operationId = "postProjectMember",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "201",
                    description = "Created",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(implementation = PostProjectMember201ResponseDTO::class)
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/projects/{projectId}/members"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    fun postProjectMember(
        @Parameter(description = "项目ID", required = true)
        @PathVariable("projectId")
        projectId: kotlin.Long,
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        postProjectMemberRequestDTO: PostProjectMemberRequestDTO,
    ): ResponseEntity<PostProjectMember201ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
