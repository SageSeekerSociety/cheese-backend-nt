/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)
 * (7.10.0). https://openapi-generator.tech Do not edit the class manually.
 */
package org.rucca.cheese.api

import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import javax.validation.Valid
import javax.validation.constraints.NotNull
import kotlin.collections.List
import org.rucca.cheese.model.ApproveTypeDTO
import org.rucca.cheese.model.CommonResponseDTO
import org.rucca.cheese.model.CreateTaskAIAdviceConversationRequestDTO
import org.rucca.cheese.model.CreateTaskAiAdviceConversation200ResponseDTO
import org.rucca.cheese.model.GetTask200ResponseDTO
import org.rucca.cheese.model.GetTaskAiAdvice200ResponseDTO
import org.rucca.cheese.model.GetTaskAiAdvice400ResponseDTO
import org.rucca.cheese.model.GetTaskAiAdviceConversation200ResponseDTO
import org.rucca.cheese.model.GetTaskAiAdviceConversationsGrouped200ResponseDTO
import org.rucca.cheese.model.GetTaskAiAdviceStatus200ResponseDTO
import org.rucca.cheese.model.GetTaskParticipants200ResponseDTO
import org.rucca.cheese.model.GetTaskSubmissions200ResponseDTO
import org.rucca.cheese.model.GetTasks200ResponseDTO
import org.rucca.cheese.model.PatchTaskMembership200ResponseDTO
import org.rucca.cheese.model.PatchTaskMembershipRequestDTO
import org.rucca.cheese.model.PatchTaskRequestDTO
import org.rucca.cheese.model.PatchTaskSubmissionReviewRequestDTO
import org.rucca.cheese.model.PostTaskParticipant200ResponseDTO
import org.rucca.cheese.model.PostTaskParticipantRequestDTO
import org.rucca.cheese.model.PostTaskRequestDTO
import org.rucca.cheese.model.PostTaskSubmission200ResponseDTO
import org.rucca.cheese.model.PostTaskSubmissionRequestInnerDTO
import org.rucca.cheese.model.PostTaskSubmissionReview200ResponseDTO
import org.rucca.cheese.model.PostTaskSubmissionReviewRequestDTO
import org.rucca.cheese.model.RequestTaskAiAdvice200ResponseDTO
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.validation.annotation.Validated
import org.springframework.web.bind.annotation.*

@RestController
@Validated
interface TasksApi {

    @Operation(
        tags = ["default"],
        summary = "Create AI Advice Conversation",
        operationId = "createTaskAiAdviceConversation",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(
                                        implementation =
                                            CreateTaskAiAdviceConversation200ResponseDTO::class
                                    )
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/tasks/{taskId}/ai-advice/conversations"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    fun createTaskAiAdviceConversation(
        @Parameter(description = "", required = true) @PathVariable("taskId") taskId: kotlin.Long,
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        createTaskAIAdviceConversationRequestDTO: CreateTaskAIAdviceConversationRequestDTO,
    ): ResponseEntity<CreateTaskAiAdviceConversation200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Delete Task",
        operationId = "deleteTask",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content = [Content(schema = Schema(implementation = CommonResponseDTO::class))],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.DELETE],
        value = ["/tasks/{taskId}"],
        produces = ["application/json"],
    )
    fun deleteTask(
        @Parameter(description = "Task ID", required = true)
        @PathVariable("taskId")
        taskId: kotlin.Long
    ): ResponseEntity<CommonResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Delete AI Advice Conversation",
        operationId = "deleteTaskAiAdviceConversation",
        description = """""",
        responses = [ApiResponse(responseCode = "204", description = "No Content")],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.DELETE],
        value = ["/tasks/{taskId}/ai-advice/conversations/{conversationId}"],
    )
    fun deleteTaskAiAdviceConversation(
        @Parameter(description = "", required = true) @PathVariable("taskId") taskId: kotlin.Long,
        @Parameter(description = "", required = true)
        @PathVariable("conversationId")
        conversationId: kotlin.String,
    ): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Leave Task",
        operationId = "deleteTaskParticipant",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(
                                        implementation = PostTaskParticipant200ResponseDTO::class
                                    )
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.DELETE],
        value = ["/tasks/{taskId}/participants"],
        produces = ["application/json"],
    )
    fun deleteTaskParticipant(
        @Parameter(description = "Task ID", required = true)
        @PathVariable("taskId")
        taskId: kotlin.Long,
        @NotNull
        @Parameter(description = "Member ID", required = true)
        @Valid
        @RequestParam(value = "member", required = true)
        member: kotlin.Long,
    ): ResponseEntity<PostTaskParticipant200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Revert Review Submission",
        operationId = "deleteTaskSubmissionReview",
        description = """""",
        responses = [ApiResponse(responseCode = "200", description = "OK")],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.DELETE],
        value = ["/tasks/submissions/{submissionId}/review"],
    )
    fun deleteTaskSubmissionReview(
        @Parameter(description = "Task Submission ID", required = true)
        @PathVariable("submissionId")
        submissionId: kotlin.Long
    ): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Query Task",
        operationId = "getTask",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [Content(schema = Schema(implementation = GetTask200ResponseDTO::class))],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/tasks/{taskId}"],
        produces = ["application/json"],
    )
    fun getTask(
        @Parameter(description = "Task ID", required = true)
        @PathVariable("taskId")
        taskId: kotlin.Long,
        @Parameter(
            description = "Query the space that the task belongs to",
            schema = Schema(defaultValue = "false"),
        )
        @Valid
        @RequestParam(value = "querySpace", required = false, defaultValue = "false")
        querySpace: kotlin.Boolean,
        @Parameter(
            description = "Query the team that the task belongs to",
            schema = Schema(defaultValue = "false"),
        )
        @Valid
        @RequestParam(value = "queryTeam", required = false, defaultValue = "false")
        queryTeam: kotlin.Boolean,
        @Parameter(
            description =
                "Check whether current user can join this task or using one of his/her team",
            schema = Schema(defaultValue = "false"),
        )
        @Valid
        @RequestParam(value = "queryJoinability", required = false, defaultValue = "false")
        queryJoinability: kotlin.Boolean,
        @Parameter(
            description =
                "Check whether current user can submit this task or using one of his/her team",
            schema = Schema(defaultValue = "false"),
        )
        @Valid
        @RequestParam(value = "querySubmittability", required = false, defaultValue = "false")
        querySubmittability: kotlin.Boolean,
        @Parameter(
            description = "Check whether current user has joined this task",
            schema = Schema(defaultValue = "false"),
        )
        @Valid
        @RequestParam(value = "queryJoined", required = false, defaultValue = "false")
        queryJoined: kotlin.Boolean,
        @Parameter(
            description = "Check whether current user has joined this task and has been approved",
            schema = Schema(defaultValue = "false"),
        )
        @Valid
        @RequestParam(value = "queryJoinedApproved", required = false, defaultValue = "false")
        queryJoinedApproved: kotlin.Boolean,
        @Parameter(
            description =
                "Check whether current user has joined this task and has been disapproved",
            schema = Schema(defaultValue = "false"),
        )
        @Valid
        @RequestParam(value = "queryJoinedDisapproved", required = false, defaultValue = "false")
        queryJoinedDisapproved: kotlin.Boolean,
        @Parameter(
            description =
                "Check whether current user has joined this task and has not been approved or disapproved",
            schema = Schema(defaultValue = "false"),
        )
        @Valid
        @RequestParam(
            value = "queryJoinedNotApprovedOrDisapproved",
            required = false,
            defaultValue = "false",
        )
        queryJoinedNotApprovedOrDisapproved: kotlin.Boolean,
        @Parameter(description = "Query task's topics", schema = Schema(defaultValue = "false"))
        @Valid
        @RequestParam(value = "queryTopics", required = false, defaultValue = "false")
        queryTopics: kotlin.Boolean,
    ): ResponseEntity<GetTask200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Get AI Advice",
        operationId = "getTaskAiAdvice",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(implementation = GetTaskAiAdvice200ResponseDTO::class)
                            )
                        ],
                ),
                ApiResponse(
                    responseCode = "400",
                    description = "Bad Request",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(implementation = GetTaskAiAdvice400ResponseDTO::class)
                            )
                        ],
                ),
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/tasks/{taskId}/ai-advice"],
        produces = ["application/json"],
    )
    fun getTaskAiAdvice(
        @Parameter(description = "Task ID", required = true)
        @PathVariable("taskId")
        taskId: kotlin.Long
    ): ResponseEntity<GetTaskAiAdvice200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["Task AI Advice"],
        summary = "获取指定会话ID的所有对话",
        operationId = "getTaskAiAdviceConversation",
        description = """获取特定会话ID下的所有对话记录""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(
                                        implementation =
                                            GetTaskAiAdviceConversation200ResponseDTO::class
                                    )
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/tasks/{taskId}/ai-advice/conversations/{conversationId}"],
        produces = ["application/json"],
    )
    fun getTaskAiAdviceConversation(
        @Parameter(description = "", required = true) @PathVariable("taskId") taskId: kotlin.Long,
        @Parameter(description = "", required = true)
        @PathVariable("conversationId")
        conversationId: kotlin.String,
    ): ResponseEntity<GetTaskAiAdviceConversation200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["Task AI Advice"],
        summary = "获取按会话ID分组的对话历史",
        operationId = "getTaskAiAdviceConversationsGrouped",
        description = """获取指定任务的所有对话，按会话ID分组""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(
                                        implementation =
                                            GetTaskAiAdviceConversationsGrouped200ResponseDTO::class
                                    )
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/tasks/{taskId}/ai-advice/conversations/grouped"],
        produces = ["application/json"],
    )
    fun getTaskAiAdviceConversationsGrouped(
        @Parameter(description = "", required = true) @PathVariable("taskId") taskId: kotlin.Long
    ): ResponseEntity<GetTaskAiAdviceConversationsGrouped200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Get AI Advice Generation Status",
        operationId = "getTaskAiAdviceStatus",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(
                                        implementation = GetTaskAiAdviceStatus200ResponseDTO::class
                                    )
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/tasks/{taskId}/ai-advice/status"],
        produces = ["application/json"],
    )
    fun getTaskAiAdviceStatus(
        @Parameter(description = "Task ID", required = true)
        @PathVariable("taskId")
        taskId: kotlin.Long
    ): ResponseEntity<GetTaskAiAdviceStatus200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Get Participants",
        operationId = "getTaskParticipants",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(
                                        implementation = GetTaskParticipants200ResponseDTO::class
                                    )
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/tasks/{taskId}/participants"],
        produces = ["application/json"],
    )
    fun getTaskParticipants(
        @Parameter(description = "Task ID", required = true)
        @PathVariable("taskId")
        taskId: kotlin.Long,
        @Parameter(
            description = "approve status",
            schema = Schema(allowableValues = ["APPROVED", "DISAPPROVED", "NONE"]),
        )
        @Valid
        @RequestParam(value = "approved", required = false)
        approved: ApproveTypeDTO?,
        @Parameter(description = "Query real name info", schema = Schema(defaultValue = "false"))
        @Valid
        @RequestParam(value = "queryRealNameInfo", required = false, defaultValue = "false")
        queryRealNameInfo: kotlin.Boolean,
    ): ResponseEntity<GetTaskParticipants200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Enumerate Submissions",
        operationId = "getTaskSubmissions",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(implementation = GetTaskSubmissions200ResponseDTO::class)
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/tasks/{taskId}/submissions"],
        produces = ["application/json"],
    )
    fun getTaskSubmissions(
        @Parameter(description = "Task ID", required = true)
        @PathVariable("taskId")
        taskId: kotlin.Long,
        @Parameter(description = "Submitter's User/Team ID")
        @Valid
        @RequestParam(value = "member", required = false)
        member: kotlin.Long?,
        @Parameter(description = "Include All Versions", schema = Schema(defaultValue = "false"))
        @Valid
        @RequestParam(value = "allVersions", required = false, defaultValue = "false")
        allVersions: kotlin.Boolean,
        @Parameter(
            description = "Query task owner's review",
            schema = Schema(defaultValue = "false"),
        )
        @Valid
        @RequestParam(value = "queryReview", required = false, defaultValue = "false")
        queryReview: kotlin.Boolean,
        @Parameter(description = "Only return reviewed or unreviewed submissions")
        @Valid
        @RequestParam(value = "reviewed", required = false)
        reviewed: kotlin.Boolean?,
        @Parameter(description = "Page Size", schema = Schema(defaultValue = "9"))
        @Valid
        @RequestParam(value = "page_size", required = false, defaultValue = "9")
        pageSize: kotlin.Int,
        @Parameter(description = "ID of First Element")
        @Valid
        @RequestParam(value = "page_start", required = false)
        pageStart: kotlin.Long?,
        @Parameter(
            description = "\"updatedAt\" or \"createdAt\"",
            schema = Schema(defaultValue = "updatedAt"),
        )
        @Valid
        @RequestParam(value = "sort_by", required = false, defaultValue = "updatedAt")
        sortBy: kotlin.String,
        @Parameter(description = "\"asc\" or \"desc\"", schema = Schema(defaultValue = "desc"))
        @Valid
        @RequestParam(value = "sort_order", required = false, defaultValue = "desc")
        sortOrder: kotlin.String,
    ): ResponseEntity<GetTaskSubmissions200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Enumerate Tasks",
        operationId = "getTasks",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [Content(schema = Schema(implementation = GetTasks200ResponseDTO::class))],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/tasks"],
        produces = ["application/json"],
    )
    fun getTasks(
        @Parameter(description = "Space ID")
        @Valid
        @RequestParam(value = "space", required = false)
        space: kotlin.Long?,
        @Parameter(description = "Team ID")
        @Valid
        @RequestParam(value = "team", required = false)
        team: kotlin.Long?,
        @Parameter(
            description = "Distinguish task status",
            schema = Schema(allowableValues = ["APPROVED", "DISAPPROVED", "NONE"]),
        )
        @Valid
        @RequestParam(value = "approved", required = false)
        approved: ApproveTypeDTO?,
        @Parameter(description = "Owner's User ID")
        @Valid
        @RequestParam(value = "owner", required = false)
        owner: kotlin.Long?,
        @Parameter(description = "Require joined or not")
        @Valid
        @RequestParam(value = "joined", required = false)
        joined: kotlin.Boolean?,
        @Parameter(description = "Only show tasks with at least one of these topics")
        @Valid
        @RequestParam(value = "topics", required = false)
        topics: kotlin.collections.List<kotlin.Long>?,
        @Parameter(description = "Page Size", schema = Schema(defaultValue = "9"))
        @Valid
        @RequestParam(value = "page_size", required = false, defaultValue = "9")
        pageSize: kotlin.Int,
        @Parameter(description = "ID of First Element")
        @Valid
        @RequestParam(value = "page_start", required = false)
        pageStart: kotlin.Long?,
        @Parameter(
            description = "\"updatedAt\", \"deadline\" or \"createdAt\"",
            schema = Schema(defaultValue = "updatedAt"),
        )
        @Valid
        @RequestParam(value = "sort_by", required = false, defaultValue = "updatedAt")
        sortBy: kotlin.String,
        @Parameter(description = "\"asc\" or \"desc\"", schema = Schema(defaultValue = "desc"))
        @Valid
        @RequestParam(value = "sort_order", required = false, defaultValue = "desc")
        sortOrder: kotlin.String,
        @Parameter(
            description = "Query the space that the task belongs to",
            schema = Schema(defaultValue = "false"),
        )
        @Valid
        @RequestParam(value = "querySpace", required = false, defaultValue = "false")
        querySpace: kotlin.Boolean,
        @Parameter(
            description = "Query the team that the task belongs to",
            schema = Schema(defaultValue = "false"),
        )
        @Valid
        @RequestParam(value = "queryTeam", required = false, defaultValue = "false")
        queryTeam: kotlin.Boolean,
        @Parameter(
            description =
                "Check whether current user can join this task or using one of his/her team",
            schema = Schema(defaultValue = "false"),
        )
        @Valid
        @RequestParam(value = "queryJoinability", required = false, defaultValue = "false")
        queryJoinability: kotlin.Boolean,
        @Parameter(
            description =
                "Check whether current user can submit this task or using one of his/her team",
            schema = Schema(defaultValue = "false"),
        )
        @Valid
        @RequestParam(value = "querySubmittability", required = false, defaultValue = "false")
        querySubmittability: kotlin.Boolean,
        @Parameter(
            description = "Check whether current user has joined this task",
            schema = Schema(defaultValue = "false"),
        )
        @Valid
        @RequestParam(value = "queryJoined", required = false, defaultValue = "false")
        queryJoined: kotlin.Boolean,
        @Parameter(
            description = "Check whether current user has joined this task and has been approved",
            schema = Schema(defaultValue = "false"),
        )
        @Valid
        @RequestParam(value = "queryJoinedApproved", required = false, defaultValue = "false")
        queryJoinedApproved: kotlin.Boolean,
        @Parameter(
            description =
                "Check whether current user has joined this task and has been disapproved",
            schema = Schema(defaultValue = "false"),
        )
        @Valid
        @RequestParam(value = "queryJoinedDisapproved", required = false, defaultValue = "false")
        queryJoinedDisapproved: kotlin.Boolean,
        @Parameter(
            description =
                "Check whether current user has joined this task and has not been approved or disapproved",
            schema = Schema(defaultValue = "false"),
        )
        @Valid
        @RequestParam(
            value = "queryJoinedNotApprovedOrDisapproved",
            required = false,
            defaultValue = "false",
        )
        queryJoinedNotApprovedOrDisapproved: kotlin.Boolean,
        @Parameter(description = "Query task's topics", schema = Schema(defaultValue = "false"))
        @Valid
        @RequestParam(value = "queryTopics", required = false, defaultValue = "false")
        queryTopics: kotlin.Boolean,
        @Parameter(description = "Use this to search")
        @Valid
        @RequestParam(value = "keywords", required = false)
        keywords: kotlin.String?,
    ): ResponseEntity<GetTasks200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Update Task",
        operationId = "patchTask",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [Content(schema = Schema(implementation = GetTask200ResponseDTO::class))],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.PATCH],
        value = ["/tasks/{taskId}"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    fun patchTask(
        @Parameter(description = "Task ID", required = true)
        @PathVariable("taskId")
        taskId: kotlin.Long,
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        patchTaskRequestDTO: PatchTaskRequestDTO,
    ): ResponseEntity<GetTask200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Update TaskMembership",
        operationId = "patchTaskMembership",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(
                                        implementation = PatchTaskMembership200ResponseDTO::class
                                    )
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.PATCH],
        value = ["/tasks/{taskId}/participants"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    fun patchTaskMembership(
        @Parameter(description = "Task ID", required = true)
        @PathVariable("taskId")
        taskId: kotlin.Long,
        @NotNull
        @Parameter(description = "Member ID", required = true)
        @Valid
        @RequestParam(value = "member", required = true)
        member: kotlin.Long,
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        patchTaskMembershipRequestDTO: PatchTaskMembershipRequestDTO,
    ): ResponseEntity<PatchTaskMembership200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Update Submission",
        operationId = "patchTaskSubmission",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(implementation = PostTaskSubmission200ResponseDTO::class)
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.PATCH],
        value = ["/tasks/{taskId}/submissions/{version}"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    fun patchTaskSubmission(
        @Parameter(description = "Task ID", required = true)
        @PathVariable("taskId")
        taskId: kotlin.Long,
        @NotNull
        @Parameter(description = "Member's User/Group ID", required = true)
        @Valid
        @RequestParam(value = "member", required = true)
        member: kotlin.Long,
        @Parameter(description = "Version Index", required = true)
        @PathVariable("version")
        version: kotlin.Int,
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        postTaskSubmissionRequestInnerDTO:
            kotlin.collections.List<PostTaskSubmissionRequestInnerDTO>,
    ): ResponseEntity<PostTaskSubmission200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Re-Review Submission",
        operationId = "patchTaskSubmissionReview",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(
                                        implementation =
                                            PostTaskSubmissionReview200ResponseDTO::class
                                    )
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.PATCH],
        value = ["/tasks/submissions/{submissionId}/review"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    fun patchTaskSubmissionReview(
        @Parameter(description = "Task Submission ID", required = true)
        @PathVariable("submissionId")
        submissionId: kotlin.Long,
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        patchTaskSubmissionReviewRequestDTO: PatchTaskSubmissionReviewRequestDTO,
    ): ResponseEntity<PostTaskSubmissionReview200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Create Task",
        operationId = "postTask",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [Content(schema = Schema(implementation = GetTask200ResponseDTO::class))],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/tasks"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    fun postTask(
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        postTaskRequestDTO: PostTaskRequestDTO
    ): ResponseEntity<GetTask200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Apply for Task",
        operationId = "postTaskParticipant",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(
                                        implementation = PostTaskParticipant200ResponseDTO::class
                                    )
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/tasks/{taskId}/participants"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    fun postTaskParticipant(
        @Parameter(description = "Task ID", required = true)
        @PathVariable("taskId")
        taskId: kotlin.Long,
        @NotNull
        @Parameter(description = "Member ID", required = true)
        @Valid
        @RequestParam(value = "member", required = true)
        member: kotlin.Long,
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        postTaskParticipantRequestDTO: PostTaskParticipantRequestDTO,
    ): ResponseEntity<PostTaskParticipant200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Create Submission",
        operationId = "postTaskSubmission",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(implementation = PostTaskSubmission200ResponseDTO::class)
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/tasks/{taskId}/submissions"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    fun postTaskSubmission(
        @Parameter(description = "Task ID", required = true)
        @PathVariable("taskId")
        taskId: kotlin.Long,
        @NotNull
        @Parameter(description = "Member's User/Group ID", required = true)
        @Valid
        @RequestParam(value = "member", required = true)
        member: kotlin.Long,
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        postTaskSubmissionRequestInnerDTO:
            kotlin.collections.List<PostTaskSubmissionRequestInnerDTO>,
    ): ResponseEntity<PostTaskSubmission200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Review Submission",
        operationId = "postTaskSubmissionReview",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(
                                        implementation =
                                            PostTaskSubmissionReview200ResponseDTO::class
                                    )
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/tasks/submissions/{submissionId}/review"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    fun postTaskSubmissionReview(
        @Parameter(description = "Task Submission ID", required = true)
        @PathVariable("submissionId")
        submissionId: kotlin.Long,
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        postTaskSubmissionReviewRequestDTO: PostTaskSubmissionReviewRequestDTO,
    ): ResponseEntity<PostTaskSubmissionReview200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Request AI Advice Generation",
        operationId = "requestTaskAiAdvice",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(
                                        implementation = RequestTaskAiAdvice200ResponseDTO::class
                                    )
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/tasks/{taskId}/ai-advice"],
        produces = ["application/json"],
    )
    fun requestTaskAiAdvice(
        @Parameter(description = "Task ID", required = true)
        @PathVariable("taskId")
        taskId: kotlin.Long
    ): ResponseEntity<RequestTaskAiAdvice200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
