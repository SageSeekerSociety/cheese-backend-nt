/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package org.rucca.cheese.api

import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import javax.validation.Valid
import javax.validation.constraints.NotNull
import kotlin.collections.List
import org.rucca.cheese.model.DeleteTask200ResponseDTO
import org.rucca.cheese.model.GetTask200ResponseDTO
import org.rucca.cheese.model.GetTaskParticipants200ResponseDTO
import org.rucca.cheese.model.GetTaskSubmissions200ResponseDTO
import org.rucca.cheese.model.GetTasks200ResponseDTO
import org.rucca.cheese.model.PatchTaskRequestDTO
import org.rucca.cheese.model.PostTaskRequestDTO
import org.rucca.cheese.model.PostTaskSubmission200ResponseDTO
import org.rucca.cheese.model.PostTaskSubmissionRequestInnerDTO
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.validation.annotation.Validated
import org.springframework.web.bind.annotation.*

@RestController
@Validated
interface TasksApi {

    @Operation(
        tags =
            [
                "default",
            ],
        summary = "Delete Task",
        operationId = "deleteTask",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [Content(schema = Schema(implementation = DeleteTask200ResponseDTO::class))]
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")]
    )
    @RequestMapping(
        method = [RequestMethod.DELETE],
        value = ["/tasks/{taskId}"],
        produces = ["application/json"]
    )
    fun deleteTask(
        @Parameter(description = "Task ID", required = true)
        @PathVariable("taskId")
        taskId: kotlin.Long
    ): ResponseEntity<DeleteTask200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags =
            [
                "default",
            ],
        summary = "Leave Task",
        operationId = "deleteTaskParticipant",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [Content(schema = Schema(implementation = GetTask200ResponseDTO::class))]
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")]
    )
    @RequestMapping(
        method = [RequestMethod.DELETE],
        value = ["/tasks/{taskId}/participants"],
        produces = ["application/json"]
    )
    fun deleteTaskParticipant(
        @Parameter(description = "Task ID", required = true)
        @PathVariable("taskId")
        taskId: kotlin.Long,
        @NotNull
        @Parameter(description = "Member ID", required = true)
        @Valid
        @RequestParam(value = "member", required = true)
        member: kotlin.Long
    ): ResponseEntity<GetTask200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags =
            [
                "default",
            ],
        summary = "Query Task",
        operationId = "getTask",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [Content(schema = Schema(implementation = GetTask200ResponseDTO::class))]
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")]
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/tasks/{taskId}"],
        produces = ["application/json"]
    )
    fun getTask(
        @Parameter(description = "Task ID", required = true)
        @PathVariable("taskId")
        taskId: kotlin.Long,
        @Parameter(
            description =
                "Check whether current user can join this task or using one of his/her team",
            schema = Schema(defaultValue = "false")
        )
        @Valid
        @RequestParam(value = "queryJoinability", required = false, defaultValue = "false")
        queryJoinability: kotlin.Boolean,
        @Parameter(
            description =
                "Check whether current user can submit this task or using one of his/her team",
            schema = Schema(defaultValue = "false")
        )
        @Valid
        @RequestParam(value = "querySubmittability", required = false, defaultValue = "false")
        querySubmittability: kotlin.Boolean
    ): ResponseEntity<GetTask200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags =
            [
                "default",
            ],
        summary = "Get Participants",
        operationId = "getTaskParticipants",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(
                                        implementation = GetTaskParticipants200ResponseDTO::class
                                    )
                            )
                        ]
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")]
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/tasks/{taskId}/participants"],
        produces = ["application/json"]
    )
    fun getTaskParticipants(
        @Parameter(description = "Task ID", required = true)
        @PathVariable("taskId")
        taskId: kotlin.Long
    ): ResponseEntity<GetTaskParticipants200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags =
            [
                "default",
            ],
        summary = "Enumerate Submissions",
        operationId = "getTaskSubmissions",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(implementation = GetTaskSubmissions200ResponseDTO::class)
                            )
                        ]
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")]
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/tasks/{taskId}/submissions"],
        produces = ["application/json"]
    )
    fun getTaskSubmissions(
        @Parameter(description = "Task ID", required = true)
        @PathVariable("taskId")
        taskId: kotlin.Long,
        @Parameter(description = "Submitter's User/Team ID")
        @Valid
        @RequestParam(value = "member", required = false)
        member: kotlin.Long?,
        @Parameter(description = "Include All Versions", schema = Schema(defaultValue = "false"))
        @Valid
        @RequestParam(value = "allVersions", required = false, defaultValue = "false")
        allVersions: kotlin.Boolean,
        @Parameter(description = "Page Size", schema = Schema(defaultValue = "9"))
        @Valid
        @RequestParam(value = "page_size", required = false, defaultValue = "9")
        pageSize: kotlin.Int,
        @Parameter(description = "ID of First Element")
        @Valid
        @RequestParam(value = "page_start", required = false)
        pageStart: kotlin.Long?,
        @Parameter(
            description = "\"updatedAt\" or \"createdAt\"",
            schema = Schema(defaultValue = "updatedAt")
        )
        @Valid
        @RequestParam(value = "sort_by", required = false, defaultValue = "updatedAt")
        sortBy: kotlin.String,
        @Parameter(description = "\"asc\" or \"desc\"", schema = Schema(defaultValue = "desc"))
        @Valid
        @RequestParam(value = "sort_order", required = false, defaultValue = "desc")
        sortOrder: kotlin.String
    ): ResponseEntity<GetTaskSubmissions200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags =
            [
                "default",
            ],
        summary = "Enumerate Tasks",
        operationId = "getTasks",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [Content(schema = Schema(implementation = GetTasks200ResponseDTO::class))]
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")]
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/tasks"],
        produces = ["application/json"]
    )
    fun getTasks(
        @Parameter(description = "Space ID")
        @Valid
        @RequestParam(value = "space", required = false)
        space: kotlin.Long?,
        @Parameter(description = "Team ID")
        @Valid
        @RequestParam(value = "team", required = false)
        team: kotlin.Int?,
        @Parameter(description = "Page Size", schema = Schema(defaultValue = "9"))
        @Valid
        @RequestParam(value = "page_size", required = false, defaultValue = "9")
        pageSize: kotlin.Int,
        @Parameter(description = "ID of First Element")
        @Valid
        @RequestParam(value = "page_start", required = false)
        pageStart: kotlin.Long?,
        @Parameter(
            description = "\"updatedAt\", \"deadline\" or \"createdAt\"",
            schema = Schema(defaultValue = "updatedAt")
        )
        @Valid
        @RequestParam(value = "sort_by", required = false, defaultValue = "updatedAt")
        sortBy: kotlin.String,
        @Parameter(description = "\"asc\" or \"desc\"", schema = Schema(defaultValue = "desc"))
        @Valid
        @RequestParam(value = "sort_order", required = false, defaultValue = "desc")
        sortOrder: kotlin.String,
        @Parameter(
            description =
                "Check whether current user can join this task or using one of his/her team",
            schema = Schema(defaultValue = "false")
        )
        @Valid
        @RequestParam(value = "queryJoinability", required = false, defaultValue = "false")
        queryJoinability: kotlin.Boolean,
        @Parameter(
            description =
                "Check whether current user can submit this task or using one of his/her team",
            schema = Schema(defaultValue = "false")
        )
        @Valid
        @RequestParam(value = "querySubmittability", required = false, defaultValue = "false")
        querySubmittability: kotlin.Boolean,
        @Parameter(description = "Use this to search")
        @Valid
        @RequestParam(value = "keywords", required = false)
        keywords: kotlin.String?
    ): ResponseEntity<GetTasks200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags =
            [
                "default",
            ],
        summary = "Update Task",
        operationId = "patchTask",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [Content(schema = Schema(implementation = GetTask200ResponseDTO::class))]
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")]
    )
    @RequestMapping(
        method = [RequestMethod.PATCH],
        value = ["/tasks/{taskId}"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun patchTask(
        @Parameter(description = "Task ID", required = true)
        @PathVariable("taskId")
        taskId: kotlin.Long,
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        patchTaskRequestDTO: PatchTaskRequestDTO
    ): ResponseEntity<GetTask200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags =
            [
                "default",
            ],
        summary = "Update Submission",
        operationId = "patchTaskSubmission",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(implementation = PostTaskSubmission200ResponseDTO::class)
                            )
                        ]
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")]
    )
    @RequestMapping(
        method = [RequestMethod.PATCH],
        value = ["/tasks/{taskId}/submissions/{version}"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun patchTaskSubmission(
        @Parameter(description = "Task ID", required = true)
        @PathVariable("taskId")
        taskId: kotlin.Long,
        @NotNull
        @Parameter(description = "Member's User/Group ID", required = true)
        @Valid
        @RequestParam(value = "member", required = true)
        member: kotlin.Long,
        @Parameter(description = "Version Index", required = true)
        @PathVariable("version")
        version: kotlin.Int,
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        postTaskSubmissionRequestInnerDTO:
            kotlin.collections.List<PostTaskSubmissionRequestInnerDTO>
    ): ResponseEntity<PostTaskSubmission200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags =
            [
                "default",
            ],
        summary = "Create Task",
        operationId = "postTask",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [Content(schema = Schema(implementation = GetTask200ResponseDTO::class))]
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/tasks"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun postTask(
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        postTaskRequestDTO: PostTaskRequestDTO
    ): ResponseEntity<GetTask200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags =
            [
                "default",
            ],
        summary = "Apply for Task",
        operationId = "postTaskParticipant",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [Content(schema = Schema(implementation = GetTask200ResponseDTO::class))]
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/tasks/{taskId}/participants"],
        produces = ["application/json"]
    )
    fun postTaskParticipant(
        @Parameter(description = "Task ID", required = true)
        @PathVariable("taskId")
        taskId: kotlin.Long,
        @NotNull
        @Parameter(description = "Member ID", required = true)
        @Valid
        @RequestParam(value = "member", required = true)
        member: kotlin.Long
    ): ResponseEntity<GetTask200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags =
            [
                "default",
            ],
        summary = "Create Submission",
        operationId = "postTaskSubmission",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(implementation = PostTaskSubmission200ResponseDTO::class)
                            )
                        ]
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/tasks/{taskId}/submissions"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun postTaskSubmission(
        @Parameter(description = "Task ID", required = true)
        @PathVariable("taskId")
        taskId: kotlin.Long,
        @NotNull
        @Parameter(description = "Member's User/Group ID", required = true)
        @Valid
        @RequestParam(value = "member", required = true)
        member: kotlin.Long,
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        postTaskSubmissionRequestInnerDTO:
            kotlin.collections.List<PostTaskSubmissionRequestInnerDTO>
    ): ResponseEntity<PostTaskSubmission200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
