/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)
 * (7.10.0). https://openapi-generator.tech Do not edit the class manually.
 */
package org.rucca.cheese.api

import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import javax.validation.Valid
import org.rucca.cheese.model.NotificationsGet200ResponseDTO
import org.rucca.cheese.model.NotificationsReadPostRequestDTO
import org.rucca.cheese.model.NotificationsUnreadCountGet200ResponseDTO
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.validation.annotation.Validated
import org.springframework.web.bind.annotation.*

@RestController
@Validated
interface NotificationsApi {

    @Operation(
        tags =
            [
                "default",
            ],
        summary = "List Notifications",
        operationId = "notificationsGet",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(implementation = NotificationsGet200ResponseDTO::class)
                            )
                        ]
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")]
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/notifications"],
        produces = ["application/json"]
    )
    fun notificationsGet(): ResponseEntity<NotificationsGet200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags =
            [
                "default",
            ],
        summary = "Mark Notifications as Read",
        operationId = "notificationsReadPost",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content = [Content(schema = Schema(implementation = kotlin.Any::class))]
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/notifications/read"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun notificationsReadPost(
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        notificationsReadPostRequestDTO: NotificationsReadPostRequestDTO
    ): ResponseEntity<kotlin.Any> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags =
            [
                "default",
            ],
        summary = "Get Unread Notification Count",
        operationId = "notificationsUnreadCountGet",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(
                                        implementation =
                                            NotificationsUnreadCountGet200ResponseDTO::class
                                    )
                            )
                        ]
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")]
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/notifications/unread/count"],
        produces = ["application/json"]
    )
    fun notificationsUnreadCountGet(): ResponseEntity<NotificationsUnreadCountGet200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
