/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)
 * (7.12.0). https://openapi-generator.tech Do not edit the class manually.
 */
package org.rucca.cheese.api

import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import javax.validation.Valid
import javax.validation.constraints.Max
import javax.validation.constraints.Min
import javax.validation.constraints.NotNull
import kotlin.collections.List
import org.rucca.cheese.model.CreateKnowledge200ResponseDTO
import org.rucca.cheese.model.CreateKnowledgeRequestDTO
import org.rucca.cheese.model.KnowledgeDelete200ResponseDTO
import org.rucca.cheese.model.KnowledgeGetById200ResponseDTO
import org.rucca.cheese.model.ListKnowledge200ResponseDTO
import org.rucca.cheese.model.UpdateKnowledge200ResponseDTO
import org.rucca.cheese.model.UpdateKnowledgeRequestDTO
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.validation.annotation.Validated
import org.springframework.web.bind.annotation.*

@RestController
@Validated
interface KnowledgeApi {

    @Operation(
        tags = ["Knowledge"],
        summary = "Create Knowledge Item",
        operationId = "createKnowledge",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(implementation = CreateKnowledge200ResponseDTO::class)
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "BearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/knowledge"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    suspend fun createKnowledge(
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        createKnowledgeRequestDTO: CreateKnowledgeRequestDTO
    ): ResponseEntity<CreateKnowledge200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["Knowledge"],
        summary = "Delete Knowledge Item",
        operationId = "knowledgeDelete",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(implementation = KnowledgeDelete200ResponseDTO::class)
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "BearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.DELETE],
        value = ["/knowledge/{knowledgeId}"],
        produces = ["application/json"],
    )
    suspend fun knowledgeDelete(
        @Parameter(description = "Knowledge Item ID", required = true)
        @PathVariable("knowledgeId")
        knowledgeId: kotlin.Long
    ): ResponseEntity<KnowledgeDelete200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["Knowledge"],
        summary = "Get Single Knowledge Item",
        operationId = "knowledgeGetById",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "Successful retrieval of a knowledge item",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(implementation = KnowledgeGetById200ResponseDTO::class)
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "BearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/knowledge/{knowledgeId}"],
        produces = ["application/json"],
    )
    suspend fun knowledgeGetById(
        @Parameter(description = "Knowledge Item ID", required = true)
        @PathVariable("knowledgeId")
        knowledgeId: kotlin.Long
    ): ResponseEntity<KnowledgeGetById200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["Knowledge"],
        summary = "List Knowledge Items",
        operationId = "listKnowledge",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema = Schema(implementation = ListKnowledge200ResponseDTO::class)
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "BearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/knowledge"],
        produces = ["application/json"],
    )
    suspend fun listKnowledge(
        @NotNull
        @Parameter(description = "", required = true)
        @Valid
        @RequestParam(value = "teamId", required = true)
        teamId: kotlin.Long,
        @Parameter(description = "")
        @Valid
        @RequestParam(value = "projectId", required = false)
        projectId: kotlin.Long?,
        @Parameter(description = "Type (optional)")
        @Valid
        @RequestParam(value = "type", required = false)
        type: kotlin.String?,
        @Parameter(description = "Label list (optional)")
        @Valid
        @RequestParam(value = "labels", required = false)
        labels: kotlin.collections.List<kotlin.String>?,
        @Parameter(description = "Search keyword (optional)")
        @Valid
        @RequestParam(value = "query", required = false)
        query: kotlin.String?,
        @Parameter(description = "The ID of the first item in the page.")
        @Valid
        @RequestParam(value = "pageStart", required = false)
        pageStart: kotlin.Long?,
        @Min(1)
        @Max(100)
        @Parameter(
            description = "The number of items per page.",
            schema = Schema(defaultValue = "20"),
        )
        @Valid
        @RequestParam(value = "pageSize", required = false, defaultValue = "20")
        pageSize: kotlin.Int,
        @Parameter(description = "Sort by (optional)", schema = Schema(defaultValue = "createdAt"))
        @Valid
        @RequestParam(value = "sort_by", required = false, defaultValue = "createdAt")
        sortBy: kotlin.String,
        @Parameter(description = "Sort order (optional)", schema = Schema(defaultValue = "desc"))
        @Valid
        @RequestParam(value = "sort_order", required = false, defaultValue = "desc")
        sortOrder: kotlin.String,
    ): ResponseEntity<ListKnowledge200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["Knowledge"],
        summary = "Remove Upvote from Knowledge Item",
        operationId = "removeUpvoteKnowledge",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(implementation = UpdateKnowledge200ResponseDTO::class)
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "BearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.DELETE],
        value = ["/knowledge/{knowledgeId}/upvote"],
        produces = ["application/json"],
    )
    suspend fun removeUpvoteKnowledge(
        @Parameter(description = "Knowledge Item ID", required = true)
        @PathVariable("knowledgeId")
        knowledgeId: kotlin.Long
    ): ResponseEntity<UpdateKnowledge200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["Knowledge"],
        summary = "Update Knowledge Item",
        operationId = "updateKnowledge",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(implementation = UpdateKnowledge200ResponseDTO::class)
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "BearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.PATCH],
        value = ["/knowledge/{knowledgeId}"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    suspend fun updateKnowledge(
        @Parameter(description = "Knowledge Item ID", required = true)
        @PathVariable("knowledgeId")
        knowledgeId: kotlin.Long,
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        updateKnowledgeRequestDTO: UpdateKnowledgeRequestDTO,
    ): ResponseEntity<UpdateKnowledge200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["Knowledge"],
        summary = "Upvote Knowledge Item",
        operationId = "upvoteKnowledge",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(implementation = UpdateKnowledge200ResponseDTO::class)
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "BearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/knowledge/{knowledgeId}/upvote"],
        produces = ["application/json"],
    )
    suspend fun upvoteKnowledge(
        @Parameter(description = "Knowledge Item ID", required = true)
        @PathVariable("knowledgeId")
        knowledgeId: kotlin.Long
    ): ResponseEntity<UpdateKnowledge200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
