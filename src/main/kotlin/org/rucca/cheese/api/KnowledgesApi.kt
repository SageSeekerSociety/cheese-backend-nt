/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)
 * (7.10.0). https://openapi-generator.tech Do not edit the class manually.
 */
package org.rucca.cheese.api

import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import javax.validation.Valid
import javax.validation.constraints.NotNull
import kotlin.collections.List
import org.rucca.cheese.model.KnowledgeDelete200ResponseDTO
import org.rucca.cheese.model.KnowledgeGet200ResponseDTO
import org.rucca.cheese.model.KnowledgePatch200ResponseDTO
import org.rucca.cheese.model.KnowledgePatchRequestDTO
import org.rucca.cheese.model.KnowledgePost200ResponseDTO
import org.rucca.cheese.model.KnowledgePostRequestDTO
import org.rucca.cheese.model.UpdateKnowledgeByIdRequestDTO
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.validation.annotation.Validated
import org.springframework.web.bind.annotation.*

@RestController
@Validated
interface KnowledgesApi {

    @Operation(
        tags = ["default"],
        summary = "Delete Knowledge Item",
        operationId = "knowledgeDelete",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(implementation = KnowledgeDelete200ResponseDTO::class)
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.DELETE],
        value = ["/knowledges"],
        produces = ["application/json"],
    )
    fun knowledgeDelete(
        @NotNull
        @Parameter(description = "Knowledge Item ID", required = true)
        @Valid
        @RequestParam(value = "id", required = true)
        id: kotlin.Long
    ): ResponseEntity<KnowledgeDelete200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "List Knowledge Items",
        operationId = "knowledgeGet",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema = Schema(implementation = KnowledgeGet200ResponseDTO::class)
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/knowledges"],
        produces = ["application/json"],
    )
    fun knowledgeGet(
        @Parameter(description = "Project ID list (optional)")
        @Valid
        @RequestParam(value = "project_ids", required = false)
        projectIds: kotlin.collections.List<kotlin.Long>?,
        @Parameter(description = "Type (optional)")
        @Valid
        @RequestParam(value = "type", required = false)
        type: kotlin.String?,
        @Parameter(description = "Label list (optional)")
        @Valid
        @RequestParam(value = "labels", required = false)
        labels: kotlin.collections.List<kotlin.String>?,
        @Parameter(description = "Search keyword (optional)")
        @Valid
        @RequestParam(value = "query", required = false)
        query: kotlin.String?,
        @Parameter(description = "Start ID (optional)")
        @Valid
        @RequestParam(value = "page_start", required = false)
        pageStart: kotlin.Long?,
        @Parameter(description = "Page size (default 20)", schema = Schema(defaultValue = "20"))
        @Valid
        @RequestParam(value = "page_size", required = false, defaultValue = "20")
        pageSize: kotlin.Int,
    ): ResponseEntity<KnowledgeGet200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Update Knowledge Item",
        operationId = "knowledgePatch",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(implementation = KnowledgePatch200ResponseDTO::class)
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.PATCH],
        value = ["/knowledges"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    fun knowledgePatch(
        @NotNull
        @Parameter(description = "Knowledge Item ID", required = true)
        @Valid
        @RequestParam(value = "id", required = true)
        id: kotlin.Long,
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        knowledgePatchRequestDTO: KnowledgePatchRequestDTO,
    ): ResponseEntity<KnowledgePatch200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Create Knowledge Item",
        operationId = "knowledgePost",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema = Schema(implementation = KnowledgePost200ResponseDTO::class)
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/knowledges"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    fun knowledgePost(
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        knowledgePostRequestDTO: KnowledgePostRequestDTO
    ): ResponseEntity<KnowledgePost200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Upvote Knowledge Item",
        operationId = "patchKnowledge",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(implementation = KnowledgePatch200ResponseDTO::class)
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/knowledges/{knowledgeId}/upvote"],
        produces = ["application/json"],
    )
    fun patchKnowledge(
        @Parameter(description = "Knowledge Item ID", required = true)
        @PathVariable("knowledgeId")
        knowledgeId: kotlin.Long
    ): ResponseEntity<KnowledgePatch200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Remove Upvote from Knowledge Item",
        operationId = "removeUpvoteKnowledge",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(implementation = KnowledgePatch200ResponseDTO::class)
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.DELETE],
        value = ["/knowledges/{knowledgeId}/upvote"],
        produces = ["application/json"],
    )
    fun removeUpvoteKnowledge(
        @Parameter(description = "Knowledge Item ID", required = true)
        @PathVariable("knowledgeId")
        knowledgeId: kotlin.Long
    ): ResponseEntity<KnowledgePatch200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Update Knowledge Item",
        operationId = "updateKnowledgeById",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(implementation = KnowledgePatch200ResponseDTO::class)
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.PATCH],
        value = ["/knowledges/{knowledgeId}"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    fun updateKnowledgeById(
        @Parameter(description = "Knowledge Item ID", required = true)
        @PathVariable("knowledgeId")
        knowledgeId: kotlin.Long,
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        updateKnowledgeByIdRequestDTO: UpdateKnowledgeByIdRequestDTO,
    ): ResponseEntity<KnowledgePatch200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
