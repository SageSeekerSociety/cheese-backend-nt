/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)
 * (7.10.0). https://openapi-generator.tech Do not edit the class manually.
 */
package org.rucca.cheese.api

import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import javax.validation.Valid
import org.rucca.cheese.model.DiscussionsDiscussionIdReactionsPost200ResponseDTO
import org.rucca.cheese.model.DiscussionsDiscussionIdReactionsPostRequestDTO
import org.rucca.cheese.model.DiscussionsGet200ResponseDTO
import org.rucca.cheese.model.DiscussionsPost200ResponseDTO
import org.rucca.cheese.model.DiscussionsPostRequestDTO
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.validation.annotation.Validated
import org.springframework.web.bind.annotation.*

@RestController
@Validated
interface DiscussionsApi {

    @Operation(
        tags = ["default"],
        summary = "React to Discussion",
        operationId = "discussionsDiscussionIdReactionsPost",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(
                                        implementation =
                                            DiscussionsDiscussionIdReactionsPost200ResponseDTO::class
                                    )
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/discussions/{discussionId}/reactions"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    fun discussionsDiscussionIdReactionsPost(
        @Parameter(description = "讨论ID", required = true)
        @PathVariable("discussionId")
        discussionId: kotlin.Long,
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        discussionsDiscussionIdReactionsPostRequestDTO:
            DiscussionsDiscussionIdReactionsPostRequestDTO,
    ): ResponseEntity<DiscussionsDiscussionIdReactionsPost200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "List Discussions",
        operationId = "discussionsGet",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(implementation = DiscussionsGet200ResponseDTO::class)
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/discussions"],
        produces = ["application/json"],
    )
    fun discussionsGet(
        @Parameter(description = "模型类型", schema = Schema(allowableValues = ["PROJECT"]))
        @Valid
        @RequestParam(value = "modelType", required = false)
        modelType: kotlin.String?,
        @Parameter(description = "模型ID")
        @Valid
        @RequestParam(value = "modelId", required = false)
        modelId: kotlin.Long?,
        @Parameter(description = "起始ID")
        @Valid
        @RequestParam(value = "page_start", required = false)
        pageStart: kotlin.Long?,
        @Parameter(description = "每页数量 (默认20)", schema = Schema(defaultValue = "20"))
        @Valid
        @RequestParam(value = "page_size", required = false, defaultValue = "20")
        pageSize: kotlin.Int,
        @Parameter(
            description = "\"createdAt\" or \"updatedAt\"",
            schema = Schema(defaultValue = "createdAt"),
        )
        @Valid
        @RequestParam(value = "sort_by", required = false, defaultValue = "createdAt")
        sortBy: kotlin.String,
        @Parameter(description = "\"asc\" or \"desc\"", schema = Schema(defaultValue = "desc"))
        @Valid
        @RequestParam(value = "sort_order", required = false, defaultValue = "desc")
        sortOrder: kotlin.String,
    ): ResponseEntity<DiscussionsGet200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["default"],
        summary = "Create Discussion",
        operationId = "discussionsPost",
        description = """""",
        responses =
            [
                ApiResponse(
                    responseCode = "200",
                    description = "OK",
                    content =
                        [
                            Content(
                                schema =
                                    Schema(implementation = DiscussionsPost200ResponseDTO::class)
                            )
                        ],
                )
            ],
        security = [SecurityRequirement(name = "bearerAuth")],
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/discussions"],
        produces = ["application/json"],
        consumes = ["application/json"],
    )
    fun discussionsPost(
        @Parameter(description = "", required = true)
        @Valid
        @RequestBody
        discussionsPostRequestDTO: DiscussionsPostRequestDTO
    ): ResponseEntity<DiscussionsPost200ResponseDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
