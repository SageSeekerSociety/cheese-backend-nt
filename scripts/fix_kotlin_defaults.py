# -*- coding: utf-8 -*-
"""
openapi-generator post-processing script for Kotlin Spring.

Purpose:
--------
This script serves as a workaround for a bug in openapi-generator (specifically
observed with the kotlin-spring generator) where it incorrectly generates the
`defaultValue` for Long types within `@RequestParam` annotations. Instead of
generating a plain number string like `"20"`, it generates a Kotlin/Java
Long literal string like `"20L"`. Spring MVC's default converters cannot
parse this "L" suffix, leading to a 400 Bad Request error when the default
value is used.

This script removes the erroneous 'L' suffix from such `defaultValue` strings.

How it's used:
--------------
This script is intended to be executed by the openapi-generator tool (e.g.,
openapi-generator-maven-plugin, CLI, Gradle plugin) via its file post-processing
hook.

1.  Configure your openapi-generator execution:
    - Set the `<enablePostProcessFile>true</enablePostProcessFile>` option (or
      the equivalent CLI/Gradle flag).
2.  Set the environment variable `KOTLIN_POST_PROCESS_FILE` before running the
    generator. The value of this variable should be the command to execute this
    script (e.g., `python /path/to/this/script/fix_kotlin_defaults.py` or just
    `python scripts/fix_kotlin_defaults.py` if using a relative path from the
    project root in IDE/build configurations).

The generator will then invoke this script for *each* generated Kotlin file,
passing the absolute path to the generated file as the final command-line argument.
"""

import sys
import os
import re
import argparse

# Regex to find incorrect defaultValue="<number>L" in @RequestParam annotations.
# Group 1: Captures the part before the number (`@RequestParam(...defaultValue = "`)
# Group 2: Captures the numeric part (`\d+`)
regex = re.compile(r'(@RequestParam\(.*defaultValue = ")(\d+)L"')

# Replacement function to remove the trailing 'L'.
# It returns Group 1 + Group 2 + the closing quote.
def replacement_func(match):
    """Constructs the corrected string without the 'L'."""
    return f'{match.group(1)}{match.group(2)}"'

def process_file(filepath):
    """
    Reads a file, applies the regex substitution to fix defaultValues,
    and writes the file back if modifications were made.

    Args:
        filepath (str): The absolute path to the Kotlin file to process.

    Returns:
        bool: True if processing was successful (or no changes needed),
              False if an error occurred.
    """
    print(f"Post-processing file: {filepath}")
    if not os.path.isfile(filepath):
        print(f"Error: File not found: {filepath}", file=sys.stderr)
        # Return False to indicate failure. Build might stop depending on generator config.
        return False

    try:
        # Read the file content
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()

        # Apply the substitution. `subn` returns the new string and the number of substitutions made.
        new_content, num_subs = regex.subn(replacement_func, content)

        # If any substitutions were made, write the modified content back to the file.
        if num_subs > 0:
            print(f"  Modifying {num_subs} occurrence(s) in: {filepath}")
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(new_content)
        else:
            # Optional: Log if no changes were needed
            print(f"  No changes needed for: {filepath}")
        return True # Indicate successful processing
    except Exception as e:
        # Log any exception during file processing
        print(f"Error processing file {filepath}: {e}", file=sys.stderr)
        # Return False on error.
        return False

if __name__ == "__main__":
    # Setup command-line argument parsing
    parser = argparse.ArgumentParser(
        description="Fix incorrect Kotlin Long defaultValues ('...L') in @RequestParam annotations generated by openapi-generator."
    )
    # The script expects exactly one argument: the path to the file generated by openapi-generator
    parser.add_argument(
        "filepath",
        help="Path to the generated Kotlin file to process."
    )
    args = parser.parse_args()

    # Process the file provided as a command-line argument
    if not process_file(args.filepath):
        # If processing failed (returned False), exit with a non-zero status code
        # to signal an error to the calling process (openapi-generator).
        print(f"Exiting with error status due to failure processing: {args.filepath}")
        sys.exit(1)

    # If processing was successful, exit with status code 0.
    sys.exit(0)
